{
  "functionDefs": [
    {
      "name": "constructor",
      "file": "src/dataLoader.js",
      "line": 6,
      "signature": "constructor() {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/dataLoader.js",
      "line": 6,
      "signature": "constructor() {",
      "type": "constructor"
    },
    {
      "name": "validateDataIntegrity",
      "file": "src/dataLoader.js",
      "line": 84,
      "signature": "validateDataIntegrity() {",
      "type": "method"
    },
    {
      "name": "_validateRooms",
      "file": "src/dataLoader.js",
      "line": 106,
      "signature": "_validateRooms() {",
      "type": "method"
    },
    {
      "name": "_validateQuestions",
      "file": "src/dataLoader.js",
      "line": 153,
      "signature": "_validateQuestions() {",
      "type": "method"
    },
    {
      "name": "_validateAchievements",
      "file": "src/dataLoader.js",
      "line": 200,
      "signature": "_validateAchievements() {",
      "type": "method"
    },
    {
      "name": "_validateCrossReferences",
      "file": "src/dataLoader.js",
      "line": 233,
      "signature": "_validateCrossReferences() {",
      "type": "method"
    },
    {
      "name": "getRoom",
      "file": "src/dataLoader.js",
      "line": 266,
      "signature": "getRoom(roomId) {",
      "type": "method"
    },
    {
      "name": "getQuestion",
      "file": "src/dataLoader.js",
      "line": 279,
      "signature": "getQuestion(questionId) {",
      "type": "method"
    },
    {
      "name": "getQuestionsByCategory",
      "file": "src/dataLoader.js",
      "line": 292,
      "signature": "getQuestionsByCategory(category) {",
      "type": "method"
    },
    {
      "name": "getAchievement",
      "file": "src/dataLoader.js",
      "line": 305,
      "signature": "getAchievement(achievementId) {",
      "type": "method"
    },
    {
      "name": "getStartingRoom",
      "file": "src/dataLoader.js",
      "line": 317,
      "signature": "getStartingRoom() {",
      "type": "method"
    },
    {
      "name": "getAllData",
      "file": "src/dataLoader.js",
      "line": 329,
      "signature": "getAllData() {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/gameState.js",
      "line": 6,
      "signature": "constructor(dataLoader) {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/gameState.js",
      "line": 6,
      "signature": "constructor(dataLoader) {",
      "type": "constructor"
    },
    {
      "name": "initializeStartingRoom",
      "file": "src/gameState.js",
      "line": 32,
      "signature": "initializeStartingRoom() {",
      "type": "method"
    },
    {
      "name": "calculateTimeBonus",
      "file": "src/gameState.js",
      "line": 176,
      "signature": "calculateTimeBonus() {",
      "type": "method"
    },
    {
      "name": "startQuestionTimer",
      "file": "src/gameState.js",
      "line": 191,
      "signature": "startQuestionTimer() {",
      "type": "method"
    },
    {
      "name": "getCorrectAnswersCount",
      "file": "src/gameState.js",
      "line": 270,
      "signature": "getCorrectAnswersCount() {",
      "type": "method"
    },
    {
      "name": "getGameStatistics",
      "file": "src/gameState.js",
      "line": 279,
      "signature": "getGameStatistics() {",
      "type": "method"
    },
    {
      "name": "formatTime",
      "file": "src/gameState.js",
      "line": 333,
      "signature": "formatTime(milliseconds) {",
      "type": "method"
    },
    {
      "name": "calculateDetailedBonuses",
      "file": "src/gameState.js",
      "line": 351,
      "signature": "calculateDetailedBonuses() {",
      "type": "method"
    },
    {
      "name": "calculateFinalScore",
      "file": "src/gameState.js",
      "line": 369,
      "signature": "calculateFinalScore() {",
      "type": "method"
    },
    {
      "name": "calculatePerformanceScore",
      "file": "src/gameState.js",
      "line": 382,
      "signature": "calculatePerformanceScore(accuracy, exploration, completion) {",
      "type": "method"
    },
    {
      "name": "isRoomAccessible",
      "file": "src/gameState.js",
      "line": 410,
      "signature": "isRoomAccessible(roomId) {",
      "type": "method"
    },
    {
      "name": "saveGame",
      "file": "src/gameState.js",
      "line": 417,
      "signature": "saveGame() {",
      "type": "method"
    },
    {
      "name": "loadGame",
      "file": "src/gameState.js",
      "line": 445,
      "signature": "loadGame() {",
      "type": "method"
    },
    {
      "name": "validateSaveData",
      "file": "src/gameState.js",
      "line": 492,
      "signature": "validateSaveData(data) {",
      "type": "method"
    },
    {
      "name": "sanitizeRoomId",
      "file": "src/gameState.js",
      "line": 531,
      "signature": "sanitizeRoomId(roomId) {",
      "type": "method"
    },
    {
      "name": "sanitizeRoomArray",
      "file": "src/gameState.js",
      "line": 550,
      "signature": "sanitizeRoomArray(roomArray, defaultRoom) {",
      "type": "method"
    },
    {
      "name": "sanitizeQuestionArray",
      "file": "src/gameState.js",
      "line": 574,
      "signature": "sanitizeQuestionArray(questionArray) {",
      "type": "method"
    },
    {
      "name": "sanitizeTimestamp",
      "file": "src/gameState.js",
      "line": 590,
      "signature": "sanitizeTimestamp(timestamp) {",
      "type": "method"
    },
    {
      "name": "sanitizePlayerName",
      "file": "src/gameState.js",
      "line": 612,
      "signature": "sanitizePlayerName(playerName) {",
      "type": "method"
    },
    {
      "name": "resetGame",
      "file": "src/gameState.js",
      "line": 627,
      "signature": "resetGame() {",
      "type": "method"
    },
    {
      "name": "getStateSnapshot",
      "file": "src/gameState.js",
      "line": 647,
      "signature": "getStateSnapshot() {",
      "type": "method"
    },
    {
      "name": "exportSaveData",
      "file": "src/gameState.js",
      "line": 664,
      "signature": "exportSaveData() {",
      "type": "method"
    },
    {
      "name": "on",
      "file": "src/gameState.js",
      "line": 697,
      "signature": "on(event, callback) {",
      "type": "method"
    },
    {
      "name": "emit",
      "file": "src/gameState.js",
      "line": 704,
      "signature": "emit(event, data) {",
      "type": "method"
    },
    {
      "name": "getStatistics",
      "file": "src/gameState.js",
      "line": 719,
      "signature": "getStatistics() {",
      "type": "method"
    },
    {
      "name": "getTimeInCurrentRoom",
      "file": "src/gameState.js",
      "line": 733,
      "signature": "getTimeInCurrentRoom() {",
      "type": "method"
    },
    {
      "name": "pauseTimer",
      "file": "src/gameState.js",
      "line": 743,
      "signature": "pauseTimer() {",
      "type": "method"
    },
    {
      "name": "resumeTimer",
      "file": "src/gameState.js",
      "line": 753,
      "signature": "resumeTimer() {",
      "type": "method"
    },
    {
      "name": "formatTime",
      "file": "src/gameState.js",
      "line": 764,
      "signature": "formatTime(milliseconds) {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/quizEngine.js",
      "line": 6,
      "signature": "constructor(dataLoader, gameState) {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/quizEngine.js",
      "line": 6,
      "signature": "constructor(dataLoader, gameState) {",
      "type": "constructor"
    },
    {
      "name": "categorizeQuestions",
      "file": "src/quizEngine.js",
      "line": 54,
      "signature": "categorizeQuestions() {",
      "type": "method"
    },
    {
      "name": "shuffleQuestionPool",
      "file": "src/quizEngine.js",
      "line": 69,
      "signature": "shuffleQuestionPool() {",
      "type": "method"
    },
    {
      "name": "shuffleAnswers",
      "file": "src/quizEngine.js",
      "line": 182,
      "signature": "shuffleAnswers(question) {",
      "type": "method"
    },
    {
      "name": "startQuestionTimer",
      "file": "src/quizEngine.js",
      "line": 204,
      "signature": "startQuestionTimer() {",
      "type": "method"
    },
    {
      "name": "clearQuestionTimer",
      "file": "src/quizEngine.js",
      "line": 232,
      "signature": "clearQuestionTimer() {",
      "type": "method"
    },
    {
      "name": "handleTimeUp",
      "file": "src/quizEngine.js",
      "line": 242,
      "signature": "handleTimeUp() {",
      "type": "method"
    },
    {
      "name": "generateAnswerHash",
      "file": "src/quizEngine.js",
      "line": 340,
      "signature": "generateAnswerHash(questionId, correctIndex) {",
      "type": "method"
    },
    {
      "name": "validateAnswerHash",
      "file": "src/quizEngine.js",
      "line": 359,
      "signature": "validateAnswerHash(questionId, answerIndex, expectedHash) {",
      "type": "method"
    },
    {
      "name": "getOriginalCorrectAnswer",
      "file": "src/quizEngine.js",
      "line": 370,
      "signature": "getOriginalCorrectAnswer(questionId) {",
      "type": "method"
    },
    {
      "name": "calculateTimeBonus",
      "file": "src/quizEngine.js",
      "line": 390,
      "signature": "calculateTimeBonus(timeElapsed) {",
      "type": "method"
    },
    {
      "name": "getHint",
      "file": "src/quizEngine.js",
      "line": 404,
      "signature": "getHint() {",
      "type": "method"
    },
    {
      "name": "skipQuestion",
      "file": "src/quizEngine.js",
      "line": 424,
      "signature": "skipQuestion() {",
      "type": "method"
    },
    {
      "name": "getQuestionsByCategory",
      "file": "src/quizEngine.js",
      "line": 450,
      "signature": "getQuestionsByCategory(category) {",
      "type": "method"
    },
    {
      "name": "getAvailableCategories",
      "file": "src/quizEngine.js",
      "line": 457,
      "signature": "getAvailableCategories() {",
      "type": "method"
    },
    {
      "name": "getQuizStatistics",
      "file": "src/quizEngine.js",
      "line": 464,
      "signature": "getQuizStatistics() {",
      "type": "method"
    },
    {
      "name": "getAdaptiveQuestion",
      "file": "src/quizEngine.js",
      "line": 495,
      "signature": "getAdaptiveQuestion() {",
      "type": "method"
    },
    {
      "name": "on",
      "file": "src/quizEngine.js",
      "line": 530,
      "signature": "on(event, callback) {",
      "type": "method"
    },
    {
      "name": "emit",
      "file": "src/quizEngine.js",
      "line": 537,
      "signature": "emit(event, data) {",
      "type": "method"
    },
    {
      "name": "destroy",
      "file": "src/quizEngine.js",
      "line": 552,
      "signature": "destroy() {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/uiManager.js",
      "line": 5,
      "signature": "constructor(dataLoader, gameState, quizEngine, animationManager = null, achievementManager = null) {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/uiManager.js",
      "line": 5,
      "signature": "constructor(dataLoader, gameState, quizEngine, animationManager = null, achievementManager = null) {",
      "type": "constructor"
    },
    {
      "name": "initializeElements",
      "file": "src/uiManager.js",
      "line": 45,
      "signature": "initializeElements() {",
      "type": "method"
    },
    {
      "name": "getElementsByIds",
      "file": "src/uiManager.js",
      "line": 99,
      "signature": "getElementsByIds(ids) {",
      "type": "method"
    },
    {
      "name": "setupEventListeners",
      "file": "src/uiManager.js",
      "line": 116,
      "signature": "setupEventListeners() {",
      "type": "method"
    },
    {
      "name": "setupKeyboardNavigation",
      "file": "src/uiManager.js",
      "line": 181,
      "signature": "setupKeyboardNavigation() {",
      "type": "method"
    },
    {
      "name": "setupAriaLiveRegions",
      "file": "src/uiManager.js",
      "line": 204,
      "signature": "setupAriaLiveRegions() {",
      "type": "method"
    },
    {
      "name": "announceToScreenReader",
      "file": "src/uiManager.js",
      "line": 229,
      "signature": "announceToScreenReader(message, priority = 'polite') {",
      "type": "method"
    },
    {
      "name": "handleKeyboardInput",
      "file": "src/uiManager.js",
      "line": 252,
      "signature": "handleKeyboardInput(event) {",
      "type": "method"
    },
    {
      "name": "handleVictoryScreenKeys",
      "file": "src/uiManager.js",
      "line": 289,
      "signature": "handleVictoryScreenKeys(event) {",
      "type": "method"
    },
    {
      "name": "handleQuestionKeys",
      "file": "src/uiManager.js",
      "line": 322,
      "signature": "handleQuestionKeys(event) {",
      "type": "method"
    },
    {
      "name": "handleMapNavigationKeys",
      "file": "src/uiManager.js",
      "line": 373,
      "signature": "handleMapNavigationKeys(event) {",
      "type": "method"
    },
    {
      "name": "handleGlobalShortcuts",
      "file": "src/uiManager.js",
      "line": 414,
      "signature": "handleGlobalShortcuts(event) {",
      "type": "method"
    },
    {
      "name": "shouldPreventDefault",
      "file": "src/uiManager.js",
      "line": 539,
      "signature": "shouldPreventDefault(event) {",
      "type": "method"
    },
    {
      "name": "isVictoryScreenVisible",
      "file": "src/uiManager.js",
      "line": 560,
      "signature": "isVictoryScreenVisible() {",
      "type": "method"
    },
    {
      "name": "isQuestionActive",
      "file": "src/uiManager.js",
      "line": 570,
      "signature": "isQuestionActive() {",
      "type": "method"
    },
    {
      "name": "checkQuestionActive",
      "file": "src/uiManager.js",
      "line": 578,
      "signature": "checkQuestionActive() {",
      "type": "method"
    },
    {
      "name": "isMapFocused",
      "file": "src/uiManager.js",
      "line": 586,
      "signature": "isMapFocused() {",
      "type": "method"
    },
    {
      "name": "selectAnswerByIndex",
      "file": "src/uiManager.js",
      "line": 594,
      "signature": "selectAnswerByIndex(index) {",
      "type": "method"
    },
    {
      "name": "highlightSelectedAnswer",
      "file": "src/uiManager.js",
      "line": 617,
      "signature": "highlightSelectedAnswer(index) {",
      "type": "method"
    },
    {
      "name": "submitCurrentAnswer",
      "file": "src/uiManager.js",
      "line": 640,
      "signature": "submitCurrentAnswer() {",
      "type": "method"
    },
    {
      "name": "clearAnswerSelection",
      "file": "src/uiManager.js",
      "line": 652,
      "signature": "clearAnswerSelection() {",
      "type": "method"
    },
    {
      "name": "navigateMapDirection",
      "file": "src/uiManager.js",
      "line": 664,
      "signature": "navigateMapDirection(direction) {",
      "type": "method"
    },
    {
      "name": "enterCurrentRoom",
      "file": "src/uiManager.js",
      "line": 675,
      "signature": "enterCurrentRoom() {",
      "type": "method"
    },
    {
      "name": "focusMap",
      "file": "src/uiManager.js",
      "line": 687,
      "signature": "focusMap() {",
      "type": "method"
    },
    {
      "name": "focusQuestion",
      "file": "src/uiManager.js",
      "line": 697,
      "signature": "focusQuestion() {",
      "type": "method"
    },
    {
      "name": "showKeyboardHelp",
      "file": "src/uiManager.js",
      "line": 707,
      "signature": "showKeyboardHelp() {",
      "type": "method"
    },
    {
      "name": "showQuickStats",
      "file": "src/uiManager.js",
      "line": 760,
      "signature": "showQuickStats() {",
      "type": "method"
    },
    {
      "name": "toggleTimer",
      "file": "src/uiManager.js",
      "line": 783,
      "signature": "toggleTimer() {",
      "type": "method"
    },
    {
      "name": "confirmAndResetGame",
      "file": "src/uiManager.js",
      "line": 796,
      "signature": "confirmAndResetGame() {",
      "type": "method"
    },
    {
      "name": "toggleDebugMode",
      "file": "src/uiManager.js",
      "line": 807,
      "signature": "toggleDebugMode() {",
      "type": "method"
    },
    {
      "name": "exportSaveData",
      "file": "src/uiManager.js",
      "line": 825,
      "signature": "exportSaveData() {",
      "type": "method"
    },
    {
      "name": "refreshCurrentRoom",
      "file": "src/uiManager.js",
      "line": 853,
      "signature": "refreshCurrentRoom() {",
      "type": "method"
    },
    {
      "name": "cycleFocus",
      "file": "src/uiManager.js",
      "line": 869,
      "signature": "cycleFocus() {",
      "type": "method"
    },
    {
      "name": "isInInputField",
      "file": "src/uiManager.js",
      "line": 889,
      "signature": "isInInputField(target) {",
      "type": "method"
    },
    {
      "name": "setupAchievementNotifications",
      "file": "src/uiManager.js",
      "line": 896,
      "signature": "setupAchievementNotifications() {",
      "type": "method"
    },
    {
      "name": "queueAchievementNotification",
      "file": "src/uiManager.js",
      "line": 917,
      "signature": "queueAchievementNotification(achievementData) {",
      "type": "method"
    },
    {
      "name": "hideAchievementNotification",
      "file": "src/uiManager.js",
      "line": 1004,
      "signature": "hideAchievementNotification(notification) {",
      "type": "method"
    },
    {
      "name": "createAchievementNotificationElement",
      "file": "src/uiManager.js",
      "line": 1016,
      "signature": "createAchievementNotificationElement() {",
      "type": "method"
    },
    {
      "name": "toggleAchievementGallery",
      "file": "src/uiManager.js",
      "line": 1035,
      "signature": "toggleAchievementGallery() {",
      "type": "method"
    },
    {
      "name": "populateAchievementGallery",
      "file": "src/uiManager.js",
      "line": 1055,
      "signature": "populateAchievementGallery() {",
      "type": "method"
    },
    {
      "name": "updateAchievementStats",
      "file": "src/uiManager.js",
      "line": 1136,
      "signature": "updateAchievementStats() {",
      "type": "method"
    },
    {
      "name": "updateProgressIndicators",
      "file": "src/uiManager.js",
      "line": 1261,
      "signature": "updateProgressIndicators() {",
      "type": "method"
    },
    {
      "name": "updateProgressBar",
      "file": "src/uiManager.js",
      "line": 1291,
      "signature": "updateProgressBar(type, percentage) {",
      "type": "method"
    },
    {
      "name": "updateGameControls",
      "file": "src/uiManager.js",
      "line": 1346,
      "signature": "updateGameControls() {",
      "type": "method"
    },
    {
      "name": "displayQuestion",
      "file": "src/uiManager.js",
      "line": 1381,
      "signature": "displayQuestion(questionData) {",
      "type": "method"
    },
    {
      "name": "displayAnswerOptions",
      "file": "src/uiManager.js",
      "line": 1424,
      "signature": "displayAnswerOptions(questionData) {",
      "type": "method"
    },
    {
      "name": "clearAnswerButtonListeners",
      "file": "src/uiManager.js",
      "line": 1461,
      "signature": "clearAnswerButtonListeners() {",
      "type": "method"
    },
    {
      "name": "setupAnswerButtonListeners",
      "file": "src/uiManager.js",
      "line": 1473,
      "signature": "setupAnswerButtonListeners() {",
      "type": "method"
    },
    {
      "name": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 1520,
      "signature": "escapeHtml(text) {",
      "type": "method"
    },
    {
      "name": "setupAnswerButtonKeyNavigation",
      "file": "src/uiManager.js",
      "line": 1530,
      "signature": "setupAnswerButtonKeyNavigation() {",
      "type": "method"
    },
    {
      "name": "focusAnswerButton",
      "file": "src/uiManager.js",
      "line": 1539,
      "signature": "focusAnswerButton(index) {",
      "type": "method"
    },
    {
      "name": "showHint",
      "file": "src/uiManager.js",
      "line": 1588,
      "signature": "showHint() {",
      "type": "method"
    },
    {
      "name": "showQuestionHint",
      "file": "src/uiManager.js",
      "line": 1602,
      "signature": "showQuestionHint() {",
      "type": "method"
    },
    {
      "name": "generateQuestionSmartHint",
      "file": "src/uiManager.js",
      "line": 1616,
      "signature": "generateQuestionSmartHint() {",
      "type": "method"
    },
    {
      "name": "showSmartHint",
      "file": "src/uiManager.js",
      "line": 1662,
      "signature": "showSmartHint() {",
      "type": "method"
    },
    {
      "name": "getNewPlayerHints",
      "file": "src/uiManager.js",
      "line": 1689,
      "signature": "getNewPlayerHints() {",
      "type": "method"
    },
    {
      "name": "getLowAccuracyHints",
      "file": "src/uiManager.js",
      "line": 1706,
      "signature": "getLowAccuracyHints() {",
      "type": "method"
    },
    {
      "name": "getStuckPlayerHints",
      "file": "src/uiManager.js",
      "line": 1723,
      "signature": "getStuckPlayerHints() {",
      "type": "method"
    },
    {
      "name": "getNavigationHints",
      "file": "src/uiManager.js",
      "line": 1740,
      "signature": "getNavigationHints() {",
      "type": "method"
    },
    {
      "name": "getGeneralGameplayHints",
      "file": "src/uiManager.js",
      "line": 1757,
      "signature": "getGeneralGameplayHints() {",
      "type": "method"
    },
    {
      "name": "skipQuestion",
      "file": "src/uiManager.js",
      "line": 1774,
      "signature": "skipQuestion() {",
      "type": "method"
    },
    {
      "name": "handleAnswerValidated",
      "file": "src/uiManager.js",
      "line": 1809,
      "signature": "handleAnswerValidated(data) {",
      "type": "method"
    },
    {
      "name": "handleQuestionAnswered",
      "file": "src/uiManager.js",
      "line": 1848,
      "signature": "handleQuestionAnswered(data) {",
      "type": "method"
    },
    {
      "name": "updateTimer",
      "file": "src/uiManager.js",
      "line": 1868,
      "signature": "updateTimer(data) {",
      "type": "method"
    },
    {
      "name": "handleTimeUp",
      "file": "src/uiManager.js",
      "line": 1920,
      "signature": "handleTimeUp(data) {",
      "type": "method"
    },
    {
      "name": "handleGameCompleted",
      "file": "src/uiManager.js",
      "line": 1937,
      "signature": "handleGameCompleted(data) {",
      "type": "method"
    },
    {
      "name": "saveGame",
      "file": "src/uiManager.js",
      "line": 1952,
      "signature": "saveGame() {",
      "type": "method"
    },
    {
      "name": "loadGame",
      "file": "src/uiManager.js",
      "line": 1964,
      "signature": "loadGame() {",
      "type": "method"
    },
    {
      "name": "resetGame",
      "file": "src/uiManager.js",
      "line": 1977,
      "signature": "resetGame() {",
      "type": "method"
    },
    {
      "name": "clearQuestion",
      "file": "src/uiManager.js",
      "line": 1989,
      "signature": "clearQuestion() {",
      "type": "method"
    },
    {
      "name": "disableAnswerButtons",
      "file": "src/uiManager.js",
      "line": 2011,
      "signature": "disableAnswerButtons() {",
      "type": "method"
    },
    {
      "name": "enableAnswerButtons",
      "file": "src/uiManager.js",
      "line": 2019,
      "signature": "enableAnswerButtons() {",
      "type": "method"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2027,
      "signature": "showFeedback(message, type = 'info') {",
      "type": "method"
    },
    {
      "name": "clearFeedback",
      "file": "src/uiManager.js",
      "line": 2049,
      "signature": "clearFeedback() {",
      "type": "method"
    },
    {
      "name": "getUIState",
      "file": "src/uiManager.js",
      "line": 2058,
      "signature": "getUIState() {",
      "type": "method"
    },
    {
      "name": "showVictoryScreen",
      "file": "src/uiManager.js",
      "line": 2069,
      "signature": "showVictoryScreen(data) {",
      "type": "method"
    },
    {
      "name": "updateVictoryScreenContent",
      "file": "src/uiManager.js",
      "line": 2100,
      "signature": "updateVictoryScreenContent(stats, data) {",
      "type": "method"
    },
    {
      "name": "updateAchievementIcons",
      "file": "src/uiManager.js",
      "line": 2179,
      "signature": "updateAchievementIcons() {",
      "type": "method"
    },
    {
      "name": "updatePerformanceGrade",
      "file": "src/uiManager.js",
      "line": 2220,
      "signature": "updatePerformanceGrade(stats) {",
      "type": "method"
    },
    {
      "name": "calculatePerformanceGrade",
      "file": "src/uiManager.js",
      "line": 2242,
      "signature": "calculatePerformanceGrade(stats) {",
      "type": "method"
    },
    {
      "name": "getGradeInfo",
      "file": "src/uiManager.js",
      "line": 2262,
      "signature": "getGradeInfo(grade, stats) {",
      "type": "method"
    },
    {
      "name": "hideVictoryScreen",
      "file": "src/uiManager.js",
      "line": 2282,
      "signature": "hideVictoryScreen() {",
      "type": "method"
    },
    {
      "name": "handlePlayAgain",
      "file": "src/uiManager.js",
      "line": 2294,
      "signature": "handlePlayAgain() {",
      "type": "method"
    },
    {
      "name": "showAchievements",
      "file": "src/uiManager.js",
      "line": 2304,
      "signature": "showAchievements() {",
      "type": "method"
    },
    {
      "name": "shareResults",
      "file": "src/uiManager.js",
      "line": 2326,
      "signature": "shareResults() {",
      "type": "method"
    },
    {
      "name": "hideVictoryScreen",
      "file": "src/uiManager.js",
      "line": 2359,
      "signature": "hideVictoryScreen() {",
      "type": "method"
    },
    {
      "name": "handlePlayAgain",
      "file": "src/uiManager.js",
      "line": 2382,
      "signature": "handlePlayAgain() {",
      "type": "method"
    },
    {
      "name": "handleViewAchievements",
      "file": "src/uiManager.js",
      "line": 2404,
      "signature": "handleViewAchievements() {",
      "type": "method"
    },
    {
      "name": "handleShareResults",
      "file": "src/uiManager.js",
      "line": 2423,
      "signature": "handleShareResults() {",
      "type": "method"
    },
    {
      "name": "copyToClipboard",
      "file": "src/uiManager.js",
      "line": 2464,
      "signature": "copyToClipboard(text) {",
      "type": "method"
    },
    {
      "name": "fallbackCopyToClipboard",
      "file": "src/uiManager.js",
      "line": 2480,
      "signature": "fallbackCopyToClipboard(text) {",
      "type": "method"
    },
    {
      "name": "showTooltip",
      "file": "src/uiManager.js",
      "line": 2510,
      "signature": "showTooltip(message, duration = 2000) {",
      "type": "method"
    },
    {
      "name": "showSkeletonLoading",
      "file": "src/uiManager.js",
      "line": 2570,
      "signature": "showSkeletonLoading(container, type = 'question') {",
      "type": "method"
    },
    {
      "name": "hideSkeletonLoading",
      "file": "src/uiManager.js",
      "line": 2636,
      "signature": "hideSkeletonLoading(container) {",
      "type": "method"
    },
    {
      "name": "showLoadingState",
      "file": "src/uiManager.js",
      "line": 2657,
      "signature": "showLoadingState(elementId, type = 'question') {",
      "type": "method"
    },
    {
      "name": "hideLoadingState",
      "file": "src/uiManager.js",
      "line": 2668,
      "signature": "hideLoadingState(elementId) {",
      "type": "method"
    },
    {
      "name": "setupHapticFeedback",
      "file": "src/uiManager.js",
      "line": 2678,
      "signature": "setupHapticFeedback() {",
      "type": "method"
    },
    {
      "name": "triggerHapticFeedback",
      "file": "src/uiManager.js",
      "line": 2689,
      "signature": "triggerHapticFeedback(type = 'tap') {",
      "type": "method"
    },
    {
      "name": "addMicroInteraction",
      "file": "src/uiManager.js",
      "line": 2719,
      "signature": "addMicroInteraction(element, effectType = 'sword') {",
      "type": "method"
    },
    {
      "name": "addSwordGleam",
      "file": "src/uiManager.js",
      "line": 2743,
      "signature": "addSwordGleam(element) {",
      "type": "method"
    },
    {
      "name": "addShieldPulse",
      "file": "src/uiManager.js",
      "line": 2771,
      "signature": "addShieldPulse(element) {",
      "type": "method"
    },
    {
      "name": "addCrownFloat",
      "file": "src/uiManager.js",
      "line": 2784,
      "signature": "addCrownFloat(element) {",
      "type": "method"
    },
    {
      "name": "addGemSparkle",
      "file": "src/uiManager.js",
      "line": 2795,
      "signature": "addGemSparkle(element) {",
      "type": "method"
    },
    {
      "name": "addSparkleEffect",
      "file": "src/uiManager.js",
      "line": 2817,
      "signature": "addSparkleEffect(element) {",
      "type": "method"
    },
    {
      "name": "enhanceButton",
      "file": "src/uiManager.js",
      "line": 2830,
      "signature": "enhanceButton(button, callback, feedbackType = 'tap') {",
      "type": "method"
    },
    {
      "name": "animateScoreIncrease",
      "file": "src/uiManager.js",
      "line": 2866,
      "signature": "animateScoreIncrease(newScore, points) {",
      "type": "method"
    },
    {
      "name": "enhancedRoomTransition",
      "file": "src/uiManager.js",
      "line": 2897,
      "signature": "enhancedRoomTransition(roomData) {",
      "type": "method"
    },
    {
      "name": "enhancedQuestionPresentation",
      "file": "src/uiManager.js",
      "line": 2918,
      "signature": "enhancedQuestionPresentation(questionData) {",
      "type": "method"
    },
    {
      "name": "addAccessibilityHooks",
      "file": "src/uiManager.js",
      "line": 2936,
      "signature": "addAccessibilityHooks(accessibilityManager) {",
      "type": "method"
    },
    {
      "name": "enhanceAnswerButtonAccessibility",
      "file": "src/uiManager.js",
      "line": 2972,
      "signature": "enhanceAnswerButtonAccessibility() {",
      "type": "method"
    },
    {
      "name": "enhanceTimerAccessibility",
      "file": "src/uiManager.js",
      "line": 2995,
      "signature": "enhanceTimerAccessibility() {",
      "type": "method"
    },
    {
      "name": "selectAnswerWithAccessibility",
      "file": "src/uiManager.js",
      "line": 3019,
      "signature": "selectAnswerWithAccessibility(answerIndex) {",
      "type": "method"
    },
    {
      "name": "announceGameStateChange",
      "file": "src/uiManager.js",
      "line": 3032,
      "signature": "announceGameStateChange(message, priority = 'polite') {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/animationManager.js",
      "line": 10,
      "signature": "constructor(options = {}) {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/animationManager.js",
      "line": 10,
      "signature": "constructor(options = {}) {",
      "type": "constructor"
    },
    {
      "name": "checkReducedMotion",
      "file": "src/animationManager.js",
      "line": 34,
      "signature": "checkReducedMotion() {",
      "type": "method"
    },
    {
      "name": "generateAnimationId",
      "file": "src/animationManager.js",
      "line": 47,
      "signature": "generateAnimationId() {",
      "type": "method"
    },
    {
      "name": "createAchievementNotification",
      "file": "src/animationManager.js",
      "line": 342,
      "signature": "createAchievementNotification(achievement) {",
      "type": "method"
    },
    {
      "name": "restoreStyles",
      "file": "src/animationManager.js",
      "line": 419,
      "signature": "restoreStyles(element, originalStyles) {",
      "type": "method"
    },
    {
      "name": "cancelAnimation",
      "file": "src/animationManager.js",
      "line": 433,
      "signature": "cancelAnimation(animationId) {",
      "type": "method"
    },
    {
      "name": "cancelAllAnimations",
      "file": "src/animationManager.js",
      "line": 449,
      "signature": "cancelAllAnimations() {",
      "type": "method"
    },
    {
      "name": "getPerformanceMetrics",
      "file": "src/animationManager.js",
      "line": 465,
      "signature": "getPerformanceMetrics() {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/achievementManager.js",
      "line": 6,
      "signature": "constructor(dataLoader, gameState) {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/achievementManager.js",
      "line": 6,
      "signature": "constructor(dataLoader, gameState) {",
      "type": "constructor"
    },
    {
      "name": "getMaxProgress",
      "file": "src/achievementManager.js",
      "line": 82,
      "signature": "getMaxProgress(achievement) {",
      "type": "method"
    },
    {
      "name": "loadAchievementProgress",
      "file": "src/achievementManager.js",
      "line": 116,
      "signature": "loadAchievementProgress() {",
      "type": "method"
    },
    {
      "name": "saveAchievementProgress",
      "file": "src/achievementManager.js",
      "line": 154,
      "signature": "saveAchievementProgress() {",
      "type": "method"
    },
    {
      "name": "setupEventListeners",
      "file": "src/achievementManager.js",
      "line": 180,
      "signature": "setupEventListeners() {",
      "type": "method"
    },
    {
      "name": "updateSessionStats",
      "file": "src/achievementManager.js",
      "line": 202,
      "signature": "updateSessionStats() {",
      "type": "method"
    },
    {
      "name": "handleQuestionAnswered",
      "file": "src/achievementManager.js",
      "line": 217,
      "signature": "handleQuestionAnswered(eventData) {",
      "type": "method"
    },
    {
      "name": "handleRoomChanged",
      "file": "src/achievementManager.js",
      "line": 260,
      "signature": "handleRoomChanged(eventData) {",
      "type": "method"
    },
    {
      "name": "handleGameCompleted",
      "file": "src/achievementManager.js",
      "line": 272,
      "signature": "handleGameCompleted(eventData) {",
      "type": "method"
    },
    {
      "name": "checkAchievementUnlocks",
      "file": "src/achievementManager.js",
      "line": 280,
      "signature": "checkAchievementUnlocks() {",
      "type": "method"
    },
    {
      "name": "checkAchievementCondition",
      "file": "src/achievementManager.js",
      "line": 297,
      "signature": "checkAchievementCondition(achievement) {",
      "type": "method"
    },
    {
      "name": "updateAchievementProgress",
      "file": "src/achievementManager.js",
      "line": 366,
      "signature": "updateAchievementProgress(achievementId, achievement) {",
      "type": "method"
    },
    {
      "name": "unlockAchievement",
      "file": "src/achievementManager.js",
      "line": 402,
      "signature": "unlockAchievement(achievementId) {",
      "type": "method"
    },
    {
      "name": "getAllAchievements",
      "file": "src/achievementManager.js",
      "line": 432,
      "signature": "getAllAchievements() {",
      "type": "method"
    },
    {
      "name": "getAchievementsByCategory",
      "file": "src/achievementManager.js",
      "line": 442,
      "signature": "getAchievementsByCategory(category) {",
      "type": "method"
    },
    {
      "name": "getUnlockedAchievements",
      "file": "src/achievementManager.js",
      "line": 451,
      "signature": "getUnlockedAchievements() {",
      "type": "method"
    },
    {
      "name": "getAchievementsInProgress",
      "file": "src/achievementManager.js",
      "line": 458,
      "signature": "getAchievementsInProgress() {",
      "type": "method"
    },
    {
      "name": "getAchievementStats",
      "file": "src/achievementManager.js",
      "line": 467,
      "signature": "getAchievementStats() {",
      "type": "method"
    },
    {
      "name": "getCategoryStats",
      "file": "src/achievementManager.js",
      "line": 484,
      "signature": "getCategoryStats() {",
      "type": "method"
    },
    {
      "name": "resetAchievements",
      "file": "src/achievementManager.js",
      "line": 511,
      "signature": "resetAchievements() {",
      "type": "method"
    },
    {
      "name": "addEventListener",
      "file": "src/achievementManager.js",
      "line": 546,
      "signature": "addEventListener(eventType, callback) {",
      "type": "method"
    },
    {
      "name": "removeEventListener",
      "file": "src/achievementManager.js",
      "line": 553,
      "signature": "removeEventListener(eventType, callback) {",
      "type": "method"
    },
    {
      "name": "emit",
      "file": "src/achievementManager.js",
      "line": 562,
      "signature": "emit(eventType, data) {",
      "type": "method"
    },
    {
      "name": "getDebugInfo",
      "file": "src/achievementManager.js",
      "line": 577,
      "signature": "getDebugInfo() {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/mapRenderer.js",
      "line": 12,
      "signature": "constructor(canvas, gameState, dataLoader) {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/mapRenderer.js",
      "line": 12,
      "signature": "constructor(canvas, gameState, dataLoader) {",
      "type": "constructor"
    },
    {
      "name": "setupRoomPositions",
      "file": "src/mapRenderer.js",
      "line": 61,
      "signature": "setupRoomPositions() {",
      "type": "method"
    },
    {
      "name": "setupEventListeners",
      "file": "src/mapRenderer.js",
      "line": 111,
      "signature": "setupEventListeners() {",
      "type": "method"
    },
    {
      "name": "clearCanvas",
      "file": "src/mapRenderer.js",
      "line": 185,
      "signature": "clearCanvas() {",
      "type": "method"
    },
    {
      "name": "drawRoomShape",
      "file": "src/mapRenderer.js",
      "line": 232,
      "signature": "drawRoomShape(x, y, color, isCurrent = false) {",
      "type": "method"
    },
    {
      "name": "drawRoomIcon",
      "file": "src/mapRenderer.js",
      "line": 261,
      "signature": "drawRoomIcon(room, x, y) {",
      "type": "method"
    },
    {
      "name": "drawRoomLabel",
      "file": "src/mapRenderer.js",
      "line": 277,
      "signature": "drawRoomLabel(name, x, y) {",
      "type": "method"
    },
    {
      "name": "drawConnection",
      "file": "src/mapRenderer.js",
      "line": 316,
      "signature": "drawConnection(fromPos, toPos) {",
      "type": "method"
    },
    {
      "name": "getRoomState",
      "file": "src/mapRenderer.js",
      "line": 330,
      "signature": "getRoomState(roomId) {",
      "type": "method"
    },
    {
      "name": "handleCanvasClick",
      "file": "src/mapRenderer.js",
      "line": 346,
      "signature": "handleCanvasClick(event) {",
      "type": "method"
    },
    {
      "name": "handleCanvasDoubleClick",
      "file": "src/mapRenderer.js",
      "line": 362,
      "signature": "handleCanvasDoubleClick(event) {",
      "type": "method"
    },
    {
      "name": "handleCanvasHover",
      "file": "src/mapRenderer.js",
      "line": 395,
      "signature": "handleCanvasHover(event) {",
      "type": "method"
    },
    {
      "name": "getRoomAtPosition",
      "file": "src/mapRenderer.js",
      "line": 414,
      "signature": "getRoomAtPosition(x, y) {",
      "type": "method"
    },
    {
      "name": "handleResize",
      "file": "src/mapRenderer.js",
      "line": 445,
      "signature": "handleResize() {",
      "type": "method"
    },
    {
      "name": "renderUI",
      "file": "src/mapRenderer.js",
      "line": 454,
      "signature": "renderUI() {",
      "type": "method"
    },
    {
      "name": "drawMapTitle",
      "file": "src/mapRenderer.js",
      "line": 462,
      "signature": "drawMapTitle() {",
      "type": "method"
    },
    {
      "name": "showFastMovementFeedback",
      "file": "src/mapRenderer.js",
      "line": 474,
      "signature": "showFastMovementFeedback(roomId) {",
      "type": "method"
    },
    {
      "name": "showInaccessibleRoomFeedback",
      "file": "src/mapRenderer.js",
      "line": 494,
      "signature": "showInaccessibleRoomFeedback(roomId) {",
      "type": "method"
    },
    {
      "name": "renderError",
      "file": "src/mapRenderer.js",
      "line": 516,
      "signature": "renderError(message) {",
      "type": "method"
    },
    {
      "name": "getRendererState",
      "file": "src/mapRenderer.js",
      "line": 534,
      "signature": "getRendererState() {",
      "type": "method"
    },
    {
      "name": "handleKeyboardNavigation",
      "file": "src/mapRenderer.js",
      "line": 548,
      "signature": "handleKeyboardNavigation(event) {",
      "type": "method"
    },
    {
      "name": "navigateWithKeyboard",
      "file": "src/mapRenderer.js",
      "line": 573,
      "signature": "navigateWithKeyboard(direction) {",
      "type": "method"
    },
    {
      "name": "findRoomInDirection",
      "file": "src/mapRenderer.js",
      "line": 609,
      "signature": "findRoomInDirection(fromRoomId, direction) {",
      "type": "method"
    },
    {
      "name": "activateCurrentRoom",
      "file": "src/mapRenderer.js",
      "line": 656,
      "signature": "activateCurrentRoom() {",
      "type": "method"
    },
    {
      "name": "announceRoomNavigation",
      "file": "src/mapRenderer.js",
      "line": 669,
      "signature": "announceRoomNavigation(targetRoom, direction) {",
      "type": "method"
    },
    {
      "name": "announceNavigationBlocked",
      "file": "src/mapRenderer.js",
      "line": 684,
      "signature": "announceNavigationBlocked(direction) {",
      "type": "method"
    },
    {
      "name": "announceNoRoom",
      "file": "src/mapRenderer.js",
      "line": 698,
      "signature": "announceNoRoom(direction) {",
      "type": "method"
    },
    {
      "name": "announceMapState",
      "file": "src/mapRenderer.js",
      "line": 711,
      "signature": "announceMapState() {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/errorBoundary.js",
      "line": 6,
      "signature": "constructor(gameState = null, uiManager = null) {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/errorBoundary.js",
      "line": 6,
      "signature": "constructor(gameState = null, uiManager = null) {",
      "type": "constructor"
    },
    {
      "name": "setupGlobalErrorHandler",
      "file": "src/errorBoundary.js",
      "line": 23,
      "signature": "setupGlobalErrorHandler() {",
      "type": "method"
    },
    {
      "name": "handleError",
      "file": "src/errorBoundary.js",
      "line": 63,
      "signature": "handleError(errorInfo) {",
      "type": "method"
    },
    {
      "name": "attemptAutoSave",
      "file": "src/errorBoundary.js",
      "line": 91,
      "signature": "attemptAutoSave() {",
      "type": "method"
    },
    {
      "name": "showRecoveryDialog",
      "file": "src/errorBoundary.js",
      "line": 106,
      "signature": "showRecoveryDialog(errorInfo) {",
      "type": "method"
    },
    {
      "name": "setupDialogHandlers",
      "file": "src/errorBoundary.js",
      "line": 177,
      "signature": "setupDialogHandlers(dialog) {",
      "type": "method"
    },
    {
      "name": "handleRefresh",
      "file": "src/errorBoundary.js",
      "line": 210,
      "signature": "handleRefresh() {",
      "type": "method"
    },
    {
      "name": "handleContinue",
      "file": "src/errorBoundary.js",
      "line": 223,
      "signature": "handleContinue(dialog) {",
      "type": "method"
    },
    {
      "name": "handleSaveExit",
      "file": "src/errorBoundary.js",
      "line": 237,
      "signature": "handleSaveExit() {",
      "type": "method"
    },
    {
      "name": "handleToggleDetails",
      "file": "src/errorBoundary.js",
      "line": 275,
      "signature": "handleToggleDetails(dialog) {",
      "type": "method"
    },
    {
      "name": "showCriticalErrorScreen",
      "file": "src/errorBoundary.js",
      "line": 289,
      "signature": "showCriticalErrorScreen() {",
      "type": "method"
    },
    {
      "name": "showErrorLog",
      "file": "src/errorBoundary.js",
      "line": 335,
      "signature": "showErrorLog() {",
      "type": "method"
    },
    {
      "name": "escapeHtml",
      "file": "src/errorBoundary.js",
      "line": 353,
      "signature": "escapeHtml(text) {",
      "type": "method"
    },
    {
      "name": "injectErrorStyles",
      "file": "src/errorBoundary.js",
      "line": 362,
      "signature": "injectErrorStyles() {",
      "type": "method"
    },
    {
      "name": "getErrorStats",
      "file": "src/errorBoundary.js",
      "line": 531,
      "signature": "getErrorStats() {",
      "type": "method"
    },
    {
      "name": "reset",
      "file": "src/errorBoundary.js",
      "line": 543,
      "signature": "reset() {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/accessibilityManager.js",
      "line": 7,
      "signature": "constructor() {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/accessibilityManager.js",
      "line": 7,
      "signature": "constructor() {",
      "type": "constructor"
    },
    {
      "name": "initialize",
      "file": "src/accessibilityManager.js",
      "line": 35,
      "signature": "initialize() {",
      "type": "method"
    },
    {
      "name": "loadPreferences",
      "file": "src/accessibilityManager.js",
      "line": 50,
      "signature": "loadPreferences() {",
      "type": "method"
    },
    {
      "name": "savePreferences",
      "file": "src/accessibilityManager.js",
      "line": 68,
      "signature": "savePreferences() {",
      "type": "method"
    },
    {
      "name": "applyPreferences",
      "file": "src/accessibilityManager.js",
      "line": 80,
      "signature": "applyPreferences() {",
      "type": "method"
    },
    {
      "name": "detectAccessibilityFeatures",
      "file": "src/accessibilityManager.js",
      "line": 101,
      "signature": "detectAccessibilityFeatures() {",
      "type": "method"
    },
    {
      "name": "detectScreenReader",
      "file": "src/accessibilityManager.js",
      "line": 133,
      "signature": "detectScreenReader() {",
      "type": "method"
    },
    {
      "name": "setupKeyboardNavigation",
      "file": "src/accessibilityManager.js",
      "line": 158,
      "signature": "setupKeyboardNavigation() {",
      "type": "method"
    },
    {
      "name": "handleGlobalKeyPress",
      "file": "src/accessibilityManager.js",
      "line": 183,
      "signature": "handleGlobalKeyPress(event) {",
      "type": "method"
    },
    {
      "name": "getKeyboardShortcut",
      "file": "src/accessibilityManager.js",
      "line": 224,
      "signature": "getKeyboardShortcut(event) {",
      "type": "method"
    },
    {
      "name": "setupSpatialNavigation",
      "file": "src/accessibilityManager.js",
      "line": 237,
      "signature": "setupSpatialNavigation() {",
      "type": "method"
    },
    {
      "name": "navigateMapWithKeys",
      "file": "src/accessibilityManager.js",
      "line": 264,
      "signature": "navigateMapWithKeys(direction) {",
      "type": "method"
    },
    {
      "name": "navigateAnswersWithKeys",
      "file": "src/accessibilityManager.js",
      "line": 286,
      "signature": "navigateAnswersWithKeys(direction) {",
      "type": "method"
    },
    {
      "name": "handleNumberKeyPress",
      "file": "src/accessibilityManager.js",
      "line": 306,
      "signature": "handleNumberKeyPress(event) {",
      "type": "method"
    },
    {
      "name": "enhanceARIA",
      "file": "src/accessibilityManager.js",
      "line": 326,
      "signature": "enhanceARIA() {",
      "type": "method"
    },
    {
      "name": "addSkipLinks",
      "file": "src/accessibilityManager.js",
      "line": 348,
      "signature": "addSkipLinks() {",
      "type": "method"
    },
    {
      "name": "enhanceFormControls",
      "file": "src/accessibilityManager.js",
      "line": 370,
      "signature": "enhanceFormControls() {",
      "type": "method"
    },
    {
      "name": "addLandmarkRoles",
      "file": "src/accessibilityManager.js",
      "line": 392,
      "signature": "addLandmarkRoles() {",
      "type": "method"
    },
    {
      "name": "enhanceDynamicContent",
      "file": "src/accessibilityManager.js",
      "line": 414,
      "signature": "enhanceDynamicContent() {",
      "type": "method"
    },
    {
      "name": "addKeyboardInstructions",
      "file": "src/accessibilityManager.js",
      "line": 439,
      "signature": "addKeyboardInstructions() {",
      "type": "method"
    },
    {
      "name": "createLiveRegions",
      "file": "src/accessibilityManager.js",
      "line": 462,
      "signature": "createLiveRegions() {",
      "type": "method"
    },
    {
      "name": "announce",
      "file": "src/accessibilityManager.js",
      "line": 496,
      "signature": "announce(message, priority = 'polite', delay = 100) {",
      "type": "method"
    },
    {
      "name": "announceAnswerResult",
      "file": "src/accessibilityManager.js",
      "line": 532,
      "signature": "announceAnswerResult(isCorrect, explanation) {",
      "type": "method"
    },
    {
      "name": "setupHighContrastMode",
      "file": "src/accessibilityManager.js",
      "line": 541,
      "signature": "setupHighContrastMode() {",
      "type": "method"
    },
    {
      "name": "toggleHighContrastMode",
      "file": "src/accessibilityManager.js",
      "line": 629,
      "signature": "toggleHighContrastMode() {",
      "type": "method"
    },
    {
      "name": "enableHighContrastMode",
      "file": "src/accessibilityManager.js",
      "line": 645,
      "signature": "enableHighContrastMode() {",
      "type": "method"
    },
    {
      "name": "disableHighContrastMode",
      "file": "src/accessibilityManager.js",
      "line": 655,
      "signature": "disableHighContrastMode() {",
      "type": "method"
    },
    {
      "name": "enableReducedMotion",
      "file": "src/accessibilityManager.js",
      "line": 665,
      "signature": "enableReducedMotion() {",
      "type": "method"
    },
    {
      "name": "enableLargeText",
      "file": "src/accessibilityManager.js",
      "line": 674,
      "signature": "enableLargeText() {",
      "type": "method"
    },
    {
      "name": "enableScreenReaderMode",
      "file": "src/accessibilityManager.js",
      "line": 683,
      "signature": "enableScreenReaderMode() {",
      "type": "method"
    },
    {
      "name": "optimizeForScreenReaders",
      "file": "src/accessibilityManager.js",
      "line": 695,
      "signature": "optimizeForScreenReaders() {",
      "type": "method"
    },
    {
      "name": "generateAccessibleLabel",
      "file": "src/accessibilityManager.js",
      "line": 722,
      "signature": "generateAccessibleLabel(element) {",
      "type": "method"
    },
    {
      "name": "getTextContent",
      "file": "src/accessibilityManager.js",
      "line": 752,
      "signature": "getTextContent(element) {",
      "type": "method"
    },
    {
      "name": "setupFocusManagement",
      "file": "src/accessibilityManager.js",
      "line": 775,
      "signature": "setupFocusManagement() {",
      "type": "method"
    },
    {
      "name": "handleFocusChange",
      "file": "src/accessibilityManager.js",
      "line": 792,
      "signature": "handleFocusChange(event) {",
      "type": "method"
    },
    {
      "name": "getAccessibleName",
      "file": "src/accessibilityManager.js",
      "line": 807,
      "signature": "getAccessibleName(element) {",
      "type": "method"
    },
    {
      "name": "focusOnSection",
      "file": "src/accessibilityManager.js",
      "line": 835,
      "signature": "focusOnSection(sectionId) {",
      "type": "method"
    },
    {
      "name": "skipToMainContent",
      "file": "src/accessibilityManager.js",
      "line": 853,
      "signature": "skipToMainContent() {",
      "type": "method"
    },
    {
      "name": "showKeyboardHelp",
      "file": "src/accessibilityManager.js",
      "line": 867,
      "signature": "showKeyboardHelp() {",
      "type": "method"
    },
    {
      "name": "announceGameState",
      "file": "src/accessibilityManager.js",
      "line": 941,
      "signature": "announceGameState(gameState) {",
      "type": "method"
    },
    {
      "name": "announceAnswerResult",
      "file": "src/accessibilityManager.js",
      "line": 958,
      "signature": "announceAnswerResult(isCorrect, explanation = '') {",
      "type": "method"
    },
    {
      "name": "getAccessibilityStatus",
      "file": "src/accessibilityManager.js",
      "line": 972,
      "signature": "getAccessibilityStatus() {",
      "type": "method"
    },
    {
      "name": "cleanup",
      "file": "src/accessibilityManager.js",
      "line": 986,
      "signature": "cleanup() {",
      "type": "method"
    },
    {
      "name": "handleFocusTrapping",
      "file": "src/accessibilityManager.js",
      "line": 1012,
      "signature": "handleFocusTrapping(event) {",
      "type": "method"
    },
    {
      "name": "handleTabNavigation",
      "file": "src/accessibilityManager.js",
      "line": 1037,
      "signature": "handleTabNavigation(event) {",
      "type": "method"
    },
    {
      "name": "handleActivation",
      "file": "src/accessibilityManager.js",
      "line": 1045,
      "signature": "handleActivation(event) {",
      "type": "method"
    },
    {
      "name": "handleEscape",
      "file": "src/accessibilityManager.js",
      "line": 1058,
      "signature": "handleEscape(event) {",
      "type": "method"
    },
    {
      "name": "handleArrowNavigation",
      "file": "src/accessibilityManager.js",
      "line": 1073,
      "signature": "handleArrowNavigation(event) {",
      "type": "method"
    },
    {
      "name": "handleMapArrowNavigation",
      "file": "src/accessibilityManager.js",
      "line": 1104,
      "signature": "handleMapArrowNavigation(direction) {",
      "type": "method"
    },
    {
      "name": "navigateAnswerButtons",
      "file": "src/accessibilityManager.js",
      "line": 1118,
      "signature": "navigateAnswerButtons(direction) {",
      "type": "method"
    },
    {
      "name": "navigateMenuItems",
      "file": "src/accessibilityManager.js",
      "line": 1138,
      "signature": "navigateMenuItems(direction) {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/enhancedDataLoader.js",
      "line": 6,
      "signature": "constructor(originalDataLoader, performanceManager) {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/enhancedDataLoader.js",
      "line": 6,
      "signature": "constructor(originalDataLoader, performanceManager) {",
      "type": "constructor"
    },
    {
      "name": "getQuestionsByDifficulty",
      "file": "src/enhancedDataLoader.js",
      "line": 114,
      "signature": "getQuestionsByDifficulty(difficulty) {",
      "type": "method"
    },
    {
      "name": "optimizeCache",
      "file": "src/enhancedDataLoader.js",
      "line": 136,
      "signature": "optimizeCache() {",
      "type": "method"
    },
    {
      "name": "trackCategoryUsage",
      "file": "src/enhancedDataLoader.js",
      "line": 194,
      "signature": "trackCategoryUsage(category) {",
      "type": "method"
    },
    {
      "name": "trackDifficultyUsage",
      "file": "src/enhancedDataLoader.js",
      "line": 203,
      "signature": "trackDifficultyUsage(difficulty) {",
      "type": "method"
    },
    {
      "name": "getCacheStats",
      "file": "src/enhancedDataLoader.js",
      "line": 212,
      "signature": "getCacheStats() {",
      "type": "method"
    },
    {
      "name": "estimateMemoryUsage",
      "file": "src/enhancedDataLoader.js",
      "line": 227,
      "signature": "estimateMemoryUsage() {",
      "type": "method"
    },
    {
      "name": "getAllData",
      "file": "src/enhancedDataLoader.js",
      "line": 252,
      "signature": "getAllData() {",
      "type": "method"
    },
    {
      "name": "getRooms",
      "file": "src/enhancedDataLoader.js",
      "line": 256,
      "signature": "getRooms() {",
      "type": "method"
    },
    {
      "name": "getQuestions",
      "file": "src/enhancedDataLoader.js",
      "line": 260,
      "signature": "getQuestions() {",
      "type": "method"
    },
    {
      "name": "getAchievements",
      "file": "src/enhancedDataLoader.js",
      "line": 264,
      "signature": "getAchievements() {",
      "type": "method"
    },
    {
      "name": "getStartingRoom",
      "file": "src/enhancedDataLoader.js",
      "line": 268,
      "signature": "getStartingRoom() {",
      "type": "method"
    },
    {
      "name": "getRoomById",
      "file": "src/enhancedDataLoader.js",
      "line": 272,
      "signature": "getRoomById(roomId) {",
      "type": "method"
    },
    {
      "name": "getQuestionById",
      "file": "src/enhancedDataLoader.js",
      "line": 276,
      "signature": "getQuestionById(questionId) {",
      "type": "method"
    },
    {
      "name": "getRandomQuestion",
      "file": "src/enhancedDataLoader.js",
      "line": 280,
      "signature": "getRandomQuestion(category = null, excludeIds = []) {",
      "type": "method"
    },
    {
      "name": "clearCache",
      "file": "src/enhancedDataLoader.js",
      "line": 313,
      "signature": "clearCache() {",
      "type": "method"
    },
    {
      "name": "cleanup",
      "file": "src/enhancedDataLoader.js",
      "line": 326,
      "signature": "cleanup() {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/enhancedUIManager.js",
      "line": 6,
      "signature": "constructor(originalUIManager, performanceManager) {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/enhancedUIManager.js",
      "line": 6,
      "signature": "constructor(originalUIManager, performanceManager) {",
      "type": "constructor"
    },
    {
      "name": "initializeElementPools",
      "file": "src/enhancedUIManager.js",
      "line": 25,
      "signature": "initializeElementPools() {",
      "type": "method"
    },
    {
      "name": "setupOptimizedUpdates",
      "file": "src/enhancedUIManager.js",
      "line": 39,
      "signature": "setupOptimizedUpdates() {",
      "type": "method"
    },
    {
      "name": "createScoreUpdater",
      "file": "src/enhancedUIManager.js",
      "line": 59,
      "signature": "createScoreUpdater() {",
      "type": "method"
    },
    {
      "name": "createRoomInfoUpdater",
      "file": "src/enhancedUIManager.js",
      "line": 81,
      "signature": "createRoomInfoUpdater() {",
      "type": "method"
    },
    {
      "name": "createQuestionUpdater",
      "file": "src/enhancedUIManager.js",
      "line": 118,
      "signature": "createQuestionUpdater() {",
      "type": "method"
    },
    {
      "name": "createProgressUpdater",
      "file": "src/enhancedUIManager.js",
      "line": 165,
      "signature": "createProgressUpdater() {",
      "type": "method"
    },
    {
      "name": "createTimerUpdater",
      "file": "src/enhancedUIManager.js",
      "line": 235,
      "signature": "createTimerUpdater() {",
      "type": "method"
    },
    {
      "name": "updateRoomConnections",
      "file": "src/enhancedUIManager.js",
      "line": 263,
      "signature": "updateRoomConnections(container, connections) {",
      "type": "method"
    },
    {
      "name": "updateAnswerButtons",
      "file": "src/enhancedUIManager.js",
      "line": 291,
      "signature": "updateAnswerButtons(container, answers) {",
      "type": "method"
    },
    {
      "name": "showOptimizedNotification",
      "file": "src/enhancedUIManager.js",
      "line": 310,
      "signature": "showOptimizedNotification(type, title, message, duration = 5000) {",
      "type": "method"
    },
    {
      "name": "updateUI",
      "file": "src/enhancedUIManager.js",
      "line": 358,
      "signature": "updateUI(updates) {",
      "type": "method"
    },
    {
      "name": "updateScore",
      "file": "src/enhancedUIManager.js",
      "line": 370,
      "signature": "updateScore(score) {",
      "type": "method"
    },
    {
      "name": "updateRoomInfo",
      "file": "src/enhancedUIManager.js",
      "line": 379,
      "signature": "updateRoomInfo(roomData) {",
      "type": "method"
    },
    {
      "name": "updateQuestionDisplay",
      "file": "src/enhancedUIManager.js",
      "line": 388,
      "signature": "updateQuestionDisplay(questionData) {",
      "type": "method"
    },
    {
      "name": "updateProgress",
      "file": "src/enhancedUIManager.js",
      "line": 397,
      "signature": "updateProgress(progressData) {",
      "type": "method"
    },
    {
      "name": "updateTimer",
      "file": "src/enhancedUIManager.js",
      "line": 406,
      "signature": "updateTimer(timeRemaining, totalTime) {",
      "type": "method"
    },
    {
      "name": "showNotification",
      "file": "src/enhancedUIManager.js",
      "line": 418,
      "signature": "showNotification(type, title, message, duration) {",
      "type": "method"
    },
    {
      "name": "cleanup",
      "file": "src/enhancedUIManager.js",
      "line": 425,
      "signature": "cleanup() {",
      "type": "method"
    },
    {
      "name": "getUIPerformanceStats",
      "file": "src/enhancedUIManager.js",
      "line": 452,
      "signature": "getUIPerformanceStats() {",
      "type": "method"
    },
    {
      "name": "selectAnswer",
      "file": "src/enhancedUIManager.js",
      "line": 465,
      "signature": "selectAnswer(index) {",
      "type": "method"
    },
    {
      "name": "moveToRoom",
      "file": "src/enhancedUIManager.js",
      "line": 469,
      "signature": "moveToRoom(roomId) {",
      "type": "method"
    },
    {
      "name": "newQuestion",
      "file": "src/enhancedUIManager.js",
      "line": 473,
      "signature": "newQuestion() {",
      "type": "method"
    },
    {
      "name": "skipQuestion",
      "file": "src/enhancedUIManager.js",
      "line": 477,
      "signature": "skipQuestion() {",
      "type": "method"
    },
    {
      "name": "showHint",
      "file": "src/enhancedUIManager.js",
      "line": 481,
      "signature": "showHint() {",
      "type": "method"
    },
    {
      "name": "saveGame",
      "file": "src/enhancedUIManager.js",
      "line": 485,
      "signature": "saveGame() {",
      "type": "method"
    },
    {
      "name": "loadGame",
      "file": "src/enhancedUIManager.js",
      "line": 489,
      "signature": "loadGame() {",
      "type": "method"
    },
    {
      "name": "resetGame",
      "file": "src/enhancedUIManager.js",
      "line": 493,
      "signature": "resetGame() {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/learningAnalytics.js",
      "line": 6,
      "signature": "constructor(gameState = null) {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/learningAnalytics.js",
      "line": 6,
      "signature": "constructor(gameState = null) {",
      "type": "constructor"
    },
    {
      "name": "generateSessionId",
      "file": "src/learningAnalytics.js",
      "line": 48,
      "signature": "generateSessionId() {",
      "type": "method"
    },
    {
      "name": "loadPersistentData",
      "file": "src/learningAnalytics.js",
      "line": 55,
      "signature": "loadPersistentData() {",
      "type": "method"
    },
    {
      "name": "createDefaultProfile",
      "file": "src/learningAnalytics.js",
      "line": 80,
      "signature": "createDefaultProfile() {",
      "type": "method"
    },
    {
      "name": "setupPerformanceObserver",
      "file": "src/learningAnalytics.js",
      "line": 96,
      "signature": "setupPerformanceObserver() {",
      "type": "method"
    },
    {
      "name": "trackPerformanceMetric",
      "file": "src/learningAnalytics.js",
      "line": 121,
      "signature": "trackPerformanceMetric(entry) {",
      "type": "method"
    },
    {
      "name": "trackQuestionResponse",
      "file": "src/learningAnalytics.js",
      "line": 134,
      "signature": "trackQuestionResponse(questionData) {",
      "type": "method"
    },
    {
      "name": "updateStreakData",
      "file": "src/learningAnalytics.js",
      "line": 215,
      "signature": "updateStreakData(isCorrect) {",
      "type": "method"
    },
    {
      "name": "updateLearnerProfile",
      "file": "src/learningAnalytics.js",
      "line": 245,
      "signature": "updateLearnerProfile(pattern) {",
      "type": "method"
    },
    {
      "name": "updateCategoryAssessment",
      "file": "src/learningAnalytics.js",
      "line": 264,
      "signature": "updateCategoryAssessment(pattern) {",
      "type": "method"
    },
    {
      "name": "updateLearningSpeedPreference",
      "file": "src/learningAnalytics.js",
      "line": 289,
      "signature": "updateLearningSpeedPreference(pattern) {",
      "type": "method"
    },
    {
      "name": "calculateLearningVelocity",
      "file": "src/learningAnalytics.js",
      "line": 310,
      "signature": "calculateLearningVelocity() {",
      "type": "method"
    },
    {
      "name": "generateLearningInsights",
      "file": "src/learningAnalytics.js",
      "line": 345,
      "signature": "generateLearningInsights() {",
      "type": "method"
    },
    {
      "name": "getSessionStatistics",
      "file": "src/learningAnalytics.js",
      "line": 371,
      "signature": "getSessionStatistics() {",
      "type": "method"
    },
    {
      "name": "identifyStrengthsAndWeaknesses",
      "file": "src/learningAnalytics.js",
      "line": 400,
      "signature": "identifyStrengthsAndWeaknesses() {",
      "type": "method"
    },
    {
      "name": "generateRecommendations",
      "file": "src/learningAnalytics.js",
      "line": 425,
      "signature": "generateRecommendations() {",
      "type": "method"
    },
    {
      "name": "generateMotivationalMessage",
      "file": "src/learningAnalytics.js",
      "line": 504,
      "signature": "generateMotivationalMessage(velocity, sessionStats) {",
      "type": "method"
    },
    {
      "name": "saveAnalyticsData",
      "file": "src/learningAnalytics.js",
      "line": 545,
      "signature": "saveAnalyticsData() {",
      "type": "method"
    },
    {
      "name": "endSession",
      "file": "src/learningAnalytics.js",
      "line": 564,
      "signature": "endSession() {",
      "type": "method"
    },
    {
      "name": "getAnalyticsSummary",
      "file": "src/learningAnalytics.js",
      "line": 586,
      "signature": "getAnalyticsSummary() {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/performanceManager.js",
      "line": 7,
      "signature": "constructor() {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/performanceManager.js",
      "line": 7,
      "signature": "constructor() {",
      "type": "constructor"
    },
    {
      "name": "createPool",
      "file": "src/performanceManager.js",
      "line": 44,
      "signature": "createPool(poolName, factory, initialSize = 10) {",
      "type": "method"
    },
    {
      "name": "acquireFromPool",
      "file": "src/performanceManager.js",
      "line": 74,
      "signature": "acquireFromPool(poolName) {",
      "type": "method"
    },
    {
      "name": "releaseToPool",
      "file": "src/performanceManager.js",
      "line": 101,
      "signature": "releaseToPool(poolName, obj) {",
      "type": "method"
    },
    {
      "name": "getPoolStats",
      "file": "src/performanceManager.js",
      "line": 123,
      "signature": "getPoolStats(poolName) {",
      "type": "method"
    },
    {
      "name": "clearQuestionCache",
      "file": "src/performanceManager.js",
      "line": 184,
      "signature": "clearQuestionCache(category = null) {",
      "type": "method"
    },
    {
      "name": "batchDOMUpdate",
      "file": "src/performanceManager.js",
      "line": 204,
      "signature": "batchDOMUpdate(updateFunction, priority = 2) {",
      "type": "method"
    },
    {
      "name": "scheduleBatch",
      "file": "src/performanceManager.js",
      "line": 220,
      "signature": "scheduleBatch() {",
      "type": "method"
    },
    {
      "name": "executeBatch",
      "file": "src/performanceManager.js",
      "line": 231,
      "signature": "executeBatch() {",
      "type": "method"
    },
    {
      "name": "createDOMUpdate",
      "file": "src/performanceManager.js",
      "line": 277,
      "signature": "createDOMUpdate(element, properties) {",
      "type": "method"
    },
    {
      "name": "startPerformanceMonitoring",
      "file": "src/performanceManager.js",
      "line": 305,
      "signature": "startPerformanceMonitoring() {",
      "type": "method"
    },
    {
      "name": "stopPerformanceMonitoring",
      "file": "src/performanceManager.js",
      "line": 318,
      "signature": "stopPerformanceMonitoring() {",
      "type": "method"
    },
    {
      "name": "monitorFrameRate",
      "file": "src/performanceManager.js",
      "line": 327,
      "signature": "monitorFrameRate() {",
      "type": "method"
    },
    {
      "name": "monitorMemoryUsage",
      "file": "src/performanceManager.js",
      "line": 358,
      "signature": "monitorMemoryUsage() {",
      "type": "method"
    },
    {
      "name": "getMetrics",
      "file": "src/performanceManager.js",
      "line": 378,
      "signature": "getMetrics() {",
      "type": "method"
    },
    {
      "name": "debounce",
      "file": "src/performanceManager.js",
      "line": 399,
      "signature": "debounce(func, wait) {",
      "type": "method"
    },
    {
      "name": "throttle",
      "file": "src/performanceManager.js",
      "line": 417,
      "signature": "throttle(func, limit) {",
      "type": "method"
    },
    {
      "name": "prefersReducedMotion",
      "file": "src/performanceManager.js",
      "line": 432,
      "signature": "prefersReducedMotion() {",
      "type": "method"
    },
    {
      "name": "cleanup",
      "file": "src/performanceManager.js",
      "line": 443,
      "signature": "cleanup() {",
      "type": "method"
    },
    {
      "name": "getRecommendations",
      "file": "src/performanceManager.js",
      "line": 461,
      "signature": "getRecommendations() {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 6,
      "signature": "constructor(performanceManager) {",
      "type": "method"
    },
    {
      "name": "constructor",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 6,
      "signature": "constructor(performanceManager) {",
      "type": "constructor"
    },
    {
      "name": "createDashboard",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 30,
      "signature": "createDashboard() {",
      "type": "method"
    },
    {
      "name": "addDashboardStyles",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 103,
      "signature": "addDashboardStyles() {",
      "type": "method"
    },
    {
      "name": "setupDashboardEvents",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 281,
      "signature": "setupDashboardEvents() {",
      "type": "method"
    },
    {
      "name": "setupKeyboardShortcuts",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 300,
      "signature": "setupKeyboardShortcuts() {",
      "type": "method"
    },
    {
      "name": "show",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 313,
      "signature": "show() {",
      "type": "method"
    },
    {
      "name": "hide",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 323,
      "signature": "hide() {",
      "type": "method"
    },
    {
      "name": "toggle",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 333,
      "signature": "toggle() {",
      "type": "method"
    },
    {
      "name": "startUpdating",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 344,
      "signature": "startUpdating() {",
      "type": "method"
    },
    {
      "name": "stopUpdating",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 355,
      "signature": "stopUpdating() {",
      "type": "method"
    },
    {
      "name": "updateMetrics",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 365,
      "signature": "updateMetrics() {",
      "type": "method"
    },
    {
      "name": "addToHistory",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 392,
      "signature": "addToHistory(metric, value) {",
      "type": "method"
    },
    {
      "name": "updateFrameRateDisplay",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 403,
      "signature": "updateFrameRateDisplay(fps) {",
      "type": "method"
    },
    {
      "name": "updateMemoryDisplay",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 424,
      "signature": "updateMemoryDisplay(memory) {",
      "type": "method"
    },
    {
      "name": "updateDOMDisplay",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 442,
      "signature": "updateDOMDisplay(domUpdates) {",
      "type": "method"
    },
    {
      "name": "updatePoolDisplay",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 450,
      "signature": "updatePoolDisplay(metrics) {",
      "type": "method"
    },
    {
      "name": "updatePoolStats",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 469,
      "signature": "updatePoolStats(poolStats) {",
      "type": "method"
    },
    {
      "name": "updateRecommendations",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 488,
      "signature": "updateRecommendations() {",
      "type": "method"
    },
    {
      "name": "updateChart",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 500,
      "signature": "updateChart(chartElement, data, maxValue) {",
      "type": "method"
    },
    {
      "name": "performAutoOptimizations",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 522,
      "signature": "performAutoOptimizations(metrics) {",
      "type": "method"
    },
    {
      "name": "clearMetrics",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 542,
      "signature": "clearMetrics() {",
      "type": "method"
    },
    {
      "name": "exportMetrics",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 562,
      "signature": "exportMetrics() {",
      "type": "method"
    },
    {
      "name": "cleanup",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 584,
      "signature": "cleanup() {",
      "type": "method"
    }
  ],
  "functionCalls": [
    {
      "name": "LobeLabyrinth",
      "file": "src/dataLoader.js",
      "line": 3,
      "context": "* Part of LobeLabyrinth (Encarta MindMaze Clone)"
    },
    {
      "name": "constructor",
      "file": "src/dataLoader.js",
      "line": 6,
      "context": "constructor() {"
    },
    {
      "name": "loadGameData",
      "file": "src/dataLoader.js",
      "line": 19,
      "context": "async loadGameData() {"
    },
    {
      "name": "_performLoad",
      "file": "src/dataLoader.js",
      "line": 24,
      "context": "this.loadPromise = this._performLoad();"
    },
    {
      "name": "_performLoad",
      "file": "src/dataLoader.js",
      "line": 32,
      "context": "async _performLoad() {"
    },
    {
      "name": "log",
      "file": "src/dataLoader.js",
      "line": 34,
      "context": "console.log('🔄 Loading game data...');"
    },
    {
      "name": "all",
      "file": "src/dataLoader.js",
      "line": 37,
      "context": "const [roomsResponse, questionsResponse, achievementsResponse] = await Promise.all(["
    },
    {
      "name": "fetch",
      "file": "src/dataLoader.js",
      "line": 38,
      "context": "fetch('./data/rooms.json'),"
    },
    {
      "name": "fetch",
      "file": "src/dataLoader.js",
      "line": 39,
      "context": "fetch('./data/questions.json'),"
    },
    {
      "name": "fetch",
      "file": "src/dataLoader.js",
      "line": 40,
      "context": "fetch('./data/achievements.json')"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 45,
      "context": "throw new Error(`Failed to load rooms.json: ${roomsResponse.status}`);"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 48,
      "context": "throw new Error(`Failed to load questions.json: ${questionsResponse.status}`);"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 51,
      "context": "throw new Error(`Failed to load achievements.json: ${achievementsResponse.status}`);"
    },
    {
      "name": "json",
      "file": "src/dataLoader.js",
      "line": 55,
      "context": "const roomsData = await roomsResponse.json();"
    },
    {
      "name": "json",
      "file": "src/dataLoader.js",
      "line": 56,
      "context": "const questionsData = await questionsResponse.json();"
    },
    {
      "name": "json",
      "file": "src/dataLoader.js",
      "line": 57,
      "context": "const achievementsData = await achievementsResponse.json();"
    },
    {
      "name": "validateDataIntegrity",
      "file": "src/dataLoader.js",
      "line": 65,
      "context": "this.validateDataIntegrity();"
    },
    {
      "name": "log",
      "file": "src/dataLoader.js",
      "line": 67,
      "context": "console.log('✅ Game data loaded successfully!');"
    },
    {
      "name": "log",
      "file": "src/dataLoader.js",
      "line": 68,
      "context": "console.log(`📍 Loaded ${this.gameData.rooms.length} rooms`);"
    },
    {
      "name": "log",
      "file": "src/dataLoader.js",
      "line": 69,
      "context": "console.log(`❓ Loaded ${this.gameData.questions.length} questions`);"
    },
    {
      "name": "log",
      "file": "src/dataLoader.js",
      "line": 70,
      "context": "console.log(`🏆 Loaded ${this.gameData.achievements.length} achievements`);"
    },
    {
      "name": "error",
      "file": "src/dataLoader.js",
      "line": 75,
      "context": "console.error('❌ Error loading game data:', error);"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 76,
      "context": "throw new Error(`Failed to load game data: ${error.message}`);"
    },
    {
      "name": "validateDataIntegrity",
      "file": "src/dataLoader.js",
      "line": 84,
      "context": "validateDataIntegrity() {"
    },
    {
      "name": "log",
      "file": "src/dataLoader.js",
      "line": 85,
      "context": "console.log('🔍 Validating data integrity...');"
    },
    {
      "name": "_validateRooms",
      "file": "src/dataLoader.js",
      "line": 88,
      "context": "this._validateRooms();"
    },
    {
      "name": "_validateQuestions",
      "file": "src/dataLoader.js",
      "line": 91,
      "context": "this._validateQuestions();"
    },
    {
      "name": "_validateAchievements",
      "file": "src/dataLoader.js",
      "line": 94,
      "context": "this._validateAchievements();"
    },
    {
      "name": "_validateCrossReferences",
      "file": "src/dataLoader.js",
      "line": 97,
      "context": "this._validateCrossReferences();"
    },
    {
      "name": "log",
      "file": "src/dataLoader.js",
      "line": 99,
      "context": "console.log('✅ Data validation passed!');"
    },
    {
      "name": "_validateRooms",
      "file": "src/dataLoader.js",
      "line": 106,
      "context": "_validateRooms() {"
    },
    {
      "name": "isArray",
      "file": "src/dataLoader.js",
      "line": 107,
      "context": "if (!Array.isArray(this.gameData.rooms)) {"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 108,
      "context": "throw new Error('Rooms data must be an array');"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 112,
      "context": "throw new Error('At least one room must be defined');"
    },
    {
      "name": "Set",
      "file": "src/dataLoader.js",
      "line": 116,
      "context": "const roomIds = new Set();"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 123,
      "context": "throw new Error(`Room missing required field: ${field}`);"
    },
    {
      "name": "has",
      "file": "src/dataLoader.js",
      "line": 128,
      "context": "if (roomIds.has(room.id)) {"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 129,
      "context": "throw new Error(`Duplicate room ID: ${room.id}`);"
    },
    {
      "name": "add",
      "file": "src/dataLoader.js",
      "line": 131,
      "context": "roomIds.add(room.id);"
    },
    {
      "name": "isArray",
      "file": "src/dataLoader.js",
      "line": 139,
      "context": "if (!Array.isArray(room.connections)) {"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 140,
      "context": "throw new Error(`Room ${room.id} connections must be an array`);"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 145,
      "context": "throw new Error('At least one room must be marked as starting room');"
    },
    {
      "name": "_validateQuestions",
      "file": "src/dataLoader.js",
      "line": 153,
      "context": "_validateQuestions() {"
    },
    {
      "name": "isArray",
      "file": "src/dataLoader.js",
      "line": 154,
      "context": "if (!Array.isArray(this.gameData.questions)) {"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 155,
      "context": "throw new Error('Questions data must be an array');"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 159,
      "context": "throw new Error('At least one question must be defined');"
    },
    {
      "name": "Set",
      "file": "src/dataLoader.js",
      "line": 163,
      "context": "const questionIds = new Set();"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 169,
      "context": "throw new Error(`Question missing required field: ${field}`);"
    },
    {
      "name": "has",
      "file": "src/dataLoader.js",
      "line": 174,
      "context": "if (questionIds.has(question.id)) {"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 175,
      "context": "throw new Error(`Duplicate question ID: ${question.id}`);"
    },
    {
      "name": "add",
      "file": "src/dataLoader.js",
      "line": 177,
      "context": "questionIds.add(question.id);"
    },
    {
      "name": "isArray",
      "file": "src/dataLoader.js",
      "line": 180,
      "context": "if (!Array.isArray(question.answers) || question.answers.length < 2) {"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 181,
      "context": "throw new Error(`Question ${question.id} must have at least 2 answers`);"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 186,
      "context": "throw new Error(`Question ${question.id} has invalid correctAnswer index`);"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 191,
      "context": "throw new Error(`Question ${question.id} must have positive points value`);"
    },
    {
      "name": "_validateAchievements",
      "file": "src/dataLoader.js",
      "line": 200,
      "context": "_validateAchievements() {"
    },
    {
      "name": "isArray",
      "file": "src/dataLoader.js",
      "line": 201,
      "context": "if (!Array.isArray(this.gameData.achievements)) {"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 202,
      "context": "throw new Error('Achievements data must be an array');"
    },
    {
      "name": "Set",
      "file": "src/dataLoader.js",
      "line": 206,
      "context": "const achievementIds = new Set();"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 212,
      "context": "throw new Error(`Achievement missing required field: ${field}`);"
    },
    {
      "name": "has",
      "file": "src/dataLoader.js",
      "line": 217,
      "context": "if (achievementIds.has(achievement.id)) {"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 218,
      "context": "throw new Error(`Duplicate achievement ID: ${achievement.id}`);"
    },
    {
      "name": "add",
      "file": "src/dataLoader.js",
      "line": 220,
      "context": "achievementIds.add(achievement.id);"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 224,
      "context": "throw new Error(`Achievement ${achievement.id} condition missing type`);"
    },
    {
      "name": "_validateCrossReferences",
      "file": "src/dataLoader.js",
      "line": 233,
      "context": "_validateCrossReferences() {"
    },
    {
      "name": "Set",
      "file": "src/dataLoader.js",
      "line": 234,
      "context": "const roomIds = new Set(this.gameData.rooms.map(room => room.id));"
    },
    {
      "name": "map",
      "file": "src/dataLoader.js",
      "line": 234,
      "context": "const roomIds = new Set(this.gameData.rooms.map(room => room.id));"
    },
    {
      "name": "has",
      "file": "src/dataLoader.js",
      "line": 239,
      "context": "if (!roomIds.has(connectionId)) {"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 240,
      "context": "throw new Error(`Room ${room.id} references non-existent room: ${connectionId}`);"
    },
    {
      "name": "Set",
      "file": "src/dataLoader.js",
      "line": 246,
      "context": "const usedCategories = new Set();"
    },
    {
      "name": "forEach",
      "file": "src/dataLoader.js",
      "line": 249,
      "context": "room.questionCategories.forEach(cat => usedCategories.add(cat));"
    },
    {
      "name": "add",
      "file": "src/dataLoader.js",
      "line": 249,
      "context": "room.questionCategories.forEach(cat => usedCategories.add(cat));"
    },
    {
      "name": "Set",
      "file": "src/dataLoader.js",
      "line": 253,
      "context": "const questionCategories = new Set(this.gameData.questions.map(q => q.category));"
    },
    {
      "name": "map",
      "file": "src/dataLoader.js",
      "line": 253,
      "context": "const questionCategories = new Set(this.gameData.questions.map(q => q.category));"
    },
    {
      "name": "has",
      "file": "src/dataLoader.js",
      "line": 255,
      "context": "if (!questionCategories.has(category)) {"
    },
    {
      "name": "warn",
      "file": "src/dataLoader.js",
      "line": 256,
      "context": "console.warn(`⚠️ Room references unused question category: ${category}`);"
    },
    {
      "name": "getRoom",
      "file": "src/dataLoader.js",
      "line": 266,
      "context": "getRoom(roomId) {"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 268,
      "context": "throw new Error('Game data not loaded. Call loadGameData() first.');"
    },
    {
      "name": "loadGameData",
      "file": "src/dataLoader.js",
      "line": 268,
      "context": "throw new Error('Game data not loaded. Call loadGameData() first.');"
    },
    {
      "name": "find",
      "file": "src/dataLoader.js",
      "line": 271,
      "context": "return this.gameData.rooms.find(room => room.id === roomId) || null;"
    },
    {
      "name": "getQuestion",
      "file": "src/dataLoader.js",
      "line": 279,
      "context": "getQuestion(questionId) {"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 281,
      "context": "throw new Error('Game data not loaded. Call loadGameData() first.');"
    },
    {
      "name": "loadGameData",
      "file": "src/dataLoader.js",
      "line": 281,
      "context": "throw new Error('Game data not loaded. Call loadGameData() first.');"
    },
    {
      "name": "find",
      "file": "src/dataLoader.js",
      "line": 284,
      "context": "return this.gameData.questions.find(question => question.id === questionId) || null;"
    },
    {
      "name": "getQuestionsByCategory",
      "file": "src/dataLoader.js",
      "line": 292,
      "context": "getQuestionsByCategory(category) {"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 294,
      "context": "throw new Error('Game data not loaded. Call loadGameData() first.');"
    },
    {
      "name": "loadGameData",
      "file": "src/dataLoader.js",
      "line": 294,
      "context": "throw new Error('Game data not loaded. Call loadGameData() first.');"
    },
    {
      "name": "filter",
      "file": "src/dataLoader.js",
      "line": 297,
      "context": "return this.gameData.questions.filter(question => question.category === category);"
    },
    {
      "name": "getAchievement",
      "file": "src/dataLoader.js",
      "line": 305,
      "context": "getAchievement(achievementId) {"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 307,
      "context": "throw new Error('Game data not loaded. Call loadGameData() first.');"
    },
    {
      "name": "loadGameData",
      "file": "src/dataLoader.js",
      "line": 307,
      "context": "throw new Error('Game data not loaded. Call loadGameData() first.');"
    },
    {
      "name": "find",
      "file": "src/dataLoader.js",
      "line": 310,
      "context": "return this.gameData.achievements.find(achievement => achievement.id === achievementId) || null;"
    },
    {
      "name": "getStartingRoom",
      "file": "src/dataLoader.js",
      "line": 317,
      "context": "getStartingRoom() {"
    },
    {
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 319,
      "context": "throw new Error('Game data not loaded. Call loadGameData() first.');"
    },
    {
      "name": "loadGameData",
      "file": "src/dataLoader.js",
      "line": 319,
      "context": "throw new Error('Game data not loaded. Call loadGameData() first.');"
    },
    {
      "name": "find",
      "file": "src/dataLoader.js",
      "line": 322,
      "context": "return this.gameData.rooms.find(room => room.isStartingRoom) || null;"
    },
    {
      "name": "data",
      "file": "src/dataLoader.js",
      "line": 326,
      "context": "* Get all available data (for debugging)"
    },
    {
      "name": "getAllData",
      "file": "src/dataLoader.js",
      "line": 329,
      "context": "getAllData() {"
    },
    {
      "name": "constructor",
      "file": "src/gameState.js",
      "line": 6,
      "context": "constructor(dataLoader) {"
    },
    {
      "name": "Set",
      "file": "src/gameState.js",
      "line": 10,
      "context": "this.visitedRooms = new Set();"
    },
    {
      "name": "Set",
      "file": "src/gameState.js",
      "line": 11,
      "context": "this.unlockedRooms = new Set();"
    },
    {
      "name": "Set",
      "file": "src/gameState.js",
      "line": 12,
      "context": "this.answeredQuestions = new Set();"
    },
    {
      "name": "now",
      "file": "src/gameState.js",
      "line": 13,
      "context": "this.startTime = Date.now();"
    },
    {
      "name": "now",
      "file": "src/gameState.js",
      "line": 14,
      "context": "this.currentRoomStartTime = Date.now(); // Track time in current room"
    },
    {
      "name": "initializeStartingRoom",
      "file": "src/gameState.js",
      "line": 21,
      "context": "this.initializeStartingRoom();"
    },
    {
      "name": "log",
      "file": "src/gameState.js",
      "line": 26,
      "context": "console.log('GameState initialized:', this.getStateSnapshot());"
    },
    {
      "name": "getStateSnapshot",
      "file": "src/gameState.js",
      "line": 26,
      "context": "console.log('GameState initialized:', this.getStateSnapshot());"
    },
    {
      "name": "initializeStartingRoom",
      "file": "src/gameState.js",
      "line": 32,
      "context": "initializeStartingRoom() {"
    },
    {
      "name": "getStartingRoom",
      "file": "src/gameState.js",
      "line": 34,
      "context": "const startingRoom = this.dataLoader.getStartingRoom();"
    },
    {
      "name": "add",
      "file": "src/gameState.js",
      "line": 37,
      "context": "this.visitedRooms.add(startingRoom.id);"
    },
    {
      "name": "add",
      "file": "src/gameState.js",
      "line": 38,
      "context": "this.unlockedRooms.add(startingRoom.id);"
    },
    {
      "name": "log",
      "file": "src/gameState.js",
      "line": 39,
      "context": "console.log(`Starting room initialized: ${startingRoom.id} (${startingRoom.name})`);"
    },
    {
      "name": "error",
      "file": "src/gameState.js",
      "line": 41,
      "context": "console.error('No starting room found in data!');"
    },
    {
      "name": "getAllData",
      "file": "src/gameState.js",
      "line": 43,
      "context": "const gameData = this.dataLoader.getAllData();"
    },
    {
      "name": "add",
      "file": "src/gameState.js",
      "line": 47,
      "context": "this.visitedRooms.add(firstRoom.id);"
    },
    {
      "name": "add",
      "file": "src/gameState.js",
      "line": 48,
      "context": "this.unlockedRooms.add(firstRoom.id);"
    },
    {
      "name": "warn",
      "file": "src/gameState.js",
      "line": 49,
      "context": "console.warn(`Using first room as fallback: ${firstRoom.id}`);"
    },
    {
      "name": "error",
      "file": "src/gameState.js",
      "line": 53,
      "context": "console.error('Failed to initialize starting room:', error);"
    },
    {
      "name": "moveToRoom",
      "file": "src/gameState.js",
      "line": 60,
      "context": "async moveToRoom(roomId) {"
    },
    {
      "name": "log",
      "file": "src/gameState.js",
      "line": 62,
      "context": "console.log(`Attempting to move to room: ${roomId}`);"
    },
    {
      "name": "getRoom",
      "file": "src/gameState.js",
      "line": 65,
      "context": "const targetRoom = await this.dataLoader.getRoom(roomId);"
    },
    {
      "name": "Error",
      "file": "src/gameState.js",
      "line": 67,
      "context": "throw new Error(`Room ${roomId} does not exist`);"
    },
    {
      "name": "has",
      "file": "src/gameState.js",
      "line": 71,
      "context": "if (!this.unlockedRooms.has(roomId)) {"
    },
    {
      "name": "Error",
      "file": "src/gameState.js",
      "line": 72,
      "context": "throw new Error(`Room ${roomId} is locked. Answer questions to unlock new areas.`);"
    },
    {
      "name": "add",
      "file": "src/gameState.js",
      "line": 77,
      "context": "this.visitedRooms.add(roomId);"
    },
    {
      "name": "now",
      "file": "src/gameState.js",
      "line": 78,
      "context": "this.currentRoomStartTime = Date.now(); // Reset room timer"
    },
    {
      "name": "log",
      "file": "src/gameState.js",
      "line": 80,
      "context": "console.log(`Moved from ${previousRoom} to ${roomId}`);"
    },
    {
      "name": "emit",
      "file": "src/gameState.js",
      "line": 81,
      "context": "this.emit('roomChanged', { from: previousRoom, to: roomId, room: targetRoom });"
    },
    {
      "name": "error",
      "file": "src/gameState.js",
      "line": 85,
      "context": "console.error('Failed to move to room:', error.message);"
    },
    {
      "name": "emit",
      "file": "src/gameState.js",
      "line": 86,
      "context": "this.emit('error', { type: 'movement', message: error.message });"
    },
    {
      "name": "answerQuestion",
      "file": "src/gameState.js",
      "line": 94,
      "context": "async answerQuestion(questionId, answerIndex) {"
    },
    {
      "name": "log",
      "file": "src/gameState.js",
      "line": 96,
      "context": "console.log(`Answering question ${questionId} with answer ${answerIndex}`);"
    },
    {
      "name": "getQuestion",
      "file": "src/gameState.js",
      "line": 98,
      "context": "const question = await this.dataLoader.getQuestion(questionId);"
    },
    {
      "name": "Error",
      "file": "src/gameState.js",
      "line": 100,
      "context": "throw new Error(`Question ${questionId} not found`);"
    },
    {
      "name": "has",
      "file": "src/gameState.js",
      "line": 103,
      "context": "if (this.answeredQuestions.has(questionId)) {"
    },
    {
      "name": "Error",
      "file": "src/gameState.js",
      "line": 104,
      "context": "throw new Error('Question already answered');"
    },
    {
      "name": "calculateTimeBonus",
      "file": "src/gameState.js",
      "line": 108,
      "context": "const timeBonus = this.calculateTimeBonus();"
    },
    {
      "name": "add",
      "file": "src/gameState.js",
      "line": 114,
      "context": "this.answeredQuestions.add(questionId);"
    },
    {
      "name": "emit",
      "file": "src/gameState.js",
      "line": 117,
      "context": "this.emit('scoreChanged', {"
    },
    {
      "name": "unlockConnectedRooms",
      "file": "src/gameState.js",
      "line": 124,
      "context": "await this.unlockConnectedRooms();"
    },
    {
      "name": "log",
      "file": "src/gameState.js",
      "line": 126,
      "context": "console.log(`Correct answer! Points earned: ${pointsEarned} (${question.points} + ${timeBonus} time bonus)`);"
    },
    {
      "name": "log",
      "file": "src/gameState.js",
      "line": 128,
      "context": "console.log('Incorrect answer');"
    },
    {
      "name": "emit",
      "file": "src/gameState.js",
      "line": 140,
      "context": "this.emit('questionAnswered', result);"
    },
    {
      "name": "checkGameCompletion",
      "file": "src/gameState.js",
      "line": 143,
      "context": "this.checkGameCompletion();"
    },
    {
      "name": "error",
      "file": "src/gameState.js",
      "line": 147,
      "context": "console.error('Failed to answer question:', error.message);"
    },
    {
      "name": "emit",
      "file": "src/gameState.js",
      "line": 148,
      "context": "this.emit('error', { type: 'answer', message: error.message });"
    },
    {
      "name": "unlockConnectedRooms",
      "file": "src/gameState.js",
      "line": 156,
      "context": "async unlockConnectedRooms() {"
    },
    {
      "name": "getRoom",
      "file": "src/gameState.js",
      "line": 158,
      "context": "const currentRoom = await this.dataLoader.getRoom(this.currentRoomId);"
    },
    {
      "name": "forEach",
      "file": "src/gameState.js",
      "line": 160,
      "context": "currentRoom.connections.forEach(roomId => {"
    },
    {
      "name": "has",
      "file": "src/gameState.js",
      "line": 161,
      "context": "if (!this.unlockedRooms.has(roomId)) {"
    },
    {
      "name": "add",
      "file": "src/gameState.js",
      "line": 162,
      "context": "this.unlockedRooms.add(roomId);"
    },
    {
      "name": "log",
      "file": "src/gameState.js",
      "line": 163,
      "context": "console.log(`Unlocked room: ${roomId}`);"
    },
    {
      "name": "emit",
      "file": "src/gameState.js",
      "line": 164,
      "context": "this.emit('roomUnlocked', { roomId });"
    },
    {
      "name": "error",
      "file": "src/gameState.js",
      "line": 169,
      "context": "console.error('Failed to unlock connected rooms:', error);"
    },
    {
      "name": "calculateTimeBonus",
      "file": "src/gameState.js",
      "line": 176,
      "context": "calculateTimeBonus() {"
    },
    {
      "name": "now",
      "file": "src/gameState.js",
      "line": 177,
      "context": "const now = Date.now();"
    },
    {
      "name": "floor",
      "file": "src/gameState.js",
      "line": 183,
      "context": "return Math.floor(maxBonus * (1 - timeSinceQuestion / maxBonusTime));"
    },
    {
      "name": "startQuestionTimer",
      "file": "src/gameState.js",
      "line": 191,
      "context": "startQuestionTimer() {"
    },
    {
      "name": "now",
      "file": "src/gameState.js",
      "line": 192,
      "context": "this.questionStartTime = Date.now();"
    },
    {
      "name": "completed",
      "file": "src/gameState.js",
      "line": 196,
      "context": "* Check if game is completed (all rooms visited and questions answered)"
    },
    {
      "name": "checkGameCompletion",
      "file": "src/gameState.js",
      "line": 198,
      "context": "async checkGameCompletion() {"
    },
    {
      "name": "loadGameData",
      "file": "src/gameState.js",
      "line": 200,
      "context": "const gameData = await this.dataLoader.loadGameData();"
    },
    {
      "name": "getCorrectAnswersCount",
      "file": "src/gameState.js",
      "line": 210,
      "context": "const correctAnswers = this.getCorrectAnswersCount();"
    },
    {
      "name": "calculateFinalScore",
      "file": "src/gameState.js",
      "line": 220,
      "context": "const finalScore = this.calculateFinalScore();"
    },
    {
      "name": "now",
      "file": "src/gameState.js",
      "line": 221,
      "context": "const playTime = Date.now() - this.startTime;"
    },
    {
      "name": "getStateSnapshot",
      "file": "src/gameState.js",
      "line": 236,
      "context": "gameState: this.getStateSnapshot()"
    },
    {
      "name": "log",
      "file": "src/gameState.js",
      "line": 239,
      "context": "console.log('🎉 Game completed!', completionData);"
    },
    {
      "name": "emit",
      "file": "src/gameState.js",
      "line": 240,
      "context": "this.emit('gameCompleted', completionData);"
    },
    {
      "name": "error",
      "file": "src/gameState.js",
      "line": 262,
      "context": "console.error('Error checking game completion:', error);"
    },
    {
      "name": "getCorrectAnswersCount",
      "file": "src/gameState.js",
      "line": 270,
      "context": "getCorrectAnswersCount() {"
    },
    {
      "name": "floor",
      "file": "src/gameState.js",
      "line": 273,
      "context": "return Math.floor(this.score / 100); // Rough estimate based on scoring"
    },
    {
      "name": "getGameStatistics",
      "file": "src/gameState.js",
      "line": 279,
      "context": "getGameStatistics() {"
    },
    {
      "name": "now",
      "file": "src/gameState.js",
      "line": 280,
      "context": "const playTime = Date.now() - this.startTime;"
    },
    {
      "name": "getCorrectAnswersCount",
      "file": "src/gameState.js",
      "line": 282,
      "context": "const correctAnswers = this.getCorrectAnswersCount();"
    },
    {
      "name": "calculateDetailedBonuses",
      "file": "src/gameState.js",
      "line": 286,
      "context": "const bonusDetails = this.calculateDetailedBonuses();"
    },
    {
      "name": "getAllData",
      "file": "src/gameState.js",
      "line": 287,
      "context": "const gameData = this.dataLoader ? this.dataLoader.getAllData() : null;"
    },
    {
      "name": "calculateFinalScore",
      "file": "src/gameState.js",
      "line": 295,
      "context": "finalScore: this.calculateFinalScore(),"
    },
    {
      "name": "formatTime",
      "file": "src/gameState.js",
      "line": 299,
      "context": "playTimeFormatted: this.formatTime(playTime),"
    },
    {
      "name": "formatTime",
      "file": "src/gameState.js",
      "line": 301,
      "context": "averageAnswerTimeFormatted: this.formatTime(questionsAnsweredCount > 0 ? playTime / questionsAnsweredCount : 0),"
    },
    {
      "name": "round",
      "file": "src/gameState.js",
      "line": 306,
      "context": "roomsExploredPercent: Math.round((this.visitedRooms.size / totalRooms) * 100),"
    },
    {
      "name": "round",
      "file": "src/gameState.js",
      "line": 309,
      "context": "questionsAnsweredPercent: Math.round((questionsAnsweredCount / totalQuestions) * 100),"
    },
    {
      "name": "round",
      "file": "src/gameState.js",
      "line": 312,
      "context": "accuracy: Math.round(accuracy * 10) / 10,"
    },
    {
      "name": "round",
      "file": "src/gameState.js",
      "line": 313,
      "context": "accuracyPercent: Math.round(accuracy),"
    },
    {
      "name": "calculatePerformanceScore",
      "file": "src/gameState.js",
      "line": 326,
      "context": "performanceScore: this.calculatePerformanceScore(accuracy, this.visitedRooms.size / totalRooms * 100, questionsAnsweredCount / totalQuestions * 100)"
    },
    {
      "name": "formatTime",
      "file": "src/gameState.js",
      "line": 333,
      "context": "formatTime(milliseconds) {"
    },
    {
      "name": "floor",
      "file": "src/gameState.js",
      "line": 334,
      "context": "const seconds = Math.floor(milliseconds / 1000);"
    },
    {
      "name": "floor",
      "file": "src/gameState.js",
      "line": 335,
      "context": "const minutes = Math.floor(seconds / 60);"
    },
    {
      "name": "floor",
      "file": "src/gameState.js",
      "line": 336,
      "context": "const hours = Math.floor(minutes / 60);"
    },
    {
      "name": "calculateDetailedBonuses",
      "file": "src/gameState.js",
      "line": 351,
      "context": "calculateDetailedBonuses() {"
    },
    {
      "name": "getCorrectAnswersCount",
      "file": "src/gameState.js",
      "line": 353,
      "context": "const correctAnswers = this.getCorrectAnswersCount();"
    },
    {
      "name": "now",
      "file": "src/gameState.js",
      "line": 355,
      "context": "const playTime = Date.now() - this.startTime;"
    },
    {
      "name": "calculateFinalScore",
      "file": "src/gameState.js",
      "line": 369,
      "context": "calculateFinalScore() {"
    },
    {
      "name": "calculateDetailedBonuses",
      "file": "src/gameState.js",
      "line": 370,
      "context": "const bonuses = this.calculateDetailedBonuses();"
    },
    {
      "name": "calculatePerformanceScore",
      "file": "src/gameState.js",
      "line": 382,
      "context": "calculatePerformanceScore(accuracy, exploration, completion) {"
    },
    {
      "name": "round",
      "file": "src/gameState.js",
      "line": 383,
      "context": "return Math.round((accuracy * 0.5) + (exploration * 0.3) + (completion * 0.2));"
    },
    {
      "name": "getAvailableRooms",
      "file": "src/gameState.js",
      "line": 389,
      "context": "async getAvailableRooms() {"
    },
    {
      "name": "getRoom",
      "file": "src/gameState.js",
      "line": 391,
      "context": "const currentRoom = await this.dataLoader.getRoom(this.currentRoomId);"
    },
    {
      "name": "filter",
      "file": "src/gameState.js",
      "line": 396,
      "context": "return currentRoom.connections.filter(roomId =>"
    },
    {
      "name": "has",
      "file": "src/gameState.js",
      "line": 397,
      "context": "this.unlockedRooms.has(roomId)"
    },
    {
      "name": "error",
      "file": "src/gameState.js",
      "line": 400,
      "context": "console.error('Error getting available rooms:', error);"
    },
    {
      "name": "accessible",
      "file": "src/gameState.js",
      "line": 406,
      "context": "* Check if a room is accessible (unlocked)"
    },
    {
      "name": "isRoomAccessible",
      "file": "src/gameState.js",
      "line": 410,
      "context": "isRoomAccessible(roomId) {"
    },
    {
      "name": "has",
      "file": "src/gameState.js",
      "line": 411,
      "context": "return this.unlockedRooms.has(roomId);"
    },
    {
      "name": "saveGame",
      "file": "src/gameState.js",
      "line": 417,
      "context": "saveGame() {"
    },
    {
      "name": "from",
      "file": "src/gameState.js",
      "line": 422,
      "context": "visitedRooms: Array.from(this.visitedRooms),"
    },
    {
      "name": "from",
      "file": "src/gameState.js",
      "line": 423,
      "context": "unlockedRooms: Array.from(this.unlockedRooms),"
    },
    {
      "name": "from",
      "file": "src/gameState.js",
      "line": 424,
      "context": "answeredQuestions: Array.from(this.answeredQuestions),"
    },
    {
      "name": "now",
      "file": "src/gameState.js",
      "line": 428,
      "context": "saveTime: Date.now()"
    },
    {
      "name": "setItem",
      "file": "src/gameState.js",
      "line": 431,
      "context": "localStorage.setItem('lobeLabyrinthSave', JSON.stringify(saveData));"
    },
    {
      "name": "stringify",
      "file": "src/gameState.js",
      "line": 431,
      "context": "localStorage.setItem('lobeLabyrinthSave', JSON.stringify(saveData));"
    },
    {
      "name": "log",
      "file": "src/gameState.js",
      "line": 432,
      "context": "console.log('Game saved successfully');"
    },
    {
      "name": "emit",
      "file": "src/gameState.js",
      "line": 433,
      "context": "this.emit('gameSaved', saveData);"
    },
    {
      "name": "error",
      "file": "src/gameState.js",
      "line": 436,
      "context": "console.error('Failed to save game:', error);"
    },
    {
      "name": "emit",
      "file": "src/gameState.js",
      "line": 437,
      "context": "this.emit('error', { type: 'save', message: error.message });"
    },
    {
      "name": "loadGame",
      "file": "src/gameState.js",
      "line": 445,
      "context": "loadGame() {"
    },
    {
      "name": "getItem",
      "file": "src/gameState.js",
      "line": 447,
      "context": "const saveData = localStorage.getItem('lobeLabyrinthSave');"
    },
    {
      "name": "log",
      "file": "src/gameState.js",
      "line": 449,
      "context": "console.log('No saved game found');"
    },
    {
      "name": "parse",
      "file": "src/gameState.js",
      "line": 453,
      "context": "const data = JSON.parse(saveData);"
    },
    {
      "name": "validateSaveData",
      "file": "src/gameState.js",
      "line": 456,
      "context": "if (!this.validateSaveData(data)) {"
    },
    {
      "name": "warn",
      "file": "src/gameState.js",
      "line": 457,
      "context": "console.warn('Invalid save data detected, starting new game');"
    },
    {
      "name": "removeItem",
      "file": "src/gameState.js",
      "line": 458,
      "context": "localStorage.removeItem('lobeLabyrinthSave');"
    },
    {
      "name": "getStartingRoom",
      "file": "src/gameState.js",
      "line": 463,
      "context": "const startingRoom = this.dataLoader.getStartingRoom();"
    },
    {
      "name": "sanitizeRoomId",
      "file": "src/gameState.js",
      "line": 467,
      "context": "this.currentRoomId = this.sanitizeRoomId(data.currentRoomId) || defaultRoomId;"
    },
    {
      "name": "max",
      "file": "src/gameState.js",
      "line": 468,
      "context": "this.score = Math.max(0, parseInt(data.score) || 0);"
    },
    {
      "name": "Set",
      "file": "src/gameState.js",
      "line": 469,
      "context": "this.visitedRooms = new Set(this.sanitizeRoomArray(data.visitedRooms, defaultRoomId));"
    },
    {
      "name": "sanitizeRoomArray",
      "file": "src/gameState.js",
      "line": 469,
      "context": "this.visitedRooms = new Set(this.sanitizeRoomArray(data.visitedRooms, defaultRoomId));"
    },
    {
      "name": "Set",
      "file": "src/gameState.js",
      "line": 470,
      "context": "this.unlockedRooms = new Set(this.sanitizeRoomArray(data.unlockedRooms, defaultRoomId));"
    },
    {
      "name": "sanitizeRoomArray",
      "file": "src/gameState.js",
      "line": 470,
      "context": "this.unlockedRooms = new Set(this.sanitizeRoomArray(data.unlockedRooms, defaultRoomId));"
    },
    {
      "name": "Set",
      "file": "src/gameState.js",
      "line": 471,
      "context": "this.answeredQuestions = new Set(this.sanitizeQuestionArray(data.answeredQuestions));"
    },
    {
      "name": "sanitizeQuestionArray",
      "file": "src/gameState.js",
      "line": 471,
      "context": "this.answeredQuestions = new Set(this.sanitizeQuestionArray(data.answeredQuestions));"
    },
    {
      "name": "sanitizeTimestamp",
      "file": "src/gameState.js",
      "line": 472,
      "context": "this.startTime = this.sanitizeTimestamp(data.startTime) || Date.now();"
    },
    {
      "name": "now",
      "file": "src/gameState.js",
      "line": 472,
      "context": "this.startTime = this.sanitizeTimestamp(data.startTime) || Date.now();"
    },
    {
      "name": "Boolean",
      "file": "src/gameState.js",
      "line": 473,
      "context": "this.gameCompleted = Boolean(data.gameCompleted);"
    },
    {
      "name": "sanitizePlayerName",
      "file": "src/gameState.js",
      "line": 474,
      "context": "this.playerName = this.sanitizePlayerName(data.playerName) || '';"
    },
    {
      "name": "log",
      "file": "src/gameState.js",
      "line": 476,
      "context": "console.log('Game loaded successfully:', this.getStateSnapshot());"
    },
    {
      "name": "getStateSnapshot",
      "file": "src/gameState.js",
      "line": 476,
      "context": "console.log('Game loaded successfully:', this.getStateSnapshot());"
    },
    {
      "name": "emit",
      "file": "src/gameState.js",
      "line": 477,
      "context": "this.emit('gameLoaded', data);"
    },
    {
      "name": "error",
      "file": "src/gameState.js",
      "line": 480,
      "context": "console.error('Failed to load save game:', error);"
    },
    {
      "name": "removeItem",
      "file": "src/gameState.js",
      "line": 481,
      "context": "localStorage.removeItem('lobeLabyrinthSave');"
    },
    {
      "name": "emit",
      "file": "src/gameState.js",
      "line": 482,
      "context": "this.emit('error', { type: 'load', message: 'Save data corrupted or invalid' });"
    },
    {
      "name": "validateSaveData",
      "file": "src/gameState.js",
      "line": 492,
      "context": "validateSaveData(data) {"
    },
    {
      "name": "isArray",
      "file": "src/gameState.js",
      "line": 507,
      "context": "if (data.visitedRooms !== undefined && !Array.isArray(data.visitedRooms)) {"
    },
    {
      "name": "isArray",
      "file": "src/gameState.js",
      "line": 511,
      "context": "if (data.unlockedRooms !== undefined && !Array.isArray(data.unlockedRooms)) {"
    },
    {
      "name": "isArray",
      "file": "src/gameState.js",
      "line": 515,
      "context": "if (data.answeredQuestions !== undefined && !Array.isArray(data.answeredQuestions)) {"
    },
    {
      "name": "sanitizeRoomId",
      "file": "src/gameState.js",
      "line": 531,
      "context": "sanitizeRoomId(roomId) {"
    },
    {
      "name": "test",
      "file": "src/gameState.js",
      "line": 537,
      "context": "if (!/^[a-zA-Z0-9_-]+$/.test(roomId)) {"
    },
    {
      "name": "sanitizeRoomArray",
      "file": "src/gameState.js",
      "line": 550,
      "context": "sanitizeRoomArray(roomArray, defaultRoom) {"
    },
    {
      "name": "isArray",
      "file": "src/gameState.js",
      "line": 551,
      "context": "if (!Array.isArray(roomArray)) {"
    },
    {
      "name": "filter",
      "file": "src/gameState.js",
      "line": 556,
      "context": ".filter(room => typeof room === 'string')"
    },
    {
      "name": "map",
      "file": "src/gameState.js",
      "line": 557,
      "context": ".map(room => this.sanitizeRoomId(room))"
    },
    {
      "name": "sanitizeRoomId",
      "file": "src/gameState.js",
      "line": 557,
      "context": ".map(room => this.sanitizeRoomId(room))"
    },
    {
      "name": "filter",
      "file": "src/gameState.js",
      "line": 558,
      "context": ".filter(room => room !== null)"
    },
    {
      "name": "slice",
      "file": "src/gameState.js",
      "line": 559,
      "context": ".slice(0, 20); // Limit array size"
    },
    {
      "name": "includes",
      "file": "src/gameState.js",
      "line": 562,
      "context": "if (defaultRoom && !sanitized.includes(defaultRoom)) {"
    },
    {
      "name": "unshift",
      "file": "src/gameState.js",
      "line": 563,
      "context": "sanitized.unshift(defaultRoom);"
    },
    {
      "name": "sanitizeQuestionArray",
      "file": "src/gameState.js",
      "line": 574,
      "context": "sanitizeQuestionArray(questionArray) {"
    },
    {
      "name": "isArray",
      "file": "src/gameState.js",
      "line": 575,
      "context": "if (!Array.isArray(questionArray)) {"
    },
    {
      "name": "filter",
      "file": "src/gameState.js",
      "line": 580,
      "context": ".filter(q => typeof q === 'string' && q.length > 0 && q.length < 100)"
    },
    {
      "name": "filter",
      "file": "src/gameState.js",
      "line": 581,
      "context": ".filter(q => /^[a-zA-Z0-9_-]+$/.test(q))"
    },
    {
      "name": "test",
      "file": "src/gameState.js",
      "line": 581,
      "context": ".filter(q => /^[a-zA-Z0-9_-]+$/.test(q))"
    },
    {
      "name": "slice",
      "file": "src/gameState.js",
      "line": 582,
      "context": ".slice(0, 100); // Limit array size"
    },
    {
      "name": "sanitizeTimestamp",
      "file": "src/gameState.js",
      "line": 590,
      "context": "sanitizeTimestamp(timestamp) {"
    },
    {
      "name": "now",
      "file": "src/gameState.js",
      "line": 596,
      "context": "const now = Date.now();"
    },
    {
      "name": "sanitizePlayerName",
      "file": "src/gameState.js",
      "line": 612,
      "context": "sanitizePlayerName(playerName) {"
    },
    {
      "name": "replace",
      "file": "src/gameState.js",
      "line": 619,
      "context": ".replace(/<[^>]*>/g, '') // Remove HTML tags"
    },
    {
      "name": "trim",
      "file": "src/gameState.js",
      "line": 620,
      "context": ".trim()"
    },
    {
      "name": "slice",
      "file": "src/gameState.js",
      "line": 621,
      "context": ".slice(0, 50); // Limit length"
    },
    {
      "name": "resetGame",
      "file": "src/gameState.js",
      "line": 627,
      "context": "resetGame() {"
    },
    {
      "name": "Set",
      "file": "src/gameState.js",
      "line": 630,
      "context": "this.visitedRooms = new Set(['entrance']);"
    },
    {
      "name": "Set",
      "file": "src/gameState.js",
      "line": 631,
      "context": "this.unlockedRooms = new Set(['entrance']);"
    },
    {
      "name": "Set",
      "file": "src/gameState.js",
      "line": 632,
      "context": "this.answeredQuestions = new Set();"
    },
    {
      "name": "now",
      "file": "src/gameState.js",
      "line": 633,
      "context": "this.startTime = Date.now();"
    },
    {
      "name": "removeItem",
      "file": "src/gameState.js",
      "line": 638,
      "context": "localStorage.removeItem('lobeLabyrinthSave');"
    },
    {
      "name": "log",
      "file": "src/gameState.js",
      "line": 640,
      "context": "console.log('Game reset to initial state');"
    },
    {
      "name": "emit",
      "file": "src/gameState.js",
      "line": 641,
      "context": "this.emit('gameReset');"
    },
    {
      "name": "getStateSnapshot",
      "file": "src/gameState.js",
      "line": 647,
      "context": "getStateSnapshot() {"
    },
    {
      "name": "from",
      "file": "src/gameState.js",
      "line": 651,
      "context": "visitedRooms: Array.from(this.visitedRooms),"
    },
    {
      "name": "from",
      "file": "src/gameState.js",
      "line": 652,
      "context": "unlockedRooms: Array.from(this.unlockedRooms),"
    },
    {
      "name": "from",
      "file": "src/gameState.js",
      "line": 653,
      "context": "answeredQuestions: Array.from(this.answeredQuestions),"
    },
    {
      "name": "now",
      "file": "src/gameState.js",
      "line": 656,
      "context": "playTime: Date.now() - this.startTime"
    },
    {
      "name": "exportSaveData",
      "file": "src/gameState.js",
      "line": 664,
      "context": "exportSaveData() {"
    },
    {
      "name": "getStateSnapshot",
      "file": "src/gameState.js",
      "line": 665,
      "context": "const baseSnapshot = this.getStateSnapshot();"
    },
    {
      "name": "getGameStatistics",
      "file": "src/gameState.js",
      "line": 666,
      "context": "const stats = this.getGameStatistics();"
    },
    {
      "name": "toISOString",
      "file": "src/gameState.js",
      "line": 671,
      "context": "exportTime: new Date().toISOString(),"
    },
    {
      "name": "on",
      "file": "src/gameState.js",
      "line": 697,
      "context": "on(event, callback) {"
    },
    {
      "name": "push",
      "file": "src/gameState.js",
      "line": 701,
      "context": "this.eventListeners[event].push(callback);"
    },
    {
      "name": "emit",
      "file": "src/gameState.js",
      "line": 704,
      "context": "emit(event, data) {"
    },
    {
      "name": "forEach",
      "file": "src/gameState.js",
      "line": 706,
      "context": "this.eventListeners[event].forEach(callback => {"
    },
    {
      "name": "callback",
      "file": "src/gameState.js",
      "line": 708,
      "context": "callback(data);"
    },
    {
      "name": "error",
      "file": "src/gameState.js",
      "line": 710,
      "context": "console.error(`Error in event listener for ${event}:`, error);"
    },
    {
      "name": "getStatistics",
      "file": "src/gameState.js",
      "line": 719,
      "context": "getStatistics() {"
    },
    {
      "name": "now",
      "file": "src/gameState.js",
      "line": 720,
      "context": "const playTime = Date.now() - this.startTime;"
    },
    {
      "name": "floor",
      "file": "src/gameState.js",
      "line": 725,
      "context": "playTime: Math.floor(playTime / 1000), // in seconds"
    },
    {
      "name": "room",
      "file": "src/gameState.js",
      "line": 731,
      "context": "* Get time spent in current room (in milliseconds)"
    },
    {
      "name": "getTimeInCurrentRoom",
      "file": "src/gameState.js",
      "line": 733,
      "context": "getTimeInCurrentRoom() {"
    },
    {
      "name": "now",
      "file": "src/gameState.js",
      "line": 737,
      "context": "return Date.now() - this.currentRoomStartTime;"
    },
    {
      "name": "pauseTimer",
      "file": "src/gameState.js",
      "line": 743,
      "context": "pauseTimer() {"
    },
    {
      "name": "now",
      "file": "src/gameState.js",
      "line": 746,
      "context": "this.pausedTime = Date.now() - this.currentRoomStartTime;"
    },
    {
      "name": "resumeTimer",
      "file": "src/gameState.js",
      "line": 753,
      "context": "resumeTimer() {"
    },
    {
      "name": "now",
      "file": "src/gameState.js",
      "line": 756,
      "context": "this.currentRoomStartTime = Date.now() - this.pausedTime;"
    },
    {
      "name": "formatTime",
      "file": "src/gameState.js",
      "line": 764,
      "context": "formatTime(milliseconds) {"
    },
    {
      "name": "floor",
      "file": "src/gameState.js",
      "line": 765,
      "context": "const seconds = Math.floor(milliseconds / 1000);"
    },
    {
      "name": "floor",
      "file": "src/gameState.js",
      "line": 766,
      "context": "const minutes = Math.floor(seconds / 60);"
    },
    {
      "name": "floor",
      "file": "src/gameState.js",
      "line": 767,
      "context": "const hours = Math.floor(minutes / 60);"
    },
    {
      "name": "constructor",
      "file": "src/quizEngine.js",
      "line": 6,
      "context": "constructor(dataLoader, gameState) {"
    },
    {
      "name": "Map",
      "file": "src/quizEngine.js",
      "line": 18,
      "context": "this.questionAnswerMap = new Map(); // Store original correct answers"
    },
    {
      "name": "Set",
      "file": "src/quizEngine.js",
      "line": 21,
      "context": "this.questionHistory = new Set();"
    },
    {
      "name": "Map",
      "file": "src/quizEngine.js",
      "line": 22,
      "context": "this.categoryQuestions = new Map();"
    },
    {
      "name": "log",
      "file": "src/quizEngine.js",
      "line": 28,
      "context": "console.log('QuizEngine initialized - call initializeQuestionPool() after instantiation');"
    },
    {
      "name": "initializeQuestionPool",
      "file": "src/quizEngine.js",
      "line": 28,
      "context": "console.log('QuizEngine initialized - call initializeQuestionPool() after instantiation');"
    },
    {
      "name": "initializeQuestionPool",
      "file": "src/quizEngine.js",
      "line": 34,
      "context": "async initializeQuestionPool() {"
    },
    {
      "name": "loadGameData",
      "file": "src/quizEngine.js",
      "line": 36,
      "context": "const gameData = await this.dataLoader.loadGameData();"
    },
    {
      "name": "categorizeQuestions",
      "file": "src/quizEngine.js",
      "line": 40,
      "context": "this.categorizeQuestions();"
    },
    {
      "name": "shuffleQuestionPool",
      "file": "src/quizEngine.js",
      "line": 43,
      "context": "this.shuffleQuestionPool();"
    },
    {
      "name": "log",
      "file": "src/quizEngine.js",
      "line": 45,
      "context": "console.log(`Question pool initialized: ${this.allQuestions.length} questions across ${this.categoryQuestions.size} categories`);"
    },
    {
      "name": "error",
      "file": "src/quizEngine.js",
      "line": 47,
      "context": "console.error('Failed to initialize question pool:', error);"
    },
    {
      "name": "categorizeQuestions",
      "file": "src/quizEngine.js",
      "line": 54,
      "context": "categorizeQuestions() {"
    },
    {
      "name": "clear",
      "file": "src/quizEngine.js",
      "line": 55,
      "context": "this.categoryQuestions.clear();"
    },
    {
      "name": "forEach",
      "file": "src/quizEngine.js",
      "line": 57,
      "context": "this.allQuestions.forEach(question => {"
    },
    {
      "name": "has",
      "file": "src/quizEngine.js",
      "line": 59,
      "context": "if (!this.categoryQuestions.has(category)) {"
    },
    {
      "name": "set",
      "file": "src/quizEngine.js",
      "line": 60,
      "context": "this.categoryQuestions.set(category, []);"
    },
    {
      "name": "get",
      "file": "src/quizEngine.js",
      "line": 62,
      "context": "this.categoryQuestions.get(category).push(question);"
    },
    {
      "name": "push",
      "file": "src/quizEngine.js",
      "line": 62,
      "context": "this.categoryQuestions.get(category).push(question);"
    },
    {
      "name": "shuffleQuestionPool",
      "file": "src/quizEngine.js",
      "line": 69,
      "context": "shuffleQuestionPool() {"
    },
    {
      "name": "floor",
      "file": "src/quizEngine.js",
      "line": 72,
      "context": "const j = Math.floor(Math.random() * (i + 1));"
    },
    {
      "name": "random",
      "file": "src/quizEngine.js",
      "line": 72,
      "context": "const j = Math.floor(Math.random() * (i + 1));"
    },
    {
      "name": "getNextQuestion",
      "file": "src/quizEngine.js",
      "line": 81,
      "context": "async getNextQuestion(preferredCategory = null) {"
    },
    {
      "name": "filter",
      "file": "src/quizEngine.js",
      "line": 84,
      "context": "const availableQuestions = this.shuffledQuestions.filter(q =>"
    },
    {
      "name": "has",
      "file": "src/quizEngine.js",
      "line": 85,
      "context": "!this.gameState.answeredQuestions.has(q.id)"
    },
    {
      "name": "shuffleQuestionPool",
      "file": "src/quizEngine.js",
      "line": 90,
      "context": "this.shuffleQuestionPool();"
    },
    {
      "name": "log",
      "file": "src/quizEngine.js",
      "line": 91,
      "context": "console.log('All questions answered, reshuffling pool');"
    },
    {
      "name": "has",
      "file": "src/quizEngine.js",
      "line": 97,
      "context": "if (preferredCategory && this.categoryQuestions.has(preferredCategory)) {"
    },
    {
      "name": "get",
      "file": "src/quizEngine.js",
      "line": 98,
      "context": "const categoryQuestions = this.categoryQuestions.get(preferredCategory)"
    },
    {
      "name": "filter",
      "file": "src/quizEngine.js",
      "line": 99,
      "context": ".filter(q => !this.gameState.answeredQuestions.has(q.id));"
    },
    {
      "name": "has",
      "file": "src/quizEngine.js",
      "line": 99,
      "context": ".filter(q => !this.gameState.answeredQuestions.has(q.id));"
    },
    {
      "name": "floor",
      "file": "src/quizEngine.js",
      "line": 102,
      "context": "selectedQuestion = categoryQuestions[Math.floor(Math.random() * categoryQuestions.length)];"
    },
    {
      "name": "random",
      "file": "src/quizEngine.js",
      "line": 102,
      "context": "selectedQuestion = categoryQuestions[Math.floor(Math.random() * categoryQuestions.length)];"
    },
    {
      "name": "error",
      "file": "src/quizEngine.js",
      "line": 113,
      "context": "console.error('Error selecting next question:', error);"
    },
    {
      "name": "presentQuestion",
      "file": "src/quizEngine.js",
      "line": 121,
      "context": "async presentQuestion(questionId = null, category = null) {"
    },
    {
      "name": "getQuestion",
      "file": "src/quizEngine.js",
      "line": 126,
      "context": "question = await this.dataLoader.getQuestion(questionId);"
    },
    {
      "name": "getNextQuestion",
      "file": "src/quizEngine.js",
      "line": 128,
      "context": "question = await this.getNextQuestion(category);"
    },
    {
      "name": "Error",
      "file": "src/quizEngine.js",
      "line": 132,
      "context": "throw new Error('No questions available');"
    },
    {
      "name": "now",
      "file": "src/quizEngine.js",
      "line": 136,
      "context": "this.questionStartTime = Date.now();"
    },
    {
      "name": "set",
      "file": "src/quizEngine.js",
      "line": 140,
      "context": "this.questionAnswerMap.set(question.id, {"
    },
    {
      "name": "startQuestionTimer",
      "file": "src/quizEngine.js",
      "line": 146,
      "context": "this.startQuestionTimer();"
    },
    {
      "name": "shuffleAnswers",
      "file": "src/quizEngine.js",
      "line": 149,
      "context": "const shuffledAnswers = this.shuffleAnswers(question);"
    },
    {
      "name": "get",
      "file": "src/quizEngine.js",
      "line": 152,
      "context": "this.questionAnswerMap.get(question.id).shuffledCorrectIndex = shuffledAnswers.correctIndex;"
    },
    {
      "name": "generateAnswerHash",
      "file": "src/quizEngine.js",
      "line": 155,
      "context": "const answerHash = this.generateAnswerHash(question.id, shuffledAnswers.correctIndex);"
    },
    {
      "name": "log",
      "file": "src/quizEngine.js",
      "line": 168,
      "context": "console.log(`Presenting question: ${question.question}`);"
    },
    {
      "name": "emit",
      "file": "src/quizEngine.js",
      "line": 169,
      "context": "this.emit('questionPresented', questionData);"
    },
    {
      "name": "error",
      "file": "src/quizEngine.js",
      "line": 173,
      "context": "console.error('Failed to present question:', error);"
    },
    {
      "name": "emit",
      "file": "src/quizEngine.js",
      "line": 174,
      "context": "this.emit('error', { type: 'presentation', message: error.message });"
    },
    {
      "name": "shuffleAnswers",
      "file": "src/quizEngine.js",
      "line": 182,
      "context": "shuffleAnswers(question) {"
    },
    {
      "name": "floor",
      "file": "src/quizEngine.js",
      "line": 188,
      "context": "const j = Math.floor(Math.random() * (i + 1));"
    },
    {
      "name": "random",
      "file": "src/quizEngine.js",
      "line": 188,
      "context": "const j = Math.floor(Math.random() * (i + 1));"
    },
    {
      "name": "indexOf",
      "file": "src/quizEngine.js",
      "line": 193,
      "context": "const correctIndex = answers.indexOf(correctAnswer);"
    },
    {
      "name": "startQuestionTimer",
      "file": "src/quizEngine.js",
      "line": 204,
      "context": "startQuestionTimer() {"
    },
    {
      "name": "clearQuestionTimer",
      "file": "src/quizEngine.js",
      "line": 205,
      "context": "this.clearQuestionTimer();"
    },
    {
      "name": "now",
      "file": "src/quizEngine.js",
      "line": 208,
      "context": "const startTime = performance.now();"
    },
    {
      "name": "max",
      "file": "src/quizEngine.js",
      "line": 211,
      "context": "this.timeRemaining = Math.max(0, this.questionTimeLimit - elapsed);"
    },
    {
      "name": "emit",
      "file": "src/quizEngine.js",
      "line": 213,
      "context": "this.emit('timerUpdate', {"
    },
    {
      "name": "handleTimeUp",
      "file": "src/quizEngine.js",
      "line": 222,
      "context": "this.handleTimeUp();"
    },
    {
      "name": "clearQuestionTimer",
      "file": "src/quizEngine.js",
      "line": 232,
      "context": "clearQuestionTimer() {"
    },
    {
      "name": "handleTimeUp",
      "file": "src/quizEngine.js",
      "line": 242,
      "context": "handleTimeUp() {"
    },
    {
      "name": "clearQuestionTimer",
      "file": "src/quizEngine.js",
      "line": 243,
      "context": "this.clearQuestionTimer();"
    },
    {
      "name": "log",
      "file": "src/quizEngine.js",
      "line": 247,
      "context": "console.log('Answer already being processed, skipping timeUp');"
    },
    {
      "name": "log",
      "file": "src/quizEngine.js",
      "line": 251,
      "context": "console.log('Time up for question:', this.currentQuestion?.id);"
    },
    {
      "name": "getOriginalCorrectAnswer",
      "file": "src/quizEngine.js",
      "line": 258,
      "context": "correctAnswer: this.getOriginalCorrectAnswer(this.currentQuestion?.id),"
    },
    {
      "name": "emit",
      "file": "src/quizEngine.js",
      "line": 263,
      "context": "this.emit('timeUp', result);"
    },
    {
      "name": "validateAnswer",
      "file": "src/quizEngine.js",
      "line": 270,
      "context": "async validateAnswer(answerIndex) {"
    },
    {
      "name": "Error",
      "file": "src/quizEngine.js",
      "line": 273,
      "context": "throw new Error('No question currently active');"
    },
    {
      "name": "warn",
      "file": "src/quizEngine.js",
      "line": 277,
      "context": "console.warn('Answer processing already in progress, ignoring duplicate submission');"
    },
    {
      "name": "now",
      "file": "src/quizEngine.js",
      "line": 284,
      "context": "const timeElapsed = Date.now() - this.questionStartTime;"
    },
    {
      "name": "validateAnswerHash",
      "file": "src/quizEngine.js",
      "line": 287,
      "context": "const isCorrect = this.validateAnswerHash(question.id, answerIndex, question.answerHash);"
    },
    {
      "name": "clearQuestionTimer",
      "file": "src/quizEngine.js",
      "line": 290,
      "context": "this.clearQuestionTimer();"
    },
    {
      "name": "calculateTimeBonus",
      "file": "src/quizEngine.js",
      "line": 293,
      "context": "const timeBonus = this.calculateTimeBonus(timeElapsed);"
    },
    {
      "name": "getOriginalCorrectAnswer",
      "file": "src/quizEngine.js",
      "line": 304,
      "context": "correctAnswer: this.getOriginalCorrectAnswer(question.id), // Only revealed after answer"
    },
    {
      "name": "log",
      "file": "src/quizEngine.js",
      "line": 312,
      "context": "console.log(`Answer validation: ${isCorrect ? 'Correct' : 'Incorrect'} (${pointsEarned} points)`);"
    },
    {
      "name": "startQuestionTimer",
      "file": "src/quizEngine.js",
      "line": 316,
      "context": "this.gameState.startQuestionTimer(); // Sync with gameState"
    },
    {
      "name": "answerQuestion",
      "file": "src/quizEngine.js",
      "line": 317,
      "context": "await this.gameState.answerQuestion(question.id, answerIndex);"
    },
    {
      "name": "emit",
      "file": "src/quizEngine.js",
      "line": 320,
      "context": "this.emit('answerValidated', result);"
    },
    {
      "name": "error",
      "file": "src/quizEngine.js",
      "line": 325,
      "context": "console.error('Failed to validate answer:', error);"
    },
    {
      "name": "emit",
      "file": "src/quizEngine.js",
      "line": 326,
      "context": "this.emit('error', { type: 'validation', message: error.message });"
    },
    {
      "name": "validation",
      "file": "src/quizEngine.js",
      "line": 334,
      "context": "* Generate a hash for answer validation (basic obfuscation)"
    },
    {
      "name": "generateAnswerHash",
      "file": "src/quizEngine.js",
      "line": 340,
      "context": "generateAnswerHash(questionId, correctIndex) {"
    },
    {
      "name": "now",
      "file": "src/quizEngine.js",
      "line": 342,
      "context": "const seed = `${questionId}_${correctIndex}_${this.questionStartTime || Date.now()}`;"
    },
    {
      "name": "charCodeAt",
      "file": "src/quizEngine.js",
      "line": 345,
      "context": "const char = seed.charCodeAt(i);"
    },
    {
      "name": "abs",
      "file": "src/quizEngine.js",
      "line": 349,
      "context": "return Math.abs(hash).toString(16);"
    },
    {
      "name": "toString",
      "file": "src/quizEngine.js",
      "line": 349,
      "context": "return Math.abs(hash).toString(16);"
    },
    {
      "name": "validateAnswerHash",
      "file": "src/quizEngine.js",
      "line": 359,
      "context": "validateAnswerHash(questionId, answerIndex, expectedHash) {"
    },
    {
      "name": "generateAnswerHash",
      "file": "src/quizEngine.js",
      "line": 361,
      "context": "const submittedHash = this.generateAnswerHash(questionId, answerIndex);"
    },
    {
      "name": "question",
      "file": "src/quizEngine.js",
      "line": 366,
      "context": "* Get original correct answer for a question (only after validation)"
    },
    {
      "name": "index",
      "file": "src/quizEngine.js",
      "line": 368,
      "context": "* @returns {number} - Original correct answer index (shuffled)"
    },
    {
      "name": "getOriginalCorrectAnswer",
      "file": "src/quizEngine.js",
      "line": 370,
      "context": "getOriginalCorrectAnswer(questionId) {"
    },
    {
      "name": "get",
      "file": "src/quizEngine.js",
      "line": 373,
      "context": "const storedData = this.questionAnswerMap.get(questionId);"
    },
    {
      "name": "getQuestion",
      "file": "src/quizEngine.js",
      "line": 379,
      "context": "const originalQuestion = this.dataLoader.getQuestion(questionId);"
    },
    {
      "name": "error",
      "file": "src/quizEngine.js",
      "line": 382,
      "context": "console.error('Error retrieving original correct answer:', error);"
    },
    {
      "name": "calculateTimeBonus",
      "file": "src/quizEngine.js",
      "line": 390,
      "context": "calculateTimeBonus(timeElapsed) {"
    },
    {
      "name": "floor",
      "file": "src/quizEngine.js",
      "line": 396,
      "context": "return Math.floor(maxBonus * bonusMultiplier);"
    },
    {
      "name": "getHint",
      "file": "src/quizEngine.js",
      "line": 404,
      "context": "getHint() {"
    },
    {
      "name": "log",
      "file": "src/quizEngine.js",
      "line": 410,
      "context": "console.log('Hint requested for current question');"
    },
    {
      "name": "emit",
      "file": "src/quizEngine.js",
      "line": 411,
      "context": "this.emit('hintRequested', {"
    },
    {
      "name": "question",
      "file": "src/quizEngine.js",
      "line": 422,
      "context": "* Skip the current question (with penalty)"
    },
    {
      "name": "skipQuestion",
      "file": "src/quizEngine.js",
      "line": 424,
      "context": "skipQuestion() {"
    },
    {
      "name": "clearQuestionTimer",
      "file": "src/quizEngine.js",
      "line": 429,
      "context": "this.clearQuestionTimer();"
    },
    {
      "name": "log",
      "file": "src/quizEngine.js",
      "line": 439,
      "context": "console.log('Question skipped:', this.currentQuestion.id);"
    },
    {
      "name": "emit",
      "file": "src/quizEngine.js",
      "line": 441,
      "context": "this.emit('questionSkipped', result);"
    },
    {
      "name": "getQuestionsByCategory",
      "file": "src/quizEngine.js",
      "line": 450,
      "context": "getQuestionsByCategory(category) {"
    },
    {
      "name": "get",
      "file": "src/quizEngine.js",
      "line": 451,
      "context": "return this.categoryQuestions.get(category) || [];"
    },
    {
      "name": "getAvailableCategories",
      "file": "src/quizEngine.js",
      "line": 457,
      "context": "getAvailableCategories() {"
    },
    {
      "name": "from",
      "file": "src/quizEngine.js",
      "line": 458,
      "context": "return Array.from(this.categoryQuestions.keys());"
    },
    {
      "name": "keys",
      "file": "src/quizEngine.js",
      "line": 458,
      "context": "return Array.from(this.categoryQuestions.keys());"
    },
    {
      "name": "getQuizStatistics",
      "file": "src/quizEngine.js",
      "line": 464,
      "context": "getQuizStatistics() {"
    },
    {
      "name": "getAvailableCategories",
      "file": "src/quizEngine.js",
      "line": 467,
      "context": "const categories = this.getAvailableCategories();"
    },
    {
      "name": "map",
      "file": "src/quizEngine.js",
      "line": 469,
      "context": "const categoryStats = categories.map(category => {"
    },
    {
      "name": "get",
      "file": "src/quizEngine.js",
      "line": 470,
      "context": "const categoryQuestions = this.categoryQuestions.get(category);"
    },
    {
      "name": "filter",
      "file": "src/quizEngine.js",
      "line": 471,
      "context": "const answeredInCategory = categoryQuestions.filter(q =>"
    },
    {
      "name": "has",
      "file": "src/quizEngine.js",
      "line": 472,
      "context": "this.gameState && this.gameState.answeredQuestions.has(q.id)"
    },
    {
      "name": "round",
      "file": "src/quizEngine.js",
      "line": 479,
      "context": "percentage: Math.round((answeredInCategory / categoryQuestions.length) * 100)"
    },
    {
      "name": "round",
      "file": "src/quizEngine.js",
      "line": 488,
      "context": "completionPercentage: Math.round((answeredQuestions / totalQuestions) * 100)"
    },
    {
      "name": "getAdaptiveQuestion",
      "file": "src/quizEngine.js",
      "line": 495,
      "context": "getAdaptiveQuestion() {"
    },
    {
      "name": "getNextQuestion",
      "file": "src/quizEngine.js",
      "line": 497,
      "context": "return this.getNextQuestion();"
    },
    {
      "name": "getStatistics",
      "file": "src/quizEngine.js",
      "line": 500,
      "context": "const stats = this.gameState.getStatistics();"
    },
    {
      "name": "filter",
      "file": "src/quizEngine.js",
      "line": 514,
      "context": "const adaptiveQuestions = this.allQuestions.filter(q =>"
    },
    {
      "name": "has",
      "file": "src/quizEngine.js",
      "line": 516,
      "context": "!this.gameState.answeredQuestions.has(q.id)"
    },
    {
      "name": "floor",
      "file": "src/quizEngine.js",
      "line": 520,
      "context": "return adaptiveQuestions[Math.floor(Math.random() * adaptiveQuestions.length)];"
    },
    {
      "name": "random",
      "file": "src/quizEngine.js",
      "line": 520,
      "context": "return adaptiveQuestions[Math.floor(Math.random() * adaptiveQuestions.length)];"
    },
    {
      "name": "getNextQuestion",
      "file": "src/quizEngine.js",
      "line": 524,
      "context": "return this.getNextQuestion();"
    },
    {
      "name": "on",
      "file": "src/quizEngine.js",
      "line": 530,
      "context": "on(event, callback) {"
    },
    {
      "name": "push",
      "file": "src/quizEngine.js",
      "line": 534,
      "context": "this.eventListeners[event].push(callback);"
    },
    {
      "name": "emit",
      "file": "src/quizEngine.js",
      "line": 537,
      "context": "emit(event, data) {"
    },
    {
      "name": "forEach",
      "file": "src/quizEngine.js",
      "line": 539,
      "context": "this.eventListeners[event].forEach(callback => {"
    },
    {
      "name": "callback",
      "file": "src/quizEngine.js",
      "line": 541,
      "context": "callback(data);"
    },
    {
      "name": "error",
      "file": "src/quizEngine.js",
      "line": 543,
      "context": "console.error(`Error in QuizEngine event listener for ${event}:`, error);"
    },
    {
      "name": "destroy",
      "file": "src/quizEngine.js",
      "line": 552,
      "context": "destroy() {"
    },
    {
      "name": "clearQuestionTimer",
      "file": "src/quizEngine.js",
      "line": 553,
      "context": "this.clearQuestionTimer();"
    },
    {
      "name": "log",
      "file": "src/quizEngine.js",
      "line": 556,
      "context": "console.log('QuizEngine destroyed');"
    },
    {
      "name": "constructor",
      "file": "src/uiManager.js",
      "line": 5,
      "context": "constructor(dataLoader, gameState, quizEngine, animationManager = null, achievementManager = null) {"
    },
    {
      "name": "log",
      "file": "src/uiManager.js",
      "line": 28,
      "context": "console.log('UIManager initialized with animations:', !!this.animationManager, 'achievements:', !!this.achievementManager);"
    },
    {
      "name": "initializeElements",
      "file": "src/uiManager.js",
      "line": 29,
      "context": "this.initializeElements();"
    },
    {
      "name": "setupEventListeners",
      "file": "src/uiManager.js",
      "line": 30,
      "context": "this.setupEventListeners();"
    },
    {
      "name": "setupAriaLiveRegions",
      "file": "src/uiManager.js",
      "line": 31,
      "context": "this.setupAriaLiveRegions();"
    },
    {
      "name": "updateDisplay",
      "file": "src/uiManager.js",
      "line": 32,
      "context": "this.updateDisplay();"
    },
    {
      "name": "setupAchievementNotifications",
      "file": "src/uiManager.js",
      "line": 33,
      "context": "this.setupAchievementNotifications();"
    },
    {
      "name": "Map",
      "file": "src/uiManager.js",
      "line": 36,
      "context": "this.loadingStates = new Map();"
    },
    {
      "name": "setupHapticFeedback",
      "file": "src/uiManager.js",
      "line": 39,
      "context": "this.setupHapticFeedback();"
    },
    {
      "name": "initializeElements",
      "file": "src/uiManager.js",
      "line": 45,
      "context": "initializeElements() {"
    },
    {
      "name": "getElementsByIds",
      "file": "src/uiManager.js",
      "line": 47,
      "context": "this.elements = this.getElementsByIds(["
    },
    {
      "name": "log",
      "file": "src/uiManager.js",
      "line": 91,
      "context": "console.log('UI elements initialized with caching');"
    },
    {
      "name": "getElementsByIds",
      "file": "src/uiManager.js",
      "line": 99,
      "context": "getElementsByIds(ids) {"
    },
    {
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 101,
      "context": "ids.forEach(id => {"
    },
    {
      "name": "getElementById",
      "file": "src/uiManager.js",
      "line": 102,
      "context": "const element = document.getElementById(id);"
    },
    {
      "name": "warn",
      "file": "src/uiManager.js",
      "line": 104,
      "context": "console.warn(`UIManager: Element with ID '${id}' not found in DOM`);"
    },
    {
      "name": "replace",
      "file": "src/uiManager.js",
      "line": 107,
      "context": "const camelCaseKey = id.replace(/-([a-z])/g, (match, letter) => letter.toUpperCase());"
    },
    {
      "name": "toUpperCase",
      "file": "src/uiManager.js",
      "line": 107,
      "context": "const camelCaseKey = id.replace(/-([a-z])/g, (match, letter) => letter.toUpperCase());"
    },
    {
      "name": "setupEventListeners",
      "file": "src/uiManager.js",
      "line": 116,
      "context": "setupEventListeners() {"
    },
    {
      "name": "addEventListener",
      "file": "src/uiManager.js",
      "line": 119,
      "context": "this.elements.newQuestionBtn.addEventListener('click', () => this.presentNewQuestion());"
    },
    {
      "name": "presentNewQuestion",
      "file": "src/uiManager.js",
      "line": 119,
      "context": "this.elements.newQuestionBtn.addEventListener('click', () => this.presentNewQuestion());"
    },
    {
      "name": "addEventListener",
      "file": "src/uiManager.js",
      "line": 123,
      "context": "this.elements.hintBtn.addEventListener('click', () => this.showHint());"
    },
    {
      "name": "showHint",
      "file": "src/uiManager.js",
      "line": 123,
      "context": "this.elements.hintBtn.addEventListener('click', () => this.showHint());"
    },
    {
      "name": "addEventListener",
      "file": "src/uiManager.js",
      "line": 127,
      "context": "this.elements.skipBtn.addEventListener('click', () => this.skipQuestion());"
    },
    {
      "name": "skipQuestion",
      "file": "src/uiManager.js",
      "line": 127,
      "context": "this.elements.skipBtn.addEventListener('click', () => this.skipQuestion());"
    },
    {
      "name": "addEventListener",
      "file": "src/uiManager.js",
      "line": 131,
      "context": "this.elements.saveBtn.addEventListener('click', () => this.saveGame());"
    },
    {
      "name": "saveGame",
      "file": "src/uiManager.js",
      "line": 131,
      "context": "this.elements.saveBtn.addEventListener('click', () => this.saveGame());"
    },
    {
      "name": "addEventListener",
      "file": "src/uiManager.js",
      "line": 135,
      "context": "this.elements.loadBtn.addEventListener('click', () => this.loadGame());"
    },
    {
      "name": "loadGame",
      "file": "src/uiManager.js",
      "line": 135,
      "context": "this.elements.loadBtn.addEventListener('click', () => this.loadGame());"
    },
    {
      "name": "addEventListener",
      "file": "src/uiManager.js",
      "line": 139,
      "context": "this.elements.resetBtn.addEventListener('click', () => this.resetGame());"
    },
    {
      "name": "resetGame",
      "file": "src/uiManager.js",
      "line": 139,
      "context": "this.elements.resetBtn.addEventListener('click', () => this.resetGame());"
    },
    {
      "name": "on",
      "file": "src/uiManager.js",
      "line": 144,
      "context": "this.gameState.on('roomChanged', (data) => this.handleRoomChange(data));"
    },
    {
      "name": "handleRoomChange",
      "file": "src/uiManager.js",
      "line": 144,
      "context": "this.gameState.on('roomChanged', (data) => this.handleRoomChange(data));"
    },
    {
      "name": "on",
      "file": "src/uiManager.js",
      "line": 145,
      "context": "this.gameState.on('questionAnswered', (data) => this.handleQuestionAnswered(data));"
    },
    {
      "name": "handleQuestionAnswered",
      "file": "src/uiManager.js",
      "line": 145,
      "context": "this.gameState.on('questionAnswered', (data) => this.handleQuestionAnswered(data));"
    },
    {
      "name": "on",
      "file": "src/uiManager.js",
      "line": 146,
      "context": "this.gameState.on('gameCompleted', (data) => this.handleGameCompleted(data));"
    },
    {
      "name": "handleGameCompleted",
      "file": "src/uiManager.js",
      "line": 146,
      "context": "this.gameState.on('gameCompleted', (data) => this.handleGameCompleted(data));"
    },
    {
      "name": "on",
      "file": "src/uiManager.js",
      "line": 151,
      "context": "this.quizEngine.on('questionPresented', (data) => this.displayQuestion(data));"
    },
    {
      "name": "displayQuestion",
      "file": "src/uiManager.js",
      "line": 151,
      "context": "this.quizEngine.on('questionPresented', (data) => this.displayQuestion(data));"
    },
    {
      "name": "on",
      "file": "src/uiManager.js",
      "line": 152,
      "context": "this.quizEngine.on('answerValidated', (data) => this.handleAnswerValidated(data));"
    },
    {
      "name": "handleAnswerValidated",
      "file": "src/uiManager.js",
      "line": 152,
      "context": "this.quizEngine.on('answerValidated', (data) => this.handleAnswerValidated(data));"
    },
    {
      "name": "on",
      "file": "src/uiManager.js",
      "line": 153,
      "context": "this.quizEngine.on('timerUpdate', (data) => this.updateTimer(data));"
    },
    {
      "name": "updateTimer",
      "file": "src/uiManager.js",
      "line": 153,
      "context": "this.quizEngine.on('timerUpdate', (data) => this.updateTimer(data));"
    },
    {
      "name": "on",
      "file": "src/uiManager.js",
      "line": 154,
      "context": "this.quizEngine.on('timeUp', (data) => this.handleTimeUp(data));"
    },
    {
      "name": "handleTimeUp",
      "file": "src/uiManager.js",
      "line": 154,
      "context": "this.quizEngine.on('timeUp', (data) => this.handleTimeUp(data));"
    },
    {
      "name": "addEventListener",
      "file": "src/uiManager.js",
      "line": 159,
      "context": "this.elements.playAgainBtn.addEventListener('click', () => this.handlePlayAgain());"
    },
    {
      "name": "handlePlayAgain",
      "file": "src/uiManager.js",
      "line": 159,
      "context": "this.elements.playAgainBtn.addEventListener('click', () => this.handlePlayAgain());"
    },
    {
      "name": "addEventListener",
      "file": "src/uiManager.js",
      "line": 163,
      "context": "this.elements.viewAchievementsBtn.addEventListener('click', () => this.handleViewAchievements());"
    },
    {
      "name": "handleViewAchievements",
      "file": "src/uiManager.js",
      "line": 163,
      "context": "this.elements.viewAchievementsBtn.addEventListener('click', () => this.handleViewAchievements());"
    },
    {
      "name": "addEventListener",
      "file": "src/uiManager.js",
      "line": 167,
      "context": "this.elements.shareResultsBtn.addEventListener('click', () => this.handleShareResults());"
    },
    {
      "name": "handleShareResults",
      "file": "src/uiManager.js",
      "line": 167,
      "context": "this.elements.shareResultsBtn.addEventListener('click', () => this.handleShareResults());"
    },
    {
      "name": "setupKeyboardNavigation",
      "file": "src/uiManager.js",
      "line": 173,
      "context": "this.setupKeyboardNavigation();"
    },
    {
      "name": "log",
      "file": "src/uiManager.js",
      "line": 175,
      "context": "console.log('Event listeners setup complete');"
    },
    {
      "name": "setupKeyboardNavigation",
      "file": "src/uiManager.js",
      "line": 181,
      "context": "setupKeyboardNavigation() {"
    },
    {
      "name": "addEventListener",
      "file": "src/uiManager.js",
      "line": 188,
      "context": "document.addEventListener('keydown', (event) => {"
    },
    {
      "name": "shouldPreventDefault",
      "file": "src/uiManager.js",
      "line": 190,
      "context": "if (this.shouldPreventDefault(event)) {"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 191,
      "context": "event.preventDefault();"
    },
    {
      "name": "handleKeyboardInput",
      "file": "src/uiManager.js",
      "line": 195,
      "context": "this.handleKeyboardInput(event);"
    },
    {
      "name": "log",
      "file": "src/uiManager.js",
      "line": 198,
      "context": "console.log('Keyboard navigation setup complete');"
    },
    {
      "name": "setupAriaLiveRegions",
      "file": "src/uiManager.js",
      "line": 204,
      "context": "setupAriaLiveRegions() {"
    },
    {
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 206,
      "context": "this.politeRegion = document.createElement('div');"
    },
    {
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 207,
      "context": "this.politeRegion.setAttribute('aria-live', 'polite');"
    },
    {
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 208,
      "context": "this.politeRegion.setAttribute('aria-atomic', 'true');"
    },
    {
      "name": "appendChild",
      "file": "src/uiManager.js",
      "line": 211,
      "context": "document.body.appendChild(this.politeRegion);"
    },
    {
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 214,
      "context": "this.assertiveRegion = document.createElement('div');"
    },
    {
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 215,
      "context": "this.assertiveRegion.setAttribute('aria-live', 'assertive');"
    },
    {
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 216,
      "context": "this.assertiveRegion.setAttribute('aria-atomic', 'true');"
    },
    {
      "name": "appendChild",
      "file": "src/uiManager.js",
      "line": 219,
      "context": "document.body.appendChild(this.assertiveRegion);"
    },
    {
      "name": "log",
      "file": "src/uiManager.js",
      "line": 221,
      "context": "console.log('ARIA live regions initialized for accessibility');"
    },
    {
      "name": "announceToScreenReader",
      "file": "src/uiManager.js",
      "line": 229,
      "context": "announceToScreenReader(message, priority = 'polite') {"
    },
    {
      "name": "handleKeyboardInput",
      "file": "src/uiManager.js",
      "line": 252,
      "context": "handleKeyboardInput(event) {"
    },
    {
      "name": "isVictoryScreenVisible",
      "file": "src/uiManager.js",
      "line": 262,
      "context": "if (this.isVictoryScreenVisible()) {"
    },
    {
      "name": "handleVictoryScreenKeys",
      "file": "src/uiManager.js",
      "line": 263,
      "context": "this.handleVictoryScreenKeys(event);"
    },
    {
      "name": "checkQuestionActive",
      "file": "src/uiManager.js",
      "line": 267,
      "context": "if (this.checkQuestionActive()) {"
    },
    {
      "name": "handleQuestionKeys",
      "file": "src/uiManager.js",
      "line": 268,
      "context": "this.handleQuestionKeys(event);"
    },
    {
      "name": "isMapFocused",
      "file": "src/uiManager.js",
      "line": 272,
      "context": "if (this.isMapFocused()) {"
    },
    {
      "name": "handleMapNavigationKeys",
      "file": "src/uiManager.js",
      "line": 273,
      "context": "this.handleMapNavigationKeys(event);"
    },
    {
      "name": "handleGlobalShortcuts",
      "file": "src/uiManager.js",
      "line": 278,
      "context": "this.handleGlobalShortcuts(event);"
    },
    {
      "name": "error",
      "file": "src/uiManager.js",
      "line": 281,
      "context": "console.error('Error handling keyboard input:', error);"
    },
    {
      "name": "handleVictoryScreenKeys",
      "file": "src/uiManager.js",
      "line": 289,
      "context": "handleVictoryScreenKeys(event) {"
    },
    {
      "name": "handlePlayAgain",
      "file": "src/uiManager.js",
      "line": 296,
      "context": "this.handlePlayAgain();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 297,
      "context": "event.preventDefault();"
    },
    {
      "name": "hideVictoryScreen",
      "file": "src/uiManager.js",
      "line": 300,
      "context": "this.hideVictoryScreen();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 301,
      "context": "event.preventDefault();"
    },
    {
      "name": "handlePlayAgain",
      "file": "src/uiManager.js",
      "line": 304,
      "context": "this.handlePlayAgain();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 305,
      "context": "event.preventDefault();"
    },
    {
      "name": "handleViewAchievements",
      "file": "src/uiManager.js",
      "line": 308,
      "context": "this.handleViewAchievements();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 309,
      "context": "event.preventDefault();"
    },
    {
      "name": "handleShareResults",
      "file": "src/uiManager.js",
      "line": 312,
      "context": "this.handleShareResults();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 313,
      "context": "event.preventDefault();"
    },
    {
      "name": "handleQuestionKeys",
      "file": "src/uiManager.js",
      "line": 322,
      "context": "handleQuestionKeys(event) {"
    },
    {
      "name": "selectAnswerByIndex",
      "file": "src/uiManager.js",
      "line": 328,
      "context": "this.selectAnswerByIndex(answerIndex);"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 329,
      "context": "event.preventDefault();"
    },
    {
      "name": "submitCurrentAnswer",
      "file": "src/uiManager.js",
      "line": 338,
      "context": "this.submitCurrentAnswer();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 339,
      "context": "event.preventDefault();"
    },
    {
      "name": "showHint",
      "file": "src/uiManager.js",
      "line": 344,
      "context": "this.showHint();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 345,
      "context": "event.preventDefault();"
    },
    {
      "name": "skipQuestion",
      "file": "src/uiManager.js",
      "line": 350,
      "context": "this.skipQuestion();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 351,
      "context": "event.preventDefault();"
    },
    {
      "name": "presentNewQuestion",
      "file": "src/uiManager.js",
      "line": 357,
      "context": "this.presentNewQuestion();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 358,
      "context": "event.preventDefault();"
    },
    {
      "name": "clearAnswerSelection",
      "file": "src/uiManager.js",
      "line": 363,
      "context": "this.clearAnswerSelection();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 364,
      "context": "event.preventDefault();"
    },
    {
      "name": "handleMapNavigationKeys",
      "file": "src/uiManager.js",
      "line": 373,
      "context": "handleMapNavigationKeys(event) {"
    },
    {
      "name": "navigateMapDirection",
      "file": "src/uiManager.js",
      "line": 380,
      "context": "this.navigateMapDirection('up');"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 381,
      "context": "event.preventDefault();"
    },
    {
      "name": "navigateMapDirection",
      "file": "src/uiManager.js",
      "line": 386,
      "context": "this.navigateMapDirection('down');"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 387,
      "context": "event.preventDefault();"
    },
    {
      "name": "navigateMapDirection",
      "file": "src/uiManager.js",
      "line": 392,
      "context": "this.navigateMapDirection('left');"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 393,
      "context": "event.preventDefault();"
    },
    {
      "name": "navigateMapDirection",
      "file": "src/uiManager.js",
      "line": 398,
      "context": "this.navigateMapDirection('right');"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 399,
      "context": "event.preventDefault();"
    },
    {
      "name": "enterCurrentRoom",
      "file": "src/uiManager.js",
      "line": 404,
      "context": "this.enterCurrentRoom();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 405,
      "context": "event.preventDefault();"
    },
    {
      "name": "handleGlobalShortcuts",
      "file": "src/uiManager.js",
      "line": 414,
      "context": "handleGlobalShortcuts(event) {"
    },
    {
      "name": "saveGame",
      "file": "src/uiManager.js",
      "line": 424,
      "context": "this.saveGame();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 425,
      "context": "event.preventDefault();"
    },
    {
      "name": "loadGame",
      "file": "src/uiManager.js",
      "line": 428,
      "context": "this.loadGame();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 429,
      "context": "event.preventDefault();"
    },
    {
      "name": "resetGame",
      "file": "src/uiManager.js",
      "line": 432,
      "context": "this.resetGame();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 433,
      "context": "event.preventDefault();"
    },
    {
      "name": "showKeyboardHelp",
      "file": "src/uiManager.js",
      "line": 436,
      "context": "this.showKeyboardHelp();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 437,
      "context": "event.preventDefault();"
    },
    {
      "name": "presentNewQuestion",
      "file": "src/uiManager.js",
      "line": 441,
      "context": "this.presentNewQuestion();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 442,
      "context": "event.preventDefault();"
    },
    {
      "name": "toggleTimer",
      "file": "src/uiManager.js",
      "line": 446,
      "context": "this.toggleTimer();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 447,
      "context": "event.preventDefault();"
    },
    {
      "name": "handleViewAchievements",
      "file": "src/uiManager.js",
      "line": 456,
      "context": "this.handleViewAchievements();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 457,
      "context": "event.preventDefault();"
    },
    {
      "name": "focusMap",
      "file": "src/uiManager.js",
      "line": 460,
      "context": "this.focusMap();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 461,
      "context": "event.preventDefault();"
    },
    {
      "name": "focusQuestion",
      "file": "src/uiManager.js",
      "line": 464,
      "context": "this.focusQuestion();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 465,
      "context": "event.preventDefault();"
    },
    {
      "name": "showQuickStats",
      "file": "src/uiManager.js",
      "line": 469,
      "context": "this.showQuickStats();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 470,
      "context": "event.preventDefault();"
    },
    {
      "name": "showHint",
      "file": "src/uiManager.js",
      "line": 474,
      "context": "this.showHint();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 475,
      "context": "event.preventDefault();"
    },
    {
      "name": "confirmAndResetGame",
      "file": "src/uiManager.js",
      "line": 485,
      "context": "this.confirmAndResetGame();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 486,
      "context": "event.preventDefault();"
    },
    {
      "name": "toggleDebugMode",
      "file": "src/uiManager.js",
      "line": 490,
      "context": "this.toggleDebugMode();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 491,
      "context": "event.preventDefault();"
    },
    {
      "name": "exportSaveData",
      "file": "src/uiManager.js",
      "line": 495,
      "context": "this.exportSaveData();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 496,
      "context": "event.preventDefault();"
    },
    {
      "name": "showKeyboardHelp",
      "file": "src/uiManager.js",
      "line": 504,
      "context": "this.showKeyboardHelp();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 505,
      "context": "event.preventDefault();"
    },
    {
      "name": "showQuickStats",
      "file": "src/uiManager.js",
      "line": 508,
      "context": "this.showQuickStats();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 509,
      "context": "event.preventDefault();"
    },
    {
      "name": "refreshCurrentRoom",
      "file": "src/uiManager.js",
      "line": 513,
      "context": "this.refreshCurrentRoom();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 514,
      "context": "event.preventDefault();"
    },
    {
      "name": "isInInputField",
      "file": "src/uiManager.js",
      "line": 519,
      "context": "if (!this.isInInputField(event.target)) {"
    },
    {
      "name": "showKeyboardHelp",
      "file": "src/uiManager.js",
      "line": 522,
      "context": "this.showKeyboardHelp();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 523,
      "context": "event.preventDefault();"
    },
    {
      "name": "cycleFocus",
      "file": "src/uiManager.js",
      "line": 527,
      "context": "this.cycleFocus();"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 528,
      "context": "event.preventDefault();"
    },
    {
      "name": "shouldPreventDefault",
      "file": "src/uiManager.js",
      "line": 539,
      "context": "shouldPreventDefault(event) {"
    },
    {
      "name": "includes",
      "file": "src/uiManager.js",
      "line": 549,
      "context": "if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', ' '].includes(key)) {"
    },
    {
      "name": "isVictoryScreenVisible",
      "file": "src/uiManager.js",
      "line": 560,
      "context": "isVictoryScreenVisible() {"
    },
    {
      "name": "contains",
      "file": "src/uiManager.js",
      "line": 563,
      "context": "this.elements.victoryScreen.classList.contains('show');"
    },
    {
      "name": "isQuestionActive",
      "file": "src/uiManager.js",
      "line": 570,
      "context": "isQuestionActive() {"
    },
    {
      "name": "active",
      "file": "src/uiManager.js",
      "line": 575,
      "context": "* Alternative method to check if question is active (for debugging)"
    },
    {
      "name": "checkQuestionActive",
      "file": "src/uiManager.js",
      "line": 578,
      "context": "checkQuestionActive() {"
    },
    {
      "name": "isMapFocused",
      "file": "src/uiManager.js",
      "line": 586,
      "context": "isMapFocused() {"
    },
    {
      "name": "checkQuestionActive",
      "file": "src/uiManager.js",
      "line": 587,
      "context": "return !this.checkQuestionActive() && !this.isVictoryScreenVisible();"
    },
    {
      "name": "isVictoryScreenVisible",
      "file": "src/uiManager.js",
      "line": 587,
      "context": "return !this.checkQuestionActive() && !this.isVictoryScreenVisible();"
    },
    {
      "name": "index",
      "file": "src/uiManager.js",
      "line": 591,
      "context": "* Select answer by index (0-3) for keyboard navigation"
    },
    {
      "name": "selectAnswerByIndex",
      "file": "src/uiManager.js",
      "line": 594,
      "context": "selectAnswerByIndex(index) {"
    },
    {
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 600,
      "context": "const answerButtons = document.querySelectorAll('.answer-btn');"
    },
    {
      "name": "click",
      "file": "src/uiManager.js",
      "line": 603,
      "context": "answerButtons[index].click();"
    },
    {
      "name": "highlightSelectedAnswer",
      "file": "src/uiManager.js",
      "line": 606,
      "context": "this.highlightSelectedAnswer(index);"
    },
    {
      "name": "error",
      "file": "src/uiManager.js",
      "line": 609,
      "context": "console.error('Error selecting answer by index:', error);"
    },
    {
      "name": "highlightSelectedAnswer",
      "file": "src/uiManager.js",
      "line": 617,
      "context": "highlightSelectedAnswer(index) {"
    },
    {
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 620,
      "context": "document.querySelectorAll('.answer-btn').forEach((btn, i) => {"
    },
    {
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 620,
      "context": "document.querySelectorAll('.answer-btn').forEach((btn, i) => {"
    },
    {
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 621,
      "context": "btn.classList.remove('keyboard-selected');"
    },
    {
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 622,
      "context": "btn.setAttribute('aria-checked', 'false');"
    },
    {
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 626,
      "context": "const answerButtons = document.querySelectorAll('.answer-btn');"
    },
    {
      "name": "add",
      "file": "src/uiManager.js",
      "line": 628,
      "context": "answerButtons[index].classList.add('keyboard-selected');"
    },
    {
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 629,
      "context": "answerButtons[index].setAttribute('aria-checked', 'true');"
    },
    {
      "name": "error",
      "file": "src/uiManager.js",
      "line": 633,
      "context": "console.error('Error highlighting answer:', error);"
    },
    {
      "name": "submitCurrentAnswer",
      "file": "src/uiManager.js",
      "line": 640,
      "context": "submitCurrentAnswer() {"
    },
    {
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 642,
      "context": "const answerButtons = document.querySelectorAll('.answer-btn');"
    },
    {
      "name": "click",
      "file": "src/uiManager.js",
      "line": 644,
      "context": "answerButtons[this.selectedAnswerIndex].click();"
    },
    {
      "name": "clearAnswerSelection",
      "file": "src/uiManager.js",
      "line": 652,
      "context": "clearAnswerSelection() {"
    },
    {
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 653,
      "context": "document.querySelectorAll('.answer-btn').forEach(btn => {"
    },
    {
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 653,
      "context": "document.querySelectorAll('.answer-btn').forEach(btn => {"
    },
    {
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 654,
      "context": "btn.classList.remove('keyboard-selected');"
    },
    {
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 655,
      "context": "btn.setAttribute('aria-checked', 'false');"
    },
    {
      "name": "navigate",
      "file": "src/uiManager.js",
      "line": 662,
      "context": "* @param {string} direction - Direction to navigate (up, down, left, right)"
    },
    {
      "name": "navigateMapDirection",
      "file": "src/uiManager.js",
      "line": 664,
      "context": "navigateMapDirection(direction) {"
    },
    {
      "name": "navigateDirection",
      "file": "src/uiManager.js",
      "line": 666,
      "context": "this.mapRenderer.navigateDirection(direction);"
    },
    {
      "name": "log",
      "file": "src/uiManager.js",
      "line": 668,
      "context": "console.log(`Map navigation: ${direction} (map renderer not available)`);"
    },
    {
      "name": "enterCurrentRoom",
      "file": "src/uiManager.js",
      "line": 675,
      "context": "enterCurrentRoom() {"
    },
    {
      "name": "enterCurrentRoom",
      "file": "src/uiManager.js",
      "line": 677,
      "context": "this.mapRenderer.enterCurrentRoom();"
    },
    {
      "name": "presentNewQuestion",
      "file": "src/uiManager.js",
      "line": 680,
      "context": "this.presentNewQuestion();"
    },
    {
      "name": "focusMap",
      "file": "src/uiManager.js",
      "line": 687,
      "context": "focusMap() {"
    },
    {
      "name": "focus",
      "file": "src/uiManager.js",
      "line": 689,
      "context": "this.elements.mapCanvas.focus();"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 690,
      "context": "this.showFeedback('🗺️ Map focused - Use arrow keys to navigate', 'info');"
    },
    {
      "name": "focusQuestion",
      "file": "src/uiManager.js",
      "line": 697,
      "context": "focusQuestion() {"
    },
    {
      "name": "focus",
      "file": "src/uiManager.js",
      "line": 699,
      "context": "this.elements.questionText.focus();"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 700,
      "context": "this.showFeedback('❓ Question focused - Use number keys to select answers', 'info');"
    },
    {
      "name": "showKeyboardHelp",
      "file": "src/uiManager.js",
      "line": 707,
      "context": "showKeyboardHelp() {"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 754,
      "context": "this.showFeedback(helpText.trim(), 'info', 8000);"
    },
    {
      "name": "trim",
      "file": "src/uiManager.js",
      "line": 754,
      "context": "this.showFeedback(helpText.trim(), 'info', 8000);"
    },
    {
      "name": "showQuickStats",
      "file": "src/uiManager.js",
      "line": 760,
      "context": "showQuickStats() {"
    },
    {
      "name": "getGameStatistics",
      "file": "src/uiManager.js",
      "line": 762,
      "context": "const stats = this.gameState.getGameStatistics();"
    },
    {
      "name": "toLocaleString",
      "file": "src/uiManager.js",
      "line": 766,
      "context": "🏆 Score: ${stats.finalScore.toLocaleString()}"
    },
    {
      "name": "formatTime",
      "file": "src/uiManager.js",
      "line": 769,
      "context": "⏱️ Time: ${this.gameState.formatTime(stats.totalTime)}"
    },
    {
      "name": "showTooltip",
      "file": "src/uiManager.js",
      "line": 773,
      "context": "this.showTooltip(quickStatsText.trim(), 4000);"
    },
    {
      "name": "trim",
      "file": "src/uiManager.js",
      "line": 773,
      "context": "this.showTooltip(quickStatsText.trim(), 4000);"
    },
    {
      "name": "error",
      "file": "src/uiManager.js",
      "line": 775,
      "context": "console.error('Error showing quick stats:', error);"
    },
    {
      "name": "showTooltip",
      "file": "src/uiManager.js",
      "line": 776,
      "context": "this.showTooltip('Stats not available', 2000);"
    },
    {
      "name": "toggleTimer",
      "file": "src/uiManager.js",
      "line": 783,
      "context": "toggleTimer() {"
    },
    {
      "name": "resumeTimer",
      "file": "src/uiManager.js",
      "line": 785,
      "context": "this.gameState.resumeTimer();"
    },
    {
      "name": "showTooltip",
      "file": "src/uiManager.js",
      "line": 786,
      "context": "this.showTooltip('⏱️ Timer resumed', 1500);"
    },
    {
      "name": "pauseTimer",
      "file": "src/uiManager.js",
      "line": 788,
      "context": "this.gameState.pauseTimer();"
    },
    {
      "name": "showTooltip",
      "file": "src/uiManager.js",
      "line": 789,
      "context": "this.showTooltip('⏸️ Timer paused', 1500);"
    },
    {
      "name": "game",
      "file": "src/uiManager.js",
      "line": 794,
      "context": "* Confirm and reset game (for Ctrl+Shift+R)"
    },
    {
      "name": "confirmAndResetGame",
      "file": "src/uiManager.js",
      "line": 796,
      "context": "confirmAndResetGame() {"
    },
    {
      "name": "confirm",
      "file": "src/uiManager.js",
      "line": 797,
      "context": "const confirmed = confirm('Are you sure you want to completely reset the game? This will lose all progress.');"
    },
    {
      "name": "resetGame",
      "file": "src/uiManager.js",
      "line": 799,
      "context": "this.resetGame();"
    },
    {
      "name": "showTooltip",
      "file": "src/uiManager.js",
      "line": 800,
      "context": "this.showTooltip('🔄 Game completely reset', 2000);"
    },
    {
      "name": "toggleDebugMode",
      "file": "src/uiManager.js",
      "line": 807,
      "context": "toggleDebugMode() {"
    },
    {
      "name": "showTooltip",
      "file": "src/uiManager.js",
      "line": 815,
      "context": "this.showTooltip('🔧 Debug mode enabled', 2000);"
    },
    {
      "name": "log",
      "file": "src/uiManager.js",
      "line": 816,
      "context": "console.log('Debug mode enabled - Game state:', this.gameState);"
    },
    {
      "name": "showTooltip",
      "file": "src/uiManager.js",
      "line": 818,
      "context": "this.showTooltip('🔧 Debug mode disabled', 2000);"
    },
    {
      "name": "exportSaveData",
      "file": "src/uiManager.js",
      "line": 825,
      "context": "exportSaveData() {"
    },
    {
      "name": "Error",
      "file": "src/uiManager.js",
      "line": 829,
      "context": "throw new Error('Game state not available or export method missing');"
    },
    {
      "name": "exportSaveData",
      "file": "src/uiManager.js",
      "line": 832,
      "context": "const saveData = this.gameState.exportSaveData();"
    },
    {
      "name": "Blob",
      "file": "src/uiManager.js",
      "line": 833,
      "context": "const blob = new Blob([JSON.stringify(saveData, null, 2)], { type: 'application/json' });"
    },
    {
      "name": "stringify",
      "file": "src/uiManager.js",
      "line": 833,
      "context": "const blob = new Blob([JSON.stringify(saveData, null, 2)], { type: 'application/json' });"
    },
    {
      "name": "createObjectURL",
      "file": "src/uiManager.js",
      "line": 834,
      "context": "const url = URL.createObjectURL(blob);"
    },
    {
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 836,
      "context": "const a = document.createElement('a');"
    },
    {
      "name": "toISOString",
      "file": "src/uiManager.js",
      "line": 838,
      "context": "a.download = `lobe-labyrinth-save-${new Date().toISOString().split('T')[0]}.json`;"
    },
    {
      "name": "split",
      "file": "src/uiManager.js",
      "line": 838,
      "context": "a.download = `lobe-labyrinth-save-${new Date().toISOString().split('T')[0]}.json`;"
    },
    {
      "name": "click",
      "file": "src/uiManager.js",
      "line": 839,
      "context": "a.click();"
    },
    {
      "name": "revokeObjectURL",
      "file": "src/uiManager.js",
      "line": 841,
      "context": "URL.revokeObjectURL(url);"
    },
    {
      "name": "showTooltip",
      "file": "src/uiManager.js",
      "line": 842,
      "context": "this.showTooltip('💾 Save data exported successfully', 2000);"
    },
    {
      "name": "log",
      "file": "src/uiManager.js",
      "line": 843,
      "context": "console.log('✅ Game data exported successfully');"
    },
    {
      "name": "error",
      "file": "src/uiManager.js",
      "line": 845,
      "context": "console.error('❌ Error exporting save data:', error);"
    },
    {
      "name": "showTooltip",
      "file": "src/uiManager.js",
      "line": 846,
      "context": "this.showTooltip('❌ Export failed: ' + error.message, 3000);"
    },
    {
      "name": "refreshCurrentRoom",
      "file": "src/uiManager.js",
      "line": 853,
      "context": "refreshCurrentRoom() {"
    },
    {
      "name": "updateDisplay",
      "file": "src/uiManager.js",
      "line": 855,
      "context": "this.updateDisplay();"
    },
    {
      "name": "clearQuestion",
      "file": "src/uiManager.js",
      "line": 857,
      "context": "this.clearQuestion();"
    },
    {
      "name": "showTooltip",
      "file": "src/uiManager.js",
      "line": 859,
      "context": "this.showTooltip('🔄 Room refreshed', 1500);"
    },
    {
      "name": "error",
      "file": "src/uiManager.js",
      "line": 861,
      "context": "console.error('Error refreshing room:', error);"
    },
    {
      "name": "showTooltip",
      "file": "src/uiManager.js",
      "line": 862,
      "context": "this.showTooltip('❌ Refresh failed', 2000);"
    },
    {
      "name": "cycleFocus",
      "file": "src/uiManager.js",
      "line": 869,
      "context": "cycleFocus() {"
    },
    {
      "name": "getElementById",
      "file": "src/uiManager.js",
      "line": 870,
      "context": "const mapCanvas = document.getElementById('map-canvas');"
    },
    {
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 872,
      "context": "...document.querySelectorAll('.answer-btn'),"
    },
    {
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 873,
      "context": "...document.querySelectorAll('button'),"
    },
    {
      "name": "filter",
      "file": "src/uiManager.js",
      "line": 875,
      "context": "].filter(el => el && el.style.display !== 'none');"
    },
    {
      "name": "indexOf",
      "file": "src/uiManager.js",
      "line": 879,
      "context": "const currentIndex = focusableElements.indexOf(document.activeElement);"
    },
    {
      "name": "focus",
      "file": "src/uiManager.js",
      "line": 882,
      "context": "focusableElements[nextIndex].focus();"
    },
    {
      "name": "showTooltip",
      "file": "src/uiManager.js",
      "line": 883,
      "context": "this.showTooltip(`Focus: ${focusableElements[nextIndex].tagName}`, 1000);"
    },
    {
      "name": "isInInputField",
      "file": "src/uiManager.js",
      "line": 889,
      "context": "isInInputField(target) {"
    },
    {
      "name": "setupAchievementNotifications",
      "file": "src/uiManager.js",
      "line": 896,
      "context": "setupAchievementNotifications() {"
    },
    {
      "name": "addEventListener",
      "file": "src/uiManager.js",
      "line": 899,
      "context": "this.achievementManager.addEventListener('achievementUnlocked', (event) => {"
    },
    {
      "name": "queueAchievementNotification",
      "file": "src/uiManager.js",
      "line": 900,
      "context": "this.queueAchievementNotification(event.detail);"
    },
    {
      "name": "addEventListener",
      "file": "src/uiManager.js",
      "line": 905,
      "context": "this.elements.achievementToggle.addEventListener('click', () => {"
    },
    {
      "name": "toggleAchievementGallery",
      "file": "src/uiManager.js",
      "line": 906,
      "context": "this.toggleAchievementGallery();"
    },
    {
      "name": "log",
      "file": "src/uiManager.js",
      "line": 910,
      "context": "console.log('Achievement notifications setup complete');"
    },
    {
      "name": "queueAchievementNotification",
      "file": "src/uiManager.js",
      "line": 917,
      "context": "queueAchievementNotification(achievementData) {"
    },
    {
      "name": "push",
      "file": "src/uiManager.js",
      "line": 918,
      "context": "this.achievementQueue.push(achievementData);"
    },
    {
      "name": "processAchievementQueue",
      "file": "src/uiManager.js",
      "line": 922,
      "context": "this.processAchievementQueue();"
    },
    {
      "name": "processAchievementQueue",
      "file": "src/uiManager.js",
      "line": 929,
      "context": "async processAchievementQueue() {"
    },
    {
      "name": "shift",
      "file": "src/uiManager.js",
      "line": 936,
      "context": "const achievementData = this.achievementQueue.shift();"
    },
    {
      "name": "showAchievementNotification",
      "file": "src/uiManager.js",
      "line": 938,
      "context": "await this.showAchievementNotification(achievementData);"
    },
    {
      "name": "processAchievementQueue",
      "file": "src/uiManager.js",
      "line": 942,
      "context": "this.processAchievementQueue();"
    },
    {
      "name": "showAchievementNotification",
      "file": "src/uiManager.js",
      "line": 949,
      "context": "async showAchievementNotification(achievementData) {"
    },
    {
      "name": "createAchievementNotificationElement",
      "file": "src/uiManager.js",
      "line": 955,
      "context": "notification = this.createAchievementNotificationElement();"
    },
    {
      "name": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 961,
      "context": "<div class=\"achievement-icon\">${this.escapeHtml(achievement.icon)}</div>"
    },
    {
      "name": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 964,
      "context": "<div class=\"achievement-name\">${this.escapeHtml(achievement.name)}</div>"
    },
    {
      "name": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 965,
      "context": "<div class=\"achievement-description\">${this.escapeHtml(achievement.description)}</div>"
    },
    {
      "name": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 968,
      "context": "<div class=\"achievement-rarity achievement-rarity-${this.escapeHtml(achievement.rarity)}\">"
    },
    {
      "name": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 969,
      "context": "${this.escapeHtml(achievement.rarity).toUpperCase()}"
    },
    {
      "name": "toUpperCase",
      "file": "src/uiManager.js",
      "line": 969,
      "context": "${this.escapeHtml(achievement.rarity).toUpperCase()}"
    },
    {
      "name": "animateAchievementUnlock",
      "file": "src/uiManager.js",
      "line": 980,
      "context": "await this.animationManager.animateAchievementUnlock(achievement, notification);"
    },
    {
      "name": "translateY",
      "file": "src/uiManager.js",
      "line": 983,
      "context": "notification.style.transform = 'translateY(-100%)';"
    },
    {
      "name": "translateY",
      "file": "src/uiManager.js",
      "line": 987,
      "context": "notification.style.transform = 'translateY(0)';"
    },
    {
      "name": "hideAchievementNotification",
      "file": "src/uiManager.js",
      "line": 994,
      "context": "this.hideAchievementNotification(notification);"
    },
    {
      "name": "updateAchievementStats",
      "file": "src/uiManager.js",
      "line": 998,
      "context": "this.updateAchievementStats();"
    },
    {
      "name": "hideAchievementNotification",
      "file": "src/uiManager.js",
      "line": 1004,
      "context": "hideAchievementNotification(notification) {"
    },
    {
      "name": "translateY",
      "file": "src/uiManager.js",
      "line": 1005,
      "context": "notification.style.transform = 'translateY(-100%)';"
    },
    {
      "name": "createAchievementNotificationElement",
      "file": "src/uiManager.js",
      "line": 1016,
      "context": "createAchievementNotificationElement() {"
    },
    {
      "name": "getElementById",
      "file": "src/uiManager.js",
      "line": 1017,
      "context": "let notification = document.getElementById('achievement-notification');"
    },
    {
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 1020,
      "context": "notification = document.createElement('div');"
    },
    {
      "name": "appendChild",
      "file": "src/uiManager.js",
      "line": 1025,
      "context": "document.body.appendChild(notification);"
    },
    {
      "name": "toggleAchievementGallery",
      "file": "src/uiManager.js",
      "line": 1035,
      "context": "toggleAchievementGallery() {"
    },
    {
      "name": "warn",
      "file": "src/uiManager.js",
      "line": 1038,
      "context": "console.warn('Achievement gallery element not found');"
    },
    {
      "name": "contains",
      "file": "src/uiManager.js",
      "line": 1042,
      "context": "const isVisible = gallery.classList.contains('visible');"
    },
    {
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 1045,
      "context": "gallery.classList.remove('visible');"
    },
    {
      "name": "populateAchievementGallery",
      "file": "src/uiManager.js",
      "line": 1047,
      "context": "this.populateAchievementGallery();"
    },
    {
      "name": "add",
      "file": "src/uiManager.js",
      "line": 1048,
      "context": "gallery.classList.add('visible');"
    },
    {
      "name": "populateAchievementGallery",
      "file": "src/uiManager.js",
      "line": 1055,
      "context": "populateAchievementGallery() {"
    },
    {
      "name": "getAllAchievements",
      "file": "src/uiManager.js",
      "line": 1060,
      "context": "const achievements = this.achievementManager.getAllAchievements();"
    },
    {
      "name": "getAchievementStats",
      "file": "src/uiManager.js",
      "line": 1061,
      "context": "const stats = this.achievementManager.getAchievementStats();"
    },
    {
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 1065,
      "context": "achievements.forEach(achievement => {"
    },
    {
      "name": "push",
      "file": "src/uiManager.js",
      "line": 1069,
      "context": "categories[achievement.category].push(achievement);"
    },
    {
      "name": "unlocked",
      "file": "src/uiManager.js",
      "line": 1077,
      "context": "${stats.unlocked}/${stats.total} unlocked (${stats.percentage}%)"
    },
    {
      "name": "closest",
      "file": "src/uiManager.js",
      "line": 1081,
      "context": "<button class=\"achievement-close-btn\" onclick=\"this.closest('.achievement-gallery').classList.remove('visible')\">×</button>"
    },
    {
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 1081,
      "context": "<button class=\"achievement-close-btn\" onclick=\"this.closest('.achievement-gallery').classList.remove('visible')\">×</button>"
    },
    {
      "name": "keys",
      "file": "src/uiManager.js",
      "line": 1087,
      "context": "Object.keys(categories).forEach(categoryName => {"
    },
    {
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 1087,
      "context": "Object.keys(categories).forEach(categoryName => {"
    },
    {
      "name": "charAt",
      "file": "src/uiManager.js",
      "line": 1094,
      "context": "${categoryName.charAt(0).toUpperCase() + categoryName.slice(1)}"
    },
    {
      "name": "toUpperCase",
      "file": "src/uiManager.js",
      "line": 1094,
      "context": "${categoryName.charAt(0).toUpperCase() + categoryName.slice(1)}"
    },
    {
      "name": "slice",
      "file": "src/uiManager.js",
      "line": 1094,
      "context": "${categoryName.charAt(0).toUpperCase() + categoryName.slice(1)}"
    },
    {
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 1100,
      "context": "categoryAchievements.forEach(achievement => {"
    },
    {
      "name": "max",
      "file": "src/uiManager.js",
      "line": 1101,
      "context": "const progressWidth = Math.max(achievement.progressPercentage, achievement.unlocked ? 100 : 0);"
    },
    {
      "name": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 1105,
      "context": "<div class=\"achievement-card ${unlockClass} achievement-rarity-${this.escapeHtml(achievement.rarity)}\">"
    },
    {
      "name": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 1106,
      "context": "<div class=\"achievement-icon\">${this.escapeHtml(achievement.icon)}</div>"
    },
    {
      "name": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 1108,
      "context": "<div class=\"achievement-name\">${this.escapeHtml(achievement.name)}</div>"
    },
    {
      "name": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 1109,
      "context": "<div class=\"achievement-description\">${this.escapeHtml(achievement.description)}</div>"
    },
    {
      "name": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 1115,
      "context": "<span class=\"achievement-rarity\">${this.escapeHtml(achievement.rarity)}</span>"
    },
    {
      "name": "updateAchievementStats",
      "file": "src/uiManager.js",
      "line": 1136,
      "context": "updateAchievementStats() {"
    },
    {
      "name": "getAchievementStats",
      "file": "src/uiManager.js",
      "line": 1141,
      "context": "const stats = this.achievementManager.getAchievementStats();"
    },
    {
      "name": "updateDisplay",
      "file": "src/uiManager.js",
      "line": 1155,
      "context": "async updateDisplay() {"
    },
    {
      "name": "getStatistics",
      "file": "src/uiManager.js",
      "line": 1158,
      "context": "const stats = this.gameState.getStatistics();"
    },
    {
      "name": "updateRoomInfo",
      "file": "src/uiManager.js",
      "line": 1162,
      "context": "await this.updateRoomInfo();"
    },
    {
      "name": "updateScoreDisplay",
      "file": "src/uiManager.js",
      "line": 1163,
      "context": "await this.updateScoreDisplay();"
    },
    {
      "name": "updateNavigationOptions",
      "file": "src/uiManager.js",
      "line": 1164,
      "context": "await this.updateNavigationOptions();"
    },
    {
      "name": "updateGameControls",
      "file": "src/uiManager.js",
      "line": 1165,
      "context": "this.updateGameControls();"
    },
    {
      "name": "updateRoomInfo",
      "file": "src/uiManager.js",
      "line": 1169,
      "context": "async updateRoomInfo() {"
    },
    {
      "name": "getRoom",
      "file": "src/uiManager.js",
      "line": 1171,
      "context": "const currentRoom = await this.dataLoader.getRoom(this.gameState.currentRoomId);"
    },
    {
      "name": "map",
      "file": "src/uiManager.js",
      "line": 1185,
      "context": ".map(roomId => {"
    },
    {
      "name": "has",
      "file": "src/uiManager.js",
      "line": 1186,
      "context": "const isUnlocked = this.gameState.unlockedRooms.has(roomId);"
    },
    {
      "name": "join",
      "file": "src/uiManager.js",
      "line": 1192,
      "context": ".join(', ');"
    },
    {
      "name": "error",
      "file": "src/uiManager.js",
      "line": 1197,
      "context": "console.error('Failed to update room info:', error);"
    },
    {
      "name": "updateScoreDisplay",
      "file": "src/uiManager.js",
      "line": 1204,
      "context": "async updateScoreDisplay() {"
    },
    {
      "name": "getStatistics",
      "file": "src/uiManager.js",
      "line": 1205,
      "context": "const stats = this.gameState.getStatistics();"
    },
    {
      "name": "abs",
      "file": "src/uiManager.js",
      "line": 1212,
      "context": "if (Math.abs(scoreChange) > 0 && this.previousScore !== 0) {"
    },
    {
      "name": "log",
      "file": "src/uiManager.js",
      "line": 1213,
      "context": "console.log(`Animating score: ${this.previousScore} → ${stats.score}`);"
    },
    {
      "name": "animateScoreIncrease",
      "file": "src/uiManager.js",
      "line": 1214,
      "context": "await this.animationManager.animateScoreIncrease("
    },
    {
      "name": "announceToScreenReader",
      "file": "src/uiManager.js",
      "line": 1222,
      "context": "this.announceToScreenReader(`Great! Score increased by ${scoreChange} points. Total score: ${stats.score}`);"
    },
    {
      "name": "announceToScreenReader",
      "file": "src/uiManager.js",
      "line": 1224,
      "context": "this.announceToScreenReader(`Score increased by ${scoreChange} points. Total score: ${stats.score}`);"
    },
    {
      "name": "warn",
      "file": "src/uiManager.js",
      "line": 1231,
      "context": "console.warn('Score animation failed, using direct update:', error);"
    },
    {
      "name": "abs",
      "file": "src/uiManager.js",
      "line": 1239,
      "context": "if (Math.abs(scoreChange) >= 50 && this.previousScore !== 0) {"
    },
    {
      "name": "announceToScreenReader",
      "file": "src/uiManager.js",
      "line": 1240,
      "context": "this.announceToScreenReader(`Score updated: ${stats.score} points`);"
    },
    {
      "name": "updateProgressIndicators",
      "file": "src/uiManager.js",
      "line": 1255,
      "context": "this.updateProgressIndicators();"
    },
    {
      "name": "updateProgressIndicators",
      "file": "src/uiManager.js",
      "line": 1261,
      "context": "updateProgressIndicators() {"
    },
    {
      "name": "getGameStatistics",
      "file": "src/uiManager.js",
      "line": 1263,
      "context": "const stats = this.gameState.getGameStatistics();"
    },
    {
      "name": "round",
      "file": "src/uiManager.js",
      "line": 1266,
      "context": "const overallProgress = Math.round((stats.roomsExploredPercent + stats.accuracyPercent) / 2);"
    },
    {
      "name": "updateProgressBar",
      "file": "src/uiManager.js",
      "line": 1267,
      "context": "this.updateProgressBar('overall', overallProgress);"
    },
    {
      "name": "updateProgressBar",
      "file": "src/uiManager.js",
      "line": 1270,
      "context": "this.updateProgressBar('rooms', stats.roomsExploredPercent);"
    },
    {
      "name": "updateProgressBar",
      "file": "src/uiManager.js",
      "line": 1273,
      "context": "this.updateProgressBar('accuracy', stats.accuracyPercent);"
    },
    {
      "name": "getTimeInCurrentRoom",
      "file": "src/uiManager.js",
      "line": 1277,
      "context": "const timeInCurrentRoom = this.gameState.getTimeInCurrentRoom();"
    },
    {
      "name": "formatTime",
      "file": "src/uiManager.js",
      "line": 1278,
      "context": "this.elements.playTimeDisplay.textContent = this.gameState.formatTime(timeInCurrentRoom);"
    },
    {
      "name": "error",
      "file": "src/uiManager.js",
      "line": 1282,
      "context": "console.error('Error updating progress indicators:', error);"
    },
    {
      "name": "type",
      "file": "src/uiManager.js",
      "line": 1288,
      "context": "* @param {string} type - Progress bar type (overall, rooms, accuracy)"
    },
    {
      "name": "percentage",
      "file": "src/uiManager.js",
      "line": 1289,
      "context": "* @param {number} percentage - Progress percentage (0-100)"
    },
    {
      "name": "updateProgressBar",
      "file": "src/uiManager.js",
      "line": 1291,
      "context": "updateProgressBar(type, percentage) {"
    },
    {
      "name": "max",
      "file": "src/uiManager.js",
      "line": 1297,
      "context": "const clampedPercentage = Math.max(0, Math.min(100, percentage || 0));"
    },
    {
      "name": "min",
      "file": "src/uiManager.js",
      "line": 1297,
      "context": "const clampedPercentage = Math.max(0, Math.min(100, percentage || 0));"
    },
    {
      "name": "add",
      "file": "src/uiManager.js",
      "line": 1304,
      "context": "fillElement.classList.add('completed');"
    },
    {
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 1306,
      "context": "fillElement.classList.remove('completed');"
    },
    {
      "name": "updateNavigationOptions",
      "file": "src/uiManager.js",
      "line": 1314,
      "context": "async updateNavigationOptions() {"
    },
    {
      "name": "getAvailableRooms",
      "file": "src/uiManager.js",
      "line": 1318,
      "context": "const availableRooms = await this.gameState.getAvailableRooms();"
    },
    {
      "name": "all",
      "file": "src/uiManager.js",
      "line": 1325,
      "context": "const roomButtons = await Promise.all("
    },
    {
      "name": "map",
      "file": "src/uiManager.js",
      "line": 1326,
      "context": "availableRooms.map(async (roomId) => {"
    },
    {
      "name": "async",
      "file": "src/uiManager.js",
      "line": 1326,
      "context": "availableRooms.map(async (roomId) => {"
    },
    {
      "name": "getRoom",
      "file": "src/uiManager.js",
      "line": 1327,
      "context": "const room = await this.dataLoader.getRoom(roomId);"
    },
    {
      "name": "moveToRoom",
      "file": "src/uiManager.js",
      "line": 1329,
      "context": "return `<button class=\"room-nav-btn\" onclick=\"uiManager.moveToRoom('${roomId}')\">${roomName}</button>`;"
    },
    {
      "name": "join",
      "file": "src/uiManager.js",
      "line": 1335,
      "context": "<div class=\"room-nav-buttons\">${roomButtons.join('')}</div>"
    },
    {
      "name": "error",
      "file": "src/uiManager.js",
      "line": 1339,
      "context": "console.error('Failed to update navigation options:', error);"
    },
    {
      "name": "updateGameControls",
      "file": "src/uiManager.js",
      "line": 1346,
      "context": "updateGameControls() {"
    },
    {
      "name": "presentNewQuestion",
      "file": "src/uiManager.js",
      "line": 1364,
      "context": "async presentNewQuestion() {"
    },
    {
      "name": "getRoom",
      "file": "src/uiManager.js",
      "line": 1367,
      "context": "const currentRoom = await this.dataLoader.getRoom(this.gameState.currentRoomId);"
    },
    {
      "name": "presentQuestion",
      "file": "src/uiManager.js",
      "line": 1370,
      "context": "await this.quizEngine.presentQuestion(null, category);"
    },
    {
      "name": "updateGameControls",
      "file": "src/uiManager.js",
      "line": 1371,
      "context": "this.updateGameControls();"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1374,
      "context": "this.showFeedback(`Failed to present question: ${error.message}`, 'error');"
    },
    {
      "name": "displayQuestion",
      "file": "src/uiManager.js",
      "line": 1381,
      "context": "displayQuestion(questionData) {"
    },
    {
      "name": "displayAnswerOptions",
      "file": "src/uiManager.js",
      "line": 1406,
      "context": "this.displayAnswerOptions(questionData);"
    },
    {
      "name": "updateGameControls",
      "file": "src/uiManager.js",
      "line": 1417,
      "context": "this.updateGameControls();"
    },
    {
      "name": "clearFeedback",
      "file": "src/uiManager.js",
      "line": 1418,
      "context": "this.clearFeedback();"
    },
    {
      "name": "displayAnswerOptions",
      "file": "src/uiManager.js",
      "line": 1424,
      "context": "displayAnswerOptions(questionData) {"
    },
    {
      "name": "clearAnswerButtonListeners",
      "file": "src/uiManager.js",
      "line": 1428,
      "context": "this.clearAnswerButtonListeners();"
    },
    {
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 1431,
      "context": "this.elements.answerButtons.setAttribute('role', 'radiogroup');"
    },
    {
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 1432,
      "context": "this.elements.answerButtons.setAttribute('aria-label', 'Answer options');"
    },
    {
      "name": "map",
      "file": "src/uiManager.js",
      "line": 1434,
      "context": "const buttonsHtml = questionData.answers.map((answer, index) =>"
    },
    {
      "name": "fromCharCode",
      "file": "src/uiManager.js",
      "line": 1441,
      "context": "aria-label=\"Option ${String.fromCharCode(65 + index)}: ${this.escapeHtml(answer)}\""
    },
    {
      "name": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 1441,
      "context": "aria-label=\"Option ${String.fromCharCode(65 + index)}: ${this.escapeHtml(answer)}\""
    },
    {
      "name": "fromCharCode",
      "file": "src/uiManager.js",
      "line": 1443,
      "context": "<span class=\"answer-letter\" aria-hidden=\"true\">${String.fromCharCode(65 + index)}.</span>"
    },
    {
      "name": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 1444,
      "context": "<span class=\"answer-text\">${this.escapeHtml(answer)}</span>"
    },
    {
      "name": "join",
      "file": "src/uiManager.js",
      "line": 1446,
      "context": ").join('');"
    },
    {
      "name": "setupAnswerButtonListeners",
      "file": "src/uiManager.js",
      "line": 1455,
      "context": "this.setupAnswerButtonListeners();"
    },
    {
      "name": "clearAnswerButtonListeners",
      "file": "src/uiManager.js",
      "line": 1461,
      "context": "clearAnswerButtonListeners() {"
    },
    {
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 1463,
      "context": "this.answerButtonListeners.forEach(listener => {"
    },
    {
      "name": "removeEventListener",
      "file": "src/uiManager.js",
      "line": 1464,
      "context": "listener.element.removeEventListener(listener.event, listener.handler);"
    },
    {
      "name": "setupAnswerButtonListeners",
      "file": "src/uiManager.js",
      "line": 1473,
      "context": "setupAnswerButtonListeners() {"
    },
    {
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 1474,
      "context": "const buttons = document.querySelectorAll('.answer-btn');"
    },
    {
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 1476,
      "context": "buttons.forEach((button, index) => {"
    },
    {
      "name": "selectAnswer",
      "file": "src/uiManager.js",
      "line": 1478,
      "context": "const clickHandler = () => this.selectAnswer(index);"
    },
    {
      "name": "addEventListener",
      "file": "src/uiManager.js",
      "line": 1479,
      "context": "button.addEventListener('click', clickHandler);"
    },
    {
      "name": "push",
      "file": "src/uiManager.js",
      "line": 1480,
      "context": "this.answerButtonListeners.push({"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 1491,
      "context": "e.preventDefault();"
    },
    {
      "name": "focusAnswerButton",
      "file": "src/uiManager.js",
      "line": 1493,
      "context": "this.focusAnswerButton(nextIndex);"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 1497,
      "context": "e.preventDefault();"
    },
    {
      "name": "focusAnswerButton",
      "file": "src/uiManager.js",
      "line": 1499,
      "context": "this.focusAnswerButton(prevIndex);"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 1503,
      "context": "e.preventDefault();"
    },
    {
      "name": "selectAnswer",
      "file": "src/uiManager.js",
      "line": 1504,
      "context": "this.selectAnswer(index);"
    },
    {
      "name": "addEventListener",
      "file": "src/uiManager.js",
      "line": 1508,
      "context": "button.addEventListener('keydown', keyHandler);"
    },
    {
      "name": "push",
      "file": "src/uiManager.js",
      "line": 1509,
      "context": "this.answerButtonListeners.push({"
    },
    {
      "name": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 1520,
      "context": "escapeHtml(text) {"
    },
    {
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 1521,
      "context": "const div = document.createElement('div');"
    },
    {
      "name": "buttons",
      "file": "src/uiManager.js",
      "line": 1527,
      "context": "* Setup keyboard navigation for answer buttons (radio group pattern)"
    },
    {
      "name": "setupAnswerButtonKeyNavigation",
      "file": "src/uiManager.js",
      "line": 1530,
      "context": "setupAnswerButtonKeyNavigation() {"
    },
    {
      "name": "warn",
      "file": "src/uiManager.js",
      "line": 1531,
      "context": "console.warn('setupAnswerButtonKeyNavigation is deprecated. Use setupAnswerButtonListeners instead.');"
    },
    {
      "name": "focusAnswerButton",
      "file": "src/uiManager.js",
      "line": 1539,
      "context": "focusAnswerButton(index) {"
    },
    {
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 1540,
      "context": "const buttons = document.querySelectorAll('.answer-btn');"
    },
    {
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 1542,
      "context": "buttons.forEach((btn, i) => {"
    },
    {
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 1544,
      "context": "btn.setAttribute('aria-checked', i === index ? 'true' : 'false');"
    },
    {
      "name": "focus",
      "file": "src/uiManager.js",
      "line": 1546,
      "context": "btn.focus();"
    },
    {
      "name": "selectAnswer",
      "file": "src/uiManager.js",
      "line": 1554,
      "context": "async selectAnswer(answerIndex) {"
    },
    {
      "name": "checkQuestionActive",
      "file": "src/uiManager.js",
      "line": 1555,
      "context": "if (!this.checkQuestionActive() || !this.currentQuestion) return;"
    },
    {
      "name": "warn",
      "file": "src/uiManager.js",
      "line": 1559,
      "context": "console.warn('Answer already being processed, ignoring click');"
    },
    {
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 1565,
      "context": "const answerButtons = document.querySelectorAll('.answer-btn');"
    },
    {
      "name": "disableAnswerButtons",
      "file": "src/uiManager.js",
      "line": 1569,
      "context": "this.disableAnswerButtons();"
    },
    {
      "name": "validateAnswer",
      "file": "src/uiManager.js",
      "line": 1572,
      "context": "const result = await this.quizEngine.validateAnswer(answerIndex);"
    },
    {
      "name": "animateAnswerFeedback",
      "file": "src/uiManager.js",
      "line": 1576,
      "context": "await this.animationManager.animateAnswerFeedback(clickedButton, result.isCorrect);"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1580,
      "context": "this.showFeedback(`Error validating answer: ${error.message}`, 'error');"
    },
    {
      "name": "enableAnswerButtons",
      "file": "src/uiManager.js",
      "line": 1581,
      "context": "this.enableAnswerButtons();"
    },
    {
      "name": "showHint",
      "file": "src/uiManager.js",
      "line": 1588,
      "context": "showHint() {"
    },
    {
      "name": "checkQuestionActive",
      "file": "src/uiManager.js",
      "line": 1590,
      "context": "if (this.checkQuestionActive() && this.quizEngine && this.currentQuestion) {"
    },
    {
      "name": "showQuestionHint",
      "file": "src/uiManager.js",
      "line": 1591,
      "context": "this.showQuestionHint();"
    },
    {
      "name": "showSmartHint",
      "file": "src/uiManager.js",
      "line": 1596,
      "context": "this.showSmartHint();"
    },
    {
      "name": "showQuestionHint",
      "file": "src/uiManager.js",
      "line": 1602,
      "context": "showQuestionHint() {"
    },
    {
      "name": "getHint",
      "file": "src/uiManager.js",
      "line": 1603,
      "context": "const hint = this.quizEngine.getHint();"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1605,
      "context": "this.showFeedback(`💡 Hint: ${hint}`, 'info');"
    },
    {
      "name": "generateQuestionSmartHint",
      "file": "src/uiManager.js",
      "line": 1608,
      "context": "const smartHint = this.generateQuestionSmartHint();"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1609,
      "context": "this.showFeedback(`💡 Smart Hint: ${smartHint}`, 'info');"
    },
    {
      "name": "generateQuestionSmartHint",
      "file": "src/uiManager.js",
      "line": 1616,
      "context": "generateQuestionSmartHint() {"
    },
    {
      "name": "toLowerCase",
      "file": "src/uiManager.js",
      "line": 1652,
      "context": "const categoryHint = categoryHints[category.toLowerCase()] || categoryHints['general'];"
    },
    {
      "name": "floor",
      "file": "src/uiManager.js",
      "line": 1654,
      "context": "const randomDifficultyHint = difficultyHints[Math.floor(Math.random() * difficultyHints.length)];"
    },
    {
      "name": "random",
      "file": "src/uiManager.js",
      "line": 1654,
      "context": "const randomDifficultyHint = difficultyHints[Math.floor(Math.random() * difficultyHints.length)];"
    },
    {
      "name": "showSmartHint",
      "file": "src/uiManager.js",
      "line": 1662,
      "context": "showSmartHint() {"
    },
    {
      "name": "getGameStatistics",
      "file": "src/uiManager.js",
      "line": 1663,
      "context": "const stats = this.gameState.getGameStatistics();"
    },
    {
      "name": "getTimeInCurrentRoom",
      "file": "src/uiManager.js",
      "line": 1667,
      "context": "const isStuck = this.gameState.getTimeInCurrentRoom() > 120000; // 2 minutes"
    },
    {
      "name": "getNewPlayerHints",
      "file": "src/uiManager.js",
      "line": 1672,
      "context": "hint = this.getNewPlayerHints();"
    },
    {
      "name": "getLowAccuracyHints",
      "file": "src/uiManager.js",
      "line": 1674,
      "context": "hint = this.getLowAccuracyHints();"
    },
    {
      "name": "getStuckPlayerHints",
      "file": "src/uiManager.js",
      "line": 1676,
      "context": "hint = this.getStuckPlayerHints();"
    },
    {
      "name": "getNavigationHints",
      "file": "src/uiManager.js",
      "line": 1678,
      "context": "hint = this.getNavigationHints();"
    },
    {
      "name": "getGeneralGameplayHints",
      "file": "src/uiManager.js",
      "line": 1680,
      "context": "hint = this.getGeneralGameplayHints();"
    },
    {
      "name": "showTooltip",
      "file": "src/uiManager.js",
      "line": 1683,
      "context": "this.showTooltip(`💡 Smart Tip: ${hint}`, 4000);"
    },
    {
      "name": "getNewPlayerHints",
      "file": "src/uiManager.js",
      "line": 1689,
      "context": "getNewPlayerHints() {"
    },
    {
      "name": "rooms",
      "file": "src/uiManager.js",
      "line": 1691,
      "context": "'Welcome! Click on connected rooms (orange) to explore the castle.',"
    },
    {
      "name": "floor",
      "file": "src/uiManager.js",
      "line": 1700,
      "context": "return hints[Math.floor(Math.random() * hints.length)];"
    },
    {
      "name": "random",
      "file": "src/uiManager.js",
      "line": 1700,
      "context": "return hints[Math.floor(Math.random() * hints.length)];"
    },
    {
      "name": "getLowAccuracyHints",
      "file": "src/uiManager.js",
      "line": 1706,
      "context": "getLowAccuracyHints() {"
    },
    {
      "name": "button",
      "file": "src/uiManager.js",
      "line": 1709,
      "context": "'Use the hint button (H) when you\\'re unsure.',"
    },
    {
      "name": "floor",
      "file": "src/uiManager.js",
      "line": 1717,
      "context": "return hints[Math.floor(Math.random() * hints.length)];"
    },
    {
      "name": "random",
      "file": "src/uiManager.js",
      "line": 1717,
      "context": "return hints[Math.floor(Math.random() * hints.length)];"
    },
    {
      "name": "getStuckPlayerHints",
      "file": "src/uiManager.js",
      "line": 1723,
      "context": "getStuckPlayerHints() {"
    },
    {
      "name": "floor",
      "file": "src/uiManager.js",
      "line": 1734,
      "context": "return hints[Math.floor(Math.random() * hints.length)];"
    },
    {
      "name": "random",
      "file": "src/uiManager.js",
      "line": 1734,
      "context": "return hints[Math.floor(Math.random() * hints.length)];"
    },
    {
      "name": "getNavigationHints",
      "file": "src/uiManager.js",
      "line": 1740,
      "context": "getNavigationHints() {"
    },
    {
      "name": "floor",
      "file": "src/uiManager.js",
      "line": 1751,
      "context": "return hints[Math.floor(Math.random() * hints.length)];"
    },
    {
      "name": "random",
      "file": "src/uiManager.js",
      "line": 1751,
      "context": "return hints[Math.floor(Math.random() * hints.length)];"
    },
    {
      "name": "getGeneralGameplayHints",
      "file": "src/uiManager.js",
      "line": 1757,
      "context": "getGeneralGameplayHints() {"
    },
    {
      "name": "stats",
      "file": "src/uiManager.js",
      "line": 1762,
      "context": "'Track your progress with the quick stats (F2).',"
    },
    {
      "name": "floor",
      "file": "src/uiManager.js",
      "line": 1768,
      "context": "return hints[Math.floor(Math.random() * hints.length)];"
    },
    {
      "name": "random",
      "file": "src/uiManager.js",
      "line": 1768,
      "context": "return hints[Math.floor(Math.random() * hints.length)];"
    },
    {
      "name": "skipQuestion",
      "file": "src/uiManager.js",
      "line": 1774,
      "context": "skipQuestion() {"
    },
    {
      "name": "checkQuestionActive",
      "file": "src/uiManager.js",
      "line": 1775,
      "context": "if (!this.checkQuestionActive() || !this.quizEngine) return;"
    },
    {
      "name": "skipQuestion",
      "file": "src/uiManager.js",
      "line": 1777,
      "context": "const result = this.quizEngine.skipQuestion();"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1779,
      "context": "this.showFeedback(`Question skipped. Penalty: ${Math.abs(result.pointsEarned)} points`, 'warning');"
    },
    {
      "name": "abs",
      "file": "src/uiManager.js",
      "line": 1779,
      "context": "this.showFeedback(`Question skipped. Penalty: ${Math.abs(result.pointsEarned)} points`, 'warning');"
    },
    {
      "name": "clearQuestion",
      "file": "src/uiManager.js",
      "line": 1780,
      "context": "this.clearQuestion();"
    },
    {
      "name": "moveToRoom",
      "file": "src/uiManager.js",
      "line": 1787,
      "context": "async moveToRoom(roomId) {"
    },
    {
      "name": "moveToRoom",
      "file": "src/uiManager.js",
      "line": 1789,
      "context": "await this.gameState.moveToRoom(roomId);"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1792,
      "context": "this.showFeedback(`Cannot move to ${roomId}: ${error.message}`, 'error');"
    },
    {
      "name": "handleRoomChange",
      "file": "src/uiManager.js",
      "line": 1799,
      "context": "async handleRoomChange(data) {"
    },
    {
      "name": "log",
      "file": "src/uiManager.js",
      "line": 1800,
      "context": "console.log(`Room changed: ${data.from} -> ${data.to}`);"
    },
    {
      "name": "updateRoomInfo",
      "file": "src/uiManager.js",
      "line": 1801,
      "context": "await this.updateRoomInfo();"
    },
    {
      "name": "updateNavigationOptions",
      "file": "src/uiManager.js",
      "line": 1802,
      "context": "await this.updateNavigationOptions();"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1803,
      "context": "this.showFeedback(`Moved to ${data.room.name}`, 'success');"
    },
    {
      "name": "handleAnswerValidated",
      "file": "src/uiManager.js",
      "line": 1809,
      "context": "handleAnswerValidated(data) {"
    },
    {
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 1810,
      "context": "const answerButtons = document.querySelectorAll('.answer-btn');"
    },
    {
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 1813,
      "context": "answerButtons.forEach((btn, index) => {"
    },
    {
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 1814,
      "context": "btn.classList.remove('answer-correct', 'answer-incorrect');"
    },
    {
      "name": "add",
      "file": "src/uiManager.js",
      "line": 1817,
      "context": "btn.classList.add('answer-correct');"
    },
    {
      "name": "add",
      "file": "src/uiManager.js",
      "line": 1819,
      "context": "btn.classList.add('answer-incorrect');"
    },
    {
      "name": "points",
      "file": "src/uiManager.js",
      "line": 1825,
      "context": "? `Correct! +${data.pointsEarned} points (${data.timeBonus} time bonus)`"
    },
    {
      "name": "fromCharCode",
      "file": "src/uiManager.js",
      "line": 1826,
      "context": ": `Incorrect. The correct answer was ${String.fromCharCode(65 + data.correctAnswer)}.`;"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1828,
      "context": "this.showFeedback(feedback, data.isCorrect ? 'success' : 'error');"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1832,
      "context": "this.showFeedback(`💡 ${data.explanation}`, 'info');"
    },
    {
      "name": "updateScoreDisplay",
      "file": "src/uiManager.js",
      "line": 1837,
      "context": "this.updateScoreDisplay();"
    },
    {
      "name": "clearQuestion",
      "file": "src/uiManager.js",
      "line": 1841,
      "context": "this.clearQuestion();"
    },
    {
      "name": "handleQuestionAnswered",
      "file": "src/uiManager.js",
      "line": 1848,
      "context": "handleQuestionAnswered(data) {"
    },
    {
      "name": "log",
      "file": "src/uiManager.js",
      "line": 1852,
      "context": "console.log('Question answered in GameState:', data);"
    },
    {
      "name": "updateScoreDisplay",
      "file": "src/uiManager.js",
      "line": 1855,
      "context": "this.updateScoreDisplay();"
    },
    {
      "name": "updateNavigationOptions",
      "file": "src/uiManager.js",
      "line": 1860,
      "context": "this.updateNavigationOptions();"
    },
    {
      "name": "updateTimer",
      "file": "src/uiManager.js",
      "line": 1868,
      "context": "updateTimer(data) {"
    },
    {
      "name": "ceil",
      "file": "src/uiManager.js",
      "line": 1884,
      "context": "const seconds = Math.ceil(data.timeRemaining / 1000);"
    },
    {
      "name": "announceToScreenReader",
      "file": "src/uiManager.js",
      "line": 1903,
      "context": "this.announceToScreenReader('10 seconds remaining', 'assertive');"
    },
    {
      "name": "announceToScreenReader",
      "file": "src/uiManager.js",
      "line": 1906,
      "context": "this.announceToScreenReader('5 seconds remaining', 'assertive');"
    },
    {
      "name": "announceToScreenReader",
      "file": "src/uiManager.js",
      "line": 1909,
      "context": "this.announceToScreenReader('1 second remaining', 'assertive');"
    },
    {
      "name": "handleTimeUp",
      "file": "src/uiManager.js",
      "line": 1920,
      "context": "handleTimeUp(data) {"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1921,
      "context": "this.showFeedback('⏰ Time\\'s up! No points awarded.', 'warning');"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1925,
      "context": "this.showFeedback(`💡 ${data.explanation}`, 'info');"
    },
    {
      "name": "clearQuestion",
      "file": "src/uiManager.js",
      "line": 1930,
      "context": "this.clearQuestion();"
    },
    {
      "name": "handleGameCompleted",
      "file": "src/uiManager.js",
      "line": 1937,
      "context": "handleGameCompleted(data) {"
    },
    {
      "name": "log",
      "file": "src/uiManager.js",
      "line": 1938,
      "context": "console.log('Game completed:', data);"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1941,
      "context": "this.showFeedback(`🎉 Congratulations! Game completed!`, 'success');"
    },
    {
      "name": "showVictoryScreen",
      "file": "src/uiManager.js",
      "line": 1945,
      "context": "this.showVictoryScreen(data);"
    },
    {
      "name": "saveGame",
      "file": "src/uiManager.js",
      "line": 1952,
      "context": "saveGame() {"
    },
    {
      "name": "saveGame",
      "file": "src/uiManager.js",
      "line": 1953,
      "context": "const success = this.gameState.saveGame();"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1955,
      "context": "this.showFeedback('Game saved successfully!', 'success');"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1957,
      "context": "this.showFeedback('Failed to save game.', 'error');"
    },
    {
      "name": "loadGame",
      "file": "src/uiManager.js",
      "line": 1964,
      "context": "loadGame() {"
    },
    {
      "name": "loadGame",
      "file": "src/uiManager.js",
      "line": 1965,
      "context": "const success = this.gameState.loadGame();"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1967,
      "context": "this.showFeedback('Game loaded successfully!', 'success');"
    },
    {
      "name": "updateDisplay",
      "file": "src/uiManager.js",
      "line": 1968,
      "context": "this.updateDisplay();"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1970,
      "context": "this.showFeedback('No saved game found.', 'info');"
    },
    {
      "name": "resetGame",
      "file": "src/uiManager.js",
      "line": 1977,
      "context": "resetGame() {"
    },
    {
      "name": "confirm",
      "file": "src/uiManager.js",
      "line": 1978,
      "context": "if (confirm('Are you sure you want to reset the game? All progress will be lost.')) {"
    },
    {
      "name": "resetGame",
      "file": "src/uiManager.js",
      "line": 1979,
      "context": "this.gameState.resetGame();"
    },
    {
      "name": "clearQuestion",
      "file": "src/uiManager.js",
      "line": 1980,
      "context": "this.clearQuestion();"
    },
    {
      "name": "updateDisplay",
      "file": "src/uiManager.js",
      "line": 1981,
      "context": "this.updateDisplay();"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1982,
      "context": "this.showFeedback('Game reset successfully!', 'info');"
    },
    {
      "name": "clearQuestion",
      "file": "src/uiManager.js",
      "line": 1989,
      "context": "clearQuestion() {"
    },
    {
      "name": "updateGameControls",
      "file": "src/uiManager.js",
      "line": 2005,
      "context": "this.updateGameControls();"
    },
    {
      "name": "disableAnswerButtons",
      "file": "src/uiManager.js",
      "line": 2011,
      "context": "disableAnswerButtons() {"
    },
    {
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 2012,
      "context": "const buttons = document.querySelectorAll('.answer-btn');"
    },
    {
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 2013,
      "context": "buttons.forEach(btn => btn.disabled = true);"
    },
    {
      "name": "enableAnswerButtons",
      "file": "src/uiManager.js",
      "line": 2019,
      "context": "enableAnswerButtons() {"
    },
    {
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 2020,
      "context": "const buttons = document.querySelectorAll('.answer-btn');"
    },
    {
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 2021,
      "context": "buttons.forEach(btn => btn.disabled = false);"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2027,
      "context": "showFeedback(message, type = 'info') {"
    },
    {
      "name": "clearFeedback",
      "file": "src/uiManager.js",
      "line": 2041,
      "context": "this.clearFeedback();"
    },
    {
      "name": "clearFeedback",
      "file": "src/uiManager.js",
      "line": 2049,
      "context": "clearFeedback() {"
    },
    {
      "name": "getUIState",
      "file": "src/uiManager.js",
      "line": 2058,
      "context": "getUIState() {"
    },
    {
      "name": "keys",
      "file": "src/uiManager.js",
      "line": 2062,
      "context": "elementsFound: Object.keys(this.elements).filter(key => this.elements[key] !== null)"
    },
    {
      "name": "filter",
      "file": "src/uiManager.js",
      "line": 2062,
      "context": "elementsFound: Object.keys(this.elements).filter(key => this.elements[key] !== null)"
    },
    {
      "name": "showVictoryScreen",
      "file": "src/uiManager.js",
      "line": 2069,
      "context": "showVictoryScreen(data) {"
    },
    {
      "name": "error",
      "file": "src/uiManager.js",
      "line": 2071,
      "context": "console.error('Victory screen element not found');"
    },
    {
      "name": "getGameStatistics",
      "file": "src/uiManager.js",
      "line": 2077,
      "context": "const stats = this.gameState.getGameStatistics();"
    },
    {
      "name": "updateVictoryScreenContent",
      "file": "src/uiManager.js",
      "line": 2080,
      "context": "this.updateVictoryScreenContent(stats, data);"
    },
    {
      "name": "add",
      "file": "src/uiManager.js",
      "line": 2084,
      "context": "this.elements.victoryScreen.classList.add('show');"
    },
    {
      "name": "log",
      "file": "src/uiManager.js",
      "line": 2086,
      "context": "console.log('Victory screen displayed');"
    },
    {
      "name": "error",
      "file": "src/uiManager.js",
      "line": 2088,
      "context": "console.error('Error showing victory screen:', error);"
    },
    {
      "name": "getGameStatistics",
      "file": "src/uiManager.js",
      "line": 2097,
      "context": "* @param {Object} stats - Game statistics from gameState.getGameStatistics()"
    },
    {
      "name": "updateVictoryScreenContent",
      "file": "src/uiManager.js",
      "line": 2100,
      "context": "updateVictoryScreenContent(stats, data) {"
    },
    {
      "name": "log",
      "file": "src/uiManager.js",
      "line": 2102,
      "context": "console.log('Updating victory screen with stats:', stats);"
    },
    {
      "name": "toLocaleString",
      "file": "src/uiManager.js",
      "line": 2106,
      "context": "this.elements.victoryFinalScore.textContent = stats.finalScore.toLocaleString();"
    },
    {
      "name": "toLocaleString",
      "file": "src/uiManager.js",
      "line": 2123,
      "context": "this.elements.victoryBaseScore.textContent = stats.baseScore.toLocaleString();"
    },
    {
      "name": "getElementById",
      "file": "src/uiManager.js",
      "line": 2135,
      "context": "const perfectBonusItem = document.getElementById('victory-perfect-bonus-item');"
    },
    {
      "name": "getElementById",
      "file": "src/uiManager.js",
      "line": 2147,
      "context": "const speedBonusItem = document.getElementById('victory-speed-bonus-item');"
    },
    {
      "name": "getTotalPoints",
      "file": "src/uiManager.js",
      "line": 2161,
      "context": "const achievementPoints = this.achievementManager ? this.achievementManager.getTotalPoints() : 0;"
    },
    {
      "name": "updateAchievementIcons",
      "file": "src/uiManager.js",
      "line": 2166,
      "context": "this.updateAchievementIcons();"
    },
    {
      "name": "updatePerformanceGrade",
      "file": "src/uiManager.js",
      "line": 2169,
      "context": "this.updatePerformanceGrade(stats);"
    },
    {
      "name": "error",
      "file": "src/uiManager.js",
      "line": 2172,
      "context": "console.error('Error updating victory screen content:', error);"
    },
    {
      "name": "updateAchievementIcons",
      "file": "src/uiManager.js",
      "line": 2179,
      "context": "updateAchievementIcons() {"
    },
    {
      "name": "getUnlockedAchievements",
      "file": "src/uiManager.js",
      "line": 2185,
      "context": "const unlockedAchievements = this.achievementManager.getUnlockedAchievements();"
    },
    {
      "name": "slice",
      "file": "src/uiManager.js",
      "line": 2193,
      "context": "unlockedAchievements.slice(0, 6).forEach(achievement => {"
    },
    {
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 2193,
      "context": "unlockedAchievements.slice(0, 6).forEach(achievement => {"
    },
    {
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 2194,
      "context": "const iconElement = document.createElement('div');"
    },
    {
      "name": "appendChild",
      "file": "src/uiManager.js",
      "line": 2201,
      "context": "this.elements.victoryAchievementIcons.appendChild(iconElement);"
    },
    {
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 2205,
      "context": "const moreElement = document.createElement('div');"
    },
    {
      "name": "appendChild",
      "file": "src/uiManager.js",
      "line": 2209,
      "context": "this.elements.victoryAchievementIcons.appendChild(moreElement);"
    },
    {
      "name": "error",
      "file": "src/uiManager.js",
      "line": 2213,
      "context": "console.error('Error updating achievement icons:', error);"
    },
    {
      "name": "updatePerformanceGrade",
      "file": "src/uiManager.js",
      "line": 2220,
      "context": "updatePerformanceGrade(stats) {"
    },
    {
      "name": "calculatePerformanceGrade",
      "file": "src/uiManager.js",
      "line": 2226,
      "context": "const grade = this.calculatePerformanceGrade(stats);"
    },
    {
      "name": "getGradeInfo",
      "file": "src/uiManager.js",
      "line": 2227,
      "context": "const gradeInfo = this.getGradeInfo(grade, stats);"
    },
    {
      "name": "toLowerCase",
      "file": "src/uiManager.js",
      "line": 2230,
      "context": "this.elements.victoryGrade.className = `completion-grade grade-${grade.toLowerCase()}`;"
    },
    {
      "name": "error",
      "file": "src/uiManager.js",
      "line": 2233,
      "context": "console.error('Error updating performance grade:', error);"
    },
    {
      "name": "grade",
      "file": "src/uiManager.js",
      "line": 2240,
      "context": "* @returns {string} Performance grade (S, A, B, C, D, F)"
    },
    {
      "name": "calculatePerformanceGrade",
      "file": "src/uiManager.js",
      "line": 2242,
      "context": "calculatePerformanceGrade(stats) {"
    },
    {
      "name": "getGradeInfo",
      "file": "src/uiManager.js",
      "line": 2262,
      "context": "getGradeInfo(grade, stats) {"
    },
    {
      "name": "hideVictoryScreen",
      "file": "src/uiManager.js",
      "line": 2282,
      "context": "hideVictoryScreen() {"
    },
    {
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 2284,
      "context": "this.elements.victoryScreen.classList.remove('show');"
    },
    {
      "name": "handlePlayAgain",
      "file": "src/uiManager.js",
      "line": 2294,
      "context": "handlePlayAgain() {"
    },
    {
      "name": "hideVictoryScreen",
      "file": "src/uiManager.js",
      "line": 2295,
      "context": "this.hideVictoryScreen();"
    },
    {
      "name": "resetGame",
      "file": "src/uiManager.js",
      "line": 2297,
      "context": "this.resetGame();"
    },
    {
      "name": "showAchievements",
      "file": "src/uiManager.js",
      "line": 2304,
      "context": "showAchievements() {"
    },
    {
      "name": "getAllAchievements",
      "file": "src/uiManager.js",
      "line": 2308,
      "context": "const achievements = this.achievementManager.getAllAchievements();"
    },
    {
      "name": "getAchievementStats",
      "file": "src/uiManager.js",
      "line": 2309,
      "context": "const stats = this.achievementManager.getAchievementStats();"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2313,
      "context": "this.showFeedback(message, 'info', 4000);"
    },
    {
      "name": "log",
      "file": "src/uiManager.js",
      "line": 2315,
      "context": "console.log('Available achievements:', achievements);"
    },
    {
      "name": "log",
      "file": "src/uiManager.js",
      "line": 2317,
      "context": "console.log('Achievement display not fully implemented yet');"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2318,
      "context": "this.showFeedback('🏆 Achievement display coming soon!', 'info');"
    },
    {
      "name": "shareResults",
      "file": "src/uiManager.js",
      "line": 2326,
      "context": "shareResults() {"
    },
    {
      "name": "getGameStatistics",
      "file": "src/uiManager.js",
      "line": 2328,
      "context": "const stats = this.gameState.getGameStatistics();"
    },
    {
      "name": "toLocaleString",
      "file": "src/uiManager.js",
      "line": 2330,
      "context": "`🏆 Final Score: ${stats.finalScore.toLocaleString()}\\n` +"
    },
    {
      "name": "formatTime",
      "file": "src/uiManager.js",
      "line": 2333,
      "context": "`⏱️ Time: ${this.gameState.formatTime(stats.totalTime)}\\n\\n` +"
    },
    {
      "name": "share",
      "file": "src/uiManager.js",
      "line": 2337,
      "context": "navigator.share({"
    },
    {
      "name": "writeText",
      "file": "src/uiManager.js",
      "line": 2342,
      "context": "navigator.clipboard.writeText(shareText).then(() => {"
    },
    {
      "name": "then",
      "file": "src/uiManager.js",
      "line": 2342,
      "context": "navigator.clipboard.writeText(shareText).then(() => {"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2343,
      "context": "this.showFeedback('Results copied to clipboard!', 'success');"
    },
    {
      "name": "fallbackShare",
      "file": "src/uiManager.js",
      "line": 2345,
      "context": "this.fallbackShare(shareText);"
    },
    {
      "name": "fallbackShare",
      "file": "src/uiManager.js",
      "line": 2348,
      "context": "this.fallbackShare(shareText);"
    },
    {
      "name": "error",
      "file": "src/uiManager.js",
      "line": 2351,
      "context": "console.error('Error sharing results:', error);"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2352,
      "context": "this.showFeedback('Unable to share results', 'error');"
    },
    {
      "name": "hideVictoryScreen",
      "file": "src/uiManager.js",
      "line": 2359,
      "context": "hideVictoryScreen() {"
    },
    {
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 2365,
      "context": "this.elements.victoryScreen.classList.remove('show');"
    },
    {
      "name": "add",
      "file": "src/uiManager.js",
      "line": 2366,
      "context": "this.elements.victoryScreen.classList.add('hide');"
    },
    {
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 2370,
      "context": "this.elements.victoryScreen.classList.remove('hide');"
    },
    {
      "name": "log",
      "file": "src/uiManager.js",
      "line": 2373,
      "context": "console.log('Victory screen hidden');"
    },
    {
      "name": "error",
      "file": "src/uiManager.js",
      "line": 2375,
      "context": "console.error('Error hiding victory screen:', error);"
    },
    {
      "name": "handlePlayAgain",
      "file": "src/uiManager.js",
      "line": 2382,
      "context": "handlePlayAgain() {"
    },
    {
      "name": "log",
      "file": "src/uiManager.js",
      "line": 2384,
      "context": "console.log('Play again requested');"
    },
    {
      "name": "hideVictoryScreen",
      "file": "src/uiManager.js",
      "line": 2387,
      "context": "this.hideVictoryScreen();"
    },
    {
      "name": "resetGame",
      "file": "src/uiManager.js",
      "line": 2391,
      "context": "this.resetGame();"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2392,
      "context": "this.showFeedback('🎮 Starting new game...', 'info');"
    },
    {
      "name": "error",
      "file": "src/uiManager.js",
      "line": 2396,
      "context": "console.error('Error handling play again:', error);"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2397,
      "context": "this.showFeedback('❌ Error starting new game', 'error');"
    },
    {
      "name": "handleViewAchievements",
      "file": "src/uiManager.js",
      "line": 2404,
      "context": "handleViewAchievements() {"
    },
    {
      "name": "log",
      "file": "src/uiManager.js",
      "line": 2406,
      "context": "console.log('View achievements requested');"
    },
    {
      "name": "showAchievementGallery",
      "file": "src/uiManager.js",
      "line": 2409,
      "context": "this.achievementManager.showAchievementGallery();"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2411,
      "context": "this.showFeedback('🏆 Achievement gallery coming soon!', 'info');"
    },
    {
      "name": "error",
      "file": "src/uiManager.js",
      "line": 2415,
      "context": "console.error('Error viewing achievements:', error);"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2416,
      "context": "this.showFeedback('❌ Error loading achievements', 'error');"
    },
    {
      "name": "handleShareResults",
      "file": "src/uiManager.js",
      "line": 2423,
      "context": "handleShareResults() {"
    },
    {
      "name": "log",
      "file": "src/uiManager.js",
      "line": 2425,
      "context": "console.log('Share results requested');"
    },
    {
      "name": "getGameStatistics",
      "file": "src/uiManager.js",
      "line": 2427,
      "context": "const stats = this.gameState.getGameStatistics();"
    },
    {
      "name": "calculatePerformanceGrade",
      "file": "src/uiManager.js",
      "line": 2428,
      "context": "const grade = this.calculatePerformanceGrade(stats);"
    },
    {
      "name": "toLocaleString",
      "file": "src/uiManager.js",
      "line": 2431,
      "context": "`🏆 Final Score: ${stats.finalScore.toLocaleString()}\\n` +"
    },
    {
      "name": "share",
      "file": "src/uiManager.js",
      "line": 2440,
      "context": "navigator.share({"
    },
    {
      "name": "then",
      "file": "src/uiManager.js",
      "line": 2443,
      "context": "}).then(() => {"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2444,
      "context": "this.showFeedback('✅ Results shared successfully!', 'success');"
    },
    {
      "name": "log",
      "file": "src/uiManager.js",
      "line": 2446,
      "context": "console.log('Share failed, falling back to clipboard');"
    },
    {
      "name": "copyToClipboard",
      "file": "src/uiManager.js",
      "line": 2447,
      "context": "this.copyToClipboard(shareText);"
    },
    {
      "name": "copyToClipboard",
      "file": "src/uiManager.js",
      "line": 2451,
      "context": "this.copyToClipboard(shareText);"
    },
    {
      "name": "error",
      "file": "src/uiManager.js",
      "line": 2455,
      "context": "console.error('Error sharing results:', error);"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2456,
      "context": "this.showFeedback('❌ Error sharing results', 'error');"
    },
    {
      "name": "copyToClipboard",
      "file": "src/uiManager.js",
      "line": 2464,
      "context": "copyToClipboard(text) {"
    },
    {
      "name": "writeText",
      "file": "src/uiManager.js",
      "line": 2466,
      "context": "navigator.clipboard.writeText(text).then(() => {"
    },
    {
      "name": "then",
      "file": "src/uiManager.js",
      "line": 2466,
      "context": "navigator.clipboard.writeText(text).then(() => {"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2467,
      "context": "this.showFeedback('📋 Results copied to clipboard!', 'success');"
    },
    {
      "name": "fallbackCopyToClipboard",
      "file": "src/uiManager.js",
      "line": 2469,
      "context": "this.fallbackCopyToClipboard(text);"
    },
    {
      "name": "fallbackCopyToClipboard",
      "file": "src/uiManager.js",
      "line": 2472,
      "context": "this.fallbackCopyToClipboard(text);"
    },
    {
      "name": "fallbackCopyToClipboard",
      "file": "src/uiManager.js",
      "line": 2480,
      "context": "fallbackCopyToClipboard(text) {"
    },
    {
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 2482,
      "context": "const textArea = document.createElement('textarea');"
    },
    {
      "name": "appendChild",
      "file": "src/uiManager.js",
      "line": 2487,
      "context": "document.body.appendChild(textArea);"
    },
    {
      "name": "focus",
      "file": "src/uiManager.js",
      "line": 2488,
      "context": "textArea.focus();"
    },
    {
      "name": "select",
      "file": "src/uiManager.js",
      "line": 2489,
      "context": "textArea.select();"
    },
    {
      "name": "execCommand",
      "file": "src/uiManager.js",
      "line": 2491,
      "context": "const successful = document.execCommand('copy');"
    },
    {
      "name": "removeChild",
      "file": "src/uiManager.js",
      "line": 2492,
      "context": "document.body.removeChild(textArea);"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2495,
      "context": "this.showFeedback('📋 Results copied to clipboard!', 'success');"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2497,
      "context": "this.showFeedback('❌ Could not copy results', 'error');"
    },
    {
      "name": "error",
      "file": "src/uiManager.js",
      "line": 2500,
      "context": "console.error('Fallback copy failed:', error);"
    },
    {
      "name": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2501,
      "context": "this.showFeedback('❌ Copy not supported in this browser', 'error');"
    },
    {
      "name": "milliseconds",
      "file": "src/uiManager.js",
      "line": 2508,
      "context": "* @param {number} duration - How long to show the tooltip in milliseconds (default: 2000)"
    },
    {
      "name": "showTooltip",
      "file": "src/uiManager.js",
      "line": 2510,
      "context": "showTooltip(message, duration = 2000) {"
    },
    {
      "name": "getElementById",
      "file": "src/uiManager.js",
      "line": 2512,
      "context": "const existingTooltip = document.getElementById('game-tooltip');"
    },
    {
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 2514,
      "context": "existingTooltip.remove();"
    },
    {
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 2518,
      "context": "const tooltip = document.createElement('div');"
    },
    {
      "name": "translate",
      "file": "src/uiManager.js",
      "line": 2525,
      "context": "transform: translate(-50%, -50%);"
    },
    {
      "name": "rgba",
      "file": "src/uiManager.js",
      "line": 2526,
      "context": "background: rgba(0, 0, 0, 0.8);"
    },
    {
      "name": "getElementById",
      "file": "src/uiManager.js",
      "line": 2538,
      "context": "if (!document.getElementById('tooltip-styles')) {"
    },
    {
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 2540,
      "context": "const style = document.createElement('style');"
    },
    {
      "name": "translate",
      "file": "src/uiManager.js",
      "line": 2544,
      "context": "0% { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }"
    },
    {
      "name": "scale",
      "file": "src/uiManager.js",
      "line": 2544,
      "context": "0% { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }"
    },
    {
      "name": "translate",
      "file": "src/uiManager.js",
      "line": 2545,
      "context": "10% { opacity: 1; transform: translate(-50%, -50%) scale(1); }"
    },
    {
      "name": "scale",
      "file": "src/uiManager.js",
      "line": 2545,
      "context": "10% { opacity: 1; transform: translate(-50%, -50%) scale(1); }"
    },
    {
      "name": "translate",
      "file": "src/uiManager.js",
      "line": 2546,
      "context": "90% { opacity: 1; transform: translate(-50%, -50%) scale(1); }"
    },
    {
      "name": "scale",
      "file": "src/uiManager.js",
      "line": 2546,
      "context": "90% { opacity: 1; transform: translate(-50%, -50%) scale(1); }"
    },
    {
      "name": "translate",
      "file": "src/uiManager.js",
      "line": 2547,
      "context": "100% { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }"
    },
    {
      "name": "scale",
      "file": "src/uiManager.js",
      "line": 2547,
      "context": "100% { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }"
    },
    {
      "name": "appendChild",
      "file": "src/uiManager.js",
      "line": 2550,
      "context": "document.head.appendChild(style);"
    },
    {
      "name": "warn",
      "file": "src/uiManager.js",
      "line": 2552,
      "context": "console.warn('UIManager: Failed to inject tooltip styles:', error);"
    },
    {
      "name": "appendChild",
      "file": "src/uiManager.js",
      "line": 2555,
      "context": "document.body.appendChild(tooltip);"
    },
    {
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 2560,
      "context": "tooltip.remove();"
    },
    {
      "name": "skeleton",
      "file": "src/uiManager.js",
      "line": 2568,
      "context": "* @param {string} type - Type of skeleton ('question', 'answers', 'room-info', 'score')"
    },
    {
      "name": "showSkeletonLoading",
      "file": "src/uiManager.js",
      "line": 2570,
      "context": "showSkeletonLoading(container, type = 'question') {"
    },
    {
      "name": "now",
      "file": "src/uiManager.js",
      "line": 2573,
      "context": "const loadingId = `skeleton-${Date.now()}`;"
    },
    {
      "name": "set",
      "file": "src/uiManager.js",
      "line": 2574,
      "context": "this.loadingStates.set(container, loadingId);"
    },
    {
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 2578,
      "context": "container.setAttribute('data-original-content', originalContent);"
    },
    {
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 2629,
      "context": "container.setAttribute('aria-busy', 'true');"
    },
    {
      "name": "hideSkeletonLoading",
      "file": "src/uiManager.js",
      "line": 2636,
      "context": "hideSkeletonLoading(container) {"
    },
    {
      "name": "get",
      "file": "src/uiManager.js",
      "line": 2639,
      "context": "const loadingId = this.loadingStates.get(container);"
    },
    {
      "name": "getAttribute",
      "file": "src/uiManager.js",
      "line": 2642,
      "context": "const originalContent = container.getAttribute('data-original-content');"
    },
    {
      "name": "removeAttribute",
      "file": "src/uiManager.js",
      "line": 2645,
      "context": "container.removeAttribute('data-original-content');"
    },
    {
      "name": "removeAttribute",
      "file": "src/uiManager.js",
      "line": 2648,
      "context": "container.removeAttribute('aria-busy');"
    },
    {
      "name": "delete",
      "file": "src/uiManager.js",
      "line": 2649,
      "context": "this.loadingStates.delete(container);"
    },
    {
      "name": "showLoadingState",
      "file": "src/uiManager.js",
      "line": 2657,
      "context": "showLoadingState(elementId, type = 'question') {"
    },
    {
      "name": "getElementById",
      "file": "src/uiManager.js",
      "line": 2658,
      "context": "const element = document.getElementById(elementId);"
    },
    {
      "name": "showSkeletonLoading",
      "file": "src/uiManager.js",
      "line": 2660,
      "context": "this.showSkeletonLoading(element, type);"
    },
    {
      "name": "hideLoadingState",
      "file": "src/uiManager.js",
      "line": 2668,
      "context": "hideLoadingState(elementId) {"
    },
    {
      "name": "getElementById",
      "file": "src/uiManager.js",
      "line": 2669,
      "context": "const element = document.getElementById(elementId);"
    },
    {
      "name": "hideSkeletonLoading",
      "file": "src/uiManager.js",
      "line": 2671,
      "context": "this.hideSkeletonLoading(element);"
    },
    {
      "name": "setupHapticFeedback",
      "file": "src/uiManager.js",
      "line": 2678,
      "context": "setupHapticFeedback() {"
    },
    {
      "name": "log",
      "file": "src/uiManager.js",
      "line": 2682,
      "context": "console.log('🎮 Haptic feedback:', this.hapticSupported ? 'supported' : 'not supported');"
    },
    {
      "name": "feedback",
      "file": "src/uiManager.js",
      "line": 2687,
      "context": "* @param {string} type - Type of feedback ('tap', 'success', 'error', 'warning', 'achievement')"
    },
    {
      "name": "triggerHapticFeedback",
      "file": "src/uiManager.js",
      "line": 2689,
      "context": "triggerHapticFeedback(type = 'tap') {"
    },
    {
      "name": "vibrate",
      "file": "src/uiManager.js",
      "line": 2708,
      "context": "navigator.vibrate(pattern);"
    },
    {
      "name": "warn",
      "file": "src/uiManager.js",
      "line": 2710,
      "context": "console.warn('Haptic feedback failed:', error);"
    },
    {
      "name": "effect",
      "file": "src/uiManager.js",
      "line": 2717,
      "context": "* @param {string} effectType - Type of effect ('sword', 'shield', 'crown', 'gem', 'sparkle')"
    },
    {
      "name": "addMicroInteraction",
      "file": "src/uiManager.js",
      "line": 2719,
      "context": "addMicroInteraction(element, effectType = 'sword') {"
    },
    {
      "name": "add",
      "file": "src/uiManager.js",
      "line": 2723,
      "context": "element.classList.add('micro-interaction');"
    },
    {
      "name": "addSwordGleam",
      "file": "src/uiManager.js",
      "line": 2726,
      "context": "sword: () => this.addSwordGleam(element),"
    },
    {
      "name": "addShieldPulse",
      "file": "src/uiManager.js",
      "line": 2727,
      "context": "shield: () => this.addShieldPulse(element),"
    },
    {
      "name": "addCrownFloat",
      "file": "src/uiManager.js",
      "line": 2728,
      "context": "crown: () => this.addCrownFloat(element),"
    },
    {
      "name": "addGemSparkle",
      "file": "src/uiManager.js",
      "line": 2729,
      "context": "gem: () => this.addGemSparkle(element),"
    },
    {
      "name": "addSparkleEffect",
      "file": "src/uiManager.js",
      "line": 2730,
      "context": "sparkle: () => this.addSparkleEffect(element)"
    },
    {
      "name": "effect",
      "file": "src/uiManager.js",
      "line": 2735,
      "context": "effect();"
    },
    {
      "name": "addSwordGleam",
      "file": "src/uiManager.js",
      "line": 2743,
      "context": "addSwordGleam(element) {"
    },
    {
      "name": "addEventListener",
      "file": "src/uiManager.js",
      "line": 2744,
      "context": "element.addEventListener('mouseenter', () => {"
    },
    {
      "name": "querySelector",
      "file": "src/uiManager.js",
      "line": 2745,
      "context": "if (!element.querySelector('.sword-gleam')) {"
    },
    {
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 2746,
      "context": "const gleam = document.createElement('span');"
    },
    {
      "name": "translateY",
      "file": "src/uiManager.js",
      "line": 2753,
      "context": "transform: translateY(-50%);"
    },
    {
      "name": "appendChild",
      "file": "src/uiManager.js",
      "line": 2760,
      "context": "element.appendChild(gleam);"
    },
    {
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 2762,
      "context": "setTimeout(() => gleam.remove(), 600);"
    },
    {
      "name": "addShieldPulse",
      "file": "src/uiManager.js",
      "line": 2771,
      "context": "addShieldPulse(element) {"
    },
    {
      "name": "addEventListener",
      "file": "src/uiManager.js",
      "line": 2772,
      "context": "element.addEventListener('click', () => {"
    },
    {
      "name": "addCrownFloat",
      "file": "src/uiManager.js",
      "line": 2784,
      "context": "addCrownFloat(element) {"
    },
    {
      "name": "add",
      "file": "src/uiManager.js",
      "line": 2785,
      "context": "element.classList.add('score-increase');"
    },
    {
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 2787,
      "context": "element.classList.remove('score-increase');"
    },
    {
      "name": "addGemSparkle",
      "file": "src/uiManager.js",
      "line": 2795,
      "context": "addGemSparkle(element) {"
    },
    {
      "name": "querySelector",
      "file": "src/uiManager.js",
      "line": 2796,
      "context": "if (!element.querySelector('.gem-sparkle')) {"
    },
    {
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 2797,
      "context": "const gem = document.createElement('span');"
    },
    {
      "name": "appendChild",
      "file": "src/uiManager.js",
      "line": 2807,
      "context": "element.appendChild(gem);"
    },
    {
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 2809,
      "context": "setTimeout(() => gem.remove(), 1000);"
    },
    {
      "name": "addSparkleEffect",
      "file": "src/uiManager.js",
      "line": 2817,
      "context": "addSparkleEffect(element) {"
    },
    {
      "name": "add",
      "file": "src/uiManager.js",
      "line": 2818,
      "context": "element.classList.add('achievement-sparkle');"
    },
    {
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 2820,
      "context": "element.classList.remove('achievement-sparkle');"
    },
    {
      "name": "enhanceButton",
      "file": "src/uiManager.js",
      "line": 2830,
      "context": "enhanceButton(button, callback, feedbackType = 'tap') {"
    },
    {
      "name": "add",
      "file": "src/uiManager.js",
      "line": 2834,
      "context": "button.classList.add('interactive-element');"
    },
    {
      "name": "addEventListener",
      "file": "src/uiManager.js",
      "line": 2837,
      "context": "button.addEventListener('click', (event) => {"
    },
    {
      "name": "triggerHapticFeedback",
      "file": "src/uiManager.js",
      "line": 2839,
      "context": "this.triggerHapticFeedback(feedbackType);"
    },
    {
      "name": "callback",
      "file": "src/uiManager.js",
      "line": 2849,
      "context": "callback(event);"
    },
    {
      "name": "addEventListener",
      "file": "src/uiManager.js",
      "line": 2854,
      "context": "button.addEventListener('mouseenter', () => {"
    },
    {
      "name": "contains",
      "file": "src/uiManager.js",
      "line": 2855,
      "context": "if (button.classList.contains('answer-btn')) {"
    },
    {
      "name": "addSwordGleam",
      "file": "src/uiManager.js",
      "line": 2856,
      "context": "this.addSwordGleam(button);"
    },
    {
      "name": "animateScoreIncrease",
      "file": "src/uiManager.js",
      "line": 2866,
      "context": "animateScoreIncrease(newScore, points) {"
    },
    {
      "name": "triggerHapticFeedback",
      "file": "src/uiManager.js",
      "line": 2872,
      "context": "this.triggerHapticFeedback('achievement');"
    },
    {
      "name": "triggerHapticFeedback",
      "file": "src/uiManager.js",
      "line": 2874,
      "context": "this.triggerHapticFeedback('success');"
    },
    {
      "name": "addCrownFloat",
      "file": "src/uiManager.js",
      "line": 2878,
      "context": "this.addCrownFloat(scoreElement);"
    },
    {
      "name": "addGemSparkle",
      "file": "src/uiManager.js",
      "line": 2880,
      "context": "this.addGemSparkle(scoreElement);"
    },
    {
      "name": "animateScoreIncrease",
      "file": "src/uiManager.js",
      "line": 2885,
      "context": "this.animationManager.animateScoreIncrease(scoreElement, this.previousScore, newScore);"
    },
    {
      "name": "enhancedRoomTransition",
      "file": "src/uiManager.js",
      "line": 2897,
      "context": "enhancedRoomTransition(roomData) {"
    },
    {
      "name": "add",
      "file": "src/uiManager.js",
      "line": 2901,
      "context": "roomInfoElement.classList.add('room-transition');"
    },
    {
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 2903,
      "context": "roomInfoElement.classList.remove('room-transition');"
    },
    {
      "name": "triggerHapticFeedback",
      "file": "src/uiManager.js",
      "line": 2908,
      "context": "this.triggerHapticFeedback('roomEnter');"
    },
    {
      "name": "announceToScreenReader",
      "file": "src/uiManager.js",
      "line": 2911,
      "context": "this.announceToScreenReader(`Entered ${roomData.name}`);"
    },
    {
      "name": "enhancedQuestionPresentation",
      "file": "src/uiManager.js",
      "line": 2918,
      "context": "enhancedQuestionPresentation(questionData) {"
    },
    {
      "name": "add",
      "file": "src/uiManager.js",
      "line": 2922,
      "context": "questionElement.classList.add('question-reveal');"
    },
    {
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 2924,
      "context": "questionElement.classList.remove('question-reveal');"
    },
    {
      "name": "triggerHapticFeedback",
      "file": "src/uiManager.js",
      "line": 2929,
      "context": "this.triggerHapticFeedback('tap');"
    },
    {
      "name": "addAccessibilityHooks",
      "file": "src/uiManager.js",
      "line": 2936,
      "context": "addAccessibilityHooks(accessibilityManager) {"
    },
    {
      "name": "addEventListener",
      "file": "src/uiManager.js",
      "line": 2940,
      "context": "document.addEventListener('accessibility-map-announce', (event) => {"
    },
    {
      "name": "announce",
      "file": "src/uiManager.js",
      "line": 2945,
      "context": "this.accessibilityManager.announce(message, priority);"
    },
    {
      "name": "enhanceAnswerButtonAccessibility",
      "file": "src/uiManager.js",
      "line": 2949,
      "context": "this.enhanceAnswerButtonAccessibility();"
    },
    {
      "name": "addEventListener",
      "file": "src/uiManager.js",
      "line": 2952,
      "context": "document.addEventListener('keydown', (event) => {"
    },
    {
      "name": "checkQuestionActive",
      "file": "src/uiManager.js",
      "line": 2953,
      "context": "if (this.checkQuestionActive() && event.key >= '1' && event.key <= '4') {"
    },
    {
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 2955,
      "context": "const buttons = document.querySelectorAll('#answer-buttons button:not([disabled])');"
    },
    {
      "name": "not",
      "file": "src/uiManager.js",
      "line": 2955,
      "context": "const buttons = document.querySelectorAll('#answer-buttons button:not([disabled])');"
    },
    {
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 2957,
      "context": "event.preventDefault();"
    },
    {
      "name": "click",
      "file": "src/uiManager.js",
      "line": 2958,
      "context": "buttons[answerIndex].click();"
    },
    {
      "name": "enhanceTimerAccessibility",
      "file": "src/uiManager.js",
      "line": 2964,
      "context": "this.enhanceTimerAccessibility();"
    },
    {
      "name": "log",
      "file": "src/uiManager.js",
      "line": 2966,
      "context": "console.log('♿ UI accessibility hooks added');"
    },
    {
      "name": "enhanceAnswerButtonAccessibility",
      "file": "src/uiManager.js",
      "line": 2972,
      "context": "enhanceAnswerButtonAccessibility() {"
    },
    {
      "name": "getElementById",
      "file": "src/uiManager.js",
      "line": 2973,
      "context": "const answerContainer = document.getElementById('answer-buttons');"
    },
    {
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 2976,
      "context": "answerContainer.setAttribute('role', 'radiogroup');"
    },
    {
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 2977,
      "context": "answerContainer.setAttribute('aria-label', 'Answer options');"
    },
    {
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 2980,
      "context": "answerContainer.setAttribute('aria-describedby', 'answer-instructions');"
    },
    {
      "name": "getElementById",
      "file": "src/uiManager.js",
      "line": 2982,
      "context": "if (!document.getElementById('answer-instructions')) {"
    },
    {
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 2983,
      "context": "const instructions = document.createElement('div');"
    },
    {
      "name": "appendChild",
      "file": "src/uiManager.js",
      "line": 2987,
      "context": "answerContainer.appendChild(instructions);"
    },
    {
      "name": "enhanceTimerAccessibility",
      "file": "src/uiManager.js",
      "line": 2995,
      "context": "enhanceTimerAccessibility() {"
    },
    {
      "name": "getElementById",
      "file": "src/uiManager.js",
      "line": 2996,
      "context": "const timerElement = document.getElementById('timer-text');"
    },
    {
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 2999,
      "context": "timerElement.setAttribute('aria-live', 'off');"
    },
    {
      "name": "on",
      "file": "src/uiManager.js",
      "line": 3002,
      "context": "this.quizEngine.on('timerUpdate', (data) => {"
    },
    {
      "name": "announce",
      "file": "src/uiManager.js",
      "line": 3007,
      "context": "this.accessibilityManager.announce('10 seconds remaining', 'polite');"
    },
    {
      "name": "announce",
      "file": "src/uiManager.js",
      "line": 3009,
      "context": "this.accessibilityManager.announce('5 seconds remaining', 'assertive');"
    },
    {
      "name": "selectAnswerWithAccessibility",
      "file": "src/uiManager.js",
      "line": 3019,
      "context": "selectAnswerWithAccessibility(answerIndex) {"
    },
    {
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 3020,
      "context": "const buttons = document.querySelectorAll('#answer-buttons button');"
    },
    {
      "name": "announce",
      "file": "src/uiManager.js",
      "line": 3023,
      "context": "this.accessibilityManager.announce(`Selected: ${answerText}`, 'polite');"
    },
    {
      "name": "announceGameStateChange",
      "file": "src/uiManager.js",
      "line": 3032,
      "context": "announceGameStateChange(message, priority = 'polite') {"
    },
    {
      "name": "announce",
      "file": "src/uiManager.js",
      "line": 3034,
      "context": "this.accessibilityManager.announce(message, priority);"
    },
    {
      "name": "constructor",
      "file": "src/animationManager.js",
      "line": 10,
      "context": "constructor(options = {}) {"
    },
    {
      "name": "checkReducedMotion",
      "file": "src/animationManager.js",
      "line": 14,
      "context": "this.reducedMotion = this.checkReducedMotion();"
    },
    {
      "name": "Map",
      "file": "src/animationManager.js",
      "line": 17,
      "context": "this.activeAnimations = new Map();"
    },
    {
      "name": "log",
      "file": "src/animationManager.js",
      "line": 27,
      "context": "console.log('AnimationManager initialized with reduced motion:', this.reducedMotion);"
    },
    {
      "name": "checkReducedMotion",
      "file": "src/animationManager.js",
      "line": 34,
      "context": "checkReducedMotion() {"
    },
    {
      "name": "matchMedia",
      "file": "src/animationManager.js",
      "line": 36,
      "context": "return window.matchMedia('(prefers-reduced-motion: reduce)').matches;"
    },
    {
      "name": "warn",
      "file": "src/animationManager.js",
      "line": 38,
      "context": "console.warn('Could not check reduced motion preference:', error);"
    },
    {
      "name": "generateAnimationId",
      "file": "src/animationManager.js",
      "line": 47,
      "context": "generateAnimationId() {"
    },
    {
      "name": "now",
      "file": "src/animationManager.js",
      "line": 48,
      "context": "return `anim_${++this.animationCounter}_${Date.now()}`;"
    },
    {
      "name": "animateScoreIncrease",
      "file": "src/animationManager.js",
      "line": 59,
      "context": "async animateScoreIncrease(element, fromValue, toValue, duration = 1000) {"
    },
    {
      "name": "Error",
      "file": "src/animationManager.js",
      "line": 61,
      "context": "throw new Error('Score element is required for animation');"
    },
    {
      "name": "generateAnimationId",
      "file": "src/animationManager.js",
      "line": 64,
      "context": "const animationId = this.generateAnimationId();"
    },
    {
      "name": "toString",
      "file": "src/animationManager.js",
      "line": 69,
      "context": "element.textContent = toValue.toString();"
    },
    {
      "name": "resolve",
      "file": "src/animationManager.js",
      "line": 70,
      "context": "return Promise.resolve();"
    },
    {
      "name": "log",
      "file": "src/animationManager.js",
      "line": 73,
      "context": "console.log(`Starting score animation from ${fromValue} to ${toValue}`);"
    },
    {
      "name": "now",
      "file": "src/animationManager.js",
      "line": 76,
      "context": "const startTime = performance.now();"
    },
    {
      "name": "Promise",
      "file": "src/animationManager.js",
      "line": 79,
      "context": "return new Promise((resolve) => {"
    },
    {
      "name": "min",
      "file": "src/animationManager.js",
      "line": 82,
      "context": "const progress = Math.min(elapsed / duration, 1);"
    },
    {
      "name": "pow",
      "file": "src/animationManager.js",
      "line": 85,
      "context": "const easedProgress = 1 - Math.pow(1 - progress, 3);"
    },
    {
      "name": "round",
      "file": "src/animationManager.js",
      "line": 86,
      "context": "const currentValue = Math.round(fromValue + (difference * easedProgress));"
    },
    {
      "name": "toString",
      "file": "src/animationManager.js",
      "line": 88,
      "context": "element.textContent = currentValue.toString();"
    },
    {
      "name": "scale",
      "file": "src/animationManager.js",
      "line": 92,
      "context": "element.style.transform = `scale(${1 + (progress * 0.2)})`;"
    },
    {
      "name": "scale",
      "file": "src/animationManager.js",
      "line": 96,
      "context": "element.style.transform = `scale(${1.2 - (fadeProgress * 0.2)})`;"
    },
    {
      "name": "set",
      "file": "src/animationManager.js",
      "line": 102,
      "context": "this.activeAnimations.set(animationId, frameId);"
    },
    {
      "name": "delete",
      "file": "src/animationManager.js",
      "line": 107,
      "context": "this.activeAnimations.delete(animationId);"
    },
    {
      "name": "log",
      "file": "src/animationManager.js",
      "line": 110,
      "context": "console.log(`Score animation completed in ${elapsed.toFixed(2)}ms`);"
    },
    {
      "name": "toFixed",
      "file": "src/animationManager.js",
      "line": 110,
      "context": "console.log(`Score animation completed in ${elapsed.toFixed(2)}ms`);"
    },
    {
      "name": "resolve",
      "file": "src/animationManager.js",
      "line": 111,
      "context": "resolve();"
    },
    {
      "name": "error",
      "file": "src/animationManager.js",
      "line": 119,
      "context": "console.error('Score animation failed:', error);"
    },
    {
      "name": "toString",
      "file": "src/animationManager.js",
      "line": 120,
      "context": "element.textContent = toValue.toString();"
    },
    {
      "name": "delete",
      "file": "src/animationManager.js",
      "line": 121,
      "context": "this.activeAnimations.delete(animationId);"
    },
    {
      "name": "animateAnswerFeedback",
      "file": "src/animationManager.js",
      "line": 133,
      "context": "async animateAnswerFeedback(isCorrect, element, options = {}) {"
    },
    {
      "name": "Error",
      "file": "src/animationManager.js",
      "line": 135,
      "context": "throw new Error('Element is required for answer feedback animation');"
    },
    {
      "name": "generateAnimationId",
      "file": "src/animationManager.js",
      "line": 138,
      "context": "const animationId = this.generateAnimationId();"
    },
    {
      "name": "log",
      "file": "src/animationManager.js",
      "line": 146,
      "context": "console.log(`Starting answer feedback animation: ${isCorrect ? 'correct' : 'incorrect'}`);"
    },
    {
      "name": "assign",
      "file": "src/animationManager.js",
      "line": 162,
      "context": "Object.assign(element.style, {"
    },
    {
      "name": "restoreStyles",
      "file": "src/animationManager.js",
      "line": 169,
      "context": "this.restoreStyles(element, originalStyles);"
    },
    {
      "name": "resolve",
      "file": "src/animationManager.js",
      "line": 172,
      "context": "return Promise.resolve();"
    },
    {
      "name": "Promise",
      "file": "src/animationManager.js",
      "line": 175,
      "context": "return new Promise((resolve) => {"
    },
    {
      "name": "scale",
      "file": "src/animationManager.js",
      "line": 178,
      "context": "element.style.transform = 'scale(1.05)';"
    },
    {
      "name": "scale",
      "file": "src/animationManager.js",
      "line": 186,
      "context": "element.style.transform = 'scale(1)';"
    },
    {
      "name": "restoreStyles",
      "file": "src/animationManager.js",
      "line": 191,
      "context": "this.restoreStyles(element, originalStyles);"
    },
    {
      "name": "delete",
      "file": "src/animationManager.js",
      "line": 194,
      "context": "this.activeAnimations.delete(animationId);"
    },
    {
      "name": "log",
      "file": "src/animationManager.js",
      "line": 196,
      "context": "console.log('Answer feedback animation completed');"
    },
    {
      "name": "resolve",
      "file": "src/animationManager.js",
      "line": 197,
      "context": "resolve();"
    },
    {
      "name": "error",
      "file": "src/animationManager.js",
      "line": 205,
      "context": "console.error('Answer feedback animation failed:', error);"
    },
    {
      "name": "delete",
      "file": "src/animationManager.js",
      "line": 206,
      "context": "this.activeAnimations.delete(animationId);"
    },
    {
      "name": "animateRoomTransition",
      "file": "src/animationManager.js",
      "line": 218,
      "context": "async animateRoomTransition(roomElement, transition, options = {}) {"
    },
    {
      "name": "Error",
      "file": "src/animationManager.js",
      "line": 220,
      "context": "throw new Error('Room element is required for transition animation');"
    },
    {
      "name": "generateAnimationId",
      "file": "src/animationManager.js",
      "line": 223,
      "context": "const animationId = this.generateAnimationId();"
    },
    {
      "name": "log",
      "file": "src/animationManager.js",
      "line": 227,
      "context": "console.log(`Starting room transition: ${transition.from} → ${transition.to}`);"
    },
    {
      "name": "resolve",
      "file": "src/animationManager.js",
      "line": 232,
      "context": "return Promise.resolve();"
    },
    {
      "name": "Promise",
      "file": "src/animationManager.js",
      "line": 235,
      "context": "return new Promise((resolve) => {"
    },
    {
      "name": "delete",
      "file": "src/animationManager.js",
      "line": 254,
      "context": "this.activeAnimations.delete(animationId);"
    },
    {
      "name": "log",
      "file": "src/animationManager.js",
      "line": 256,
      "context": "console.log('Room transition animation completed');"
    },
    {
      "name": "resolve",
      "file": "src/animationManager.js",
      "line": 257,
      "context": "resolve();"
    },
    {
      "name": "error",
      "file": "src/animationManager.js",
      "line": 263,
      "context": "console.error('Room transition animation failed:', error);"
    },
    {
      "name": "delete",
      "file": "src/animationManager.js",
      "line": 264,
      "context": "this.activeAnimations.delete(animationId);"
    },
    {
      "name": "animateAchievementUnlock",
      "file": "src/animationManager.js",
      "line": 276,
      "context": "async animateAchievementUnlock(achievement, container, options = {}) {"
    },
    {
      "name": "Error",
      "file": "src/animationManager.js",
      "line": 278,
      "context": "throw new Error('Achievement and container are required for unlock animation');"
    },
    {
      "name": "generateAnimationId",
      "file": "src/animationManager.js",
      "line": 281,
      "context": "const animationId = this.generateAnimationId();"
    },
    {
      "name": "log",
      "file": "src/animationManager.js",
      "line": 285,
      "context": "console.log(`Starting achievement unlock animation: ${achievement.name}`);"
    },
    {
      "name": "createAchievementNotification",
      "file": "src/animationManager.js",
      "line": 289,
      "context": "const notification = this.createAchievementNotification(achievement);"
    },
    {
      "name": "appendChild",
      "file": "src/animationManager.js",
      "line": 290,
      "context": "container.appendChild(notification);"
    },
    {
      "name": "removeChild",
      "file": "src/animationManager.js",
      "line": 297,
      "context": "notification.parentNode.removeChild(notification);"
    },
    {
      "name": "resolve",
      "file": "src/animationManager.js",
      "line": 300,
      "context": "return Promise.resolve();"
    },
    {
      "name": "Promise",
      "file": "src/animationManager.js",
      "line": 303,
      "context": "return new Promise((resolve) => {"
    },
    {
      "name": "translateY",
      "file": "src/animationManager.js",
      "line": 306,
      "context": "notification.style.transform = 'translateY(0) scale(1)';"
    },
    {
      "name": "scale",
      "file": "src/animationManager.js",
      "line": 306,
      "context": "notification.style.transform = 'translateY(0) scale(1)';"
    },
    {
      "name": "translateY",
      "file": "src/animationManager.js",
      "line": 311,
      "context": "notification.style.transform = 'translateY(0) scale(0.95)';"
    },
    {
      "name": "scale",
      "file": "src/animationManager.js",
      "line": 311,
      "context": "notification.style.transform = 'translateY(0) scale(0.95)';"
    },
    {
      "name": "translateY",
      "file": "src/animationManager.js",
      "line": 316,
      "context": "notification.style.transform = 'translateY(-20px) scale(0.8)';"
    },
    {
      "name": "scale",
      "file": "src/animationManager.js",
      "line": 316,
      "context": "notification.style.transform = 'translateY(-20px) scale(0.8)';"
    },
    {
      "name": "removeChild",
      "file": "src/animationManager.js",
      "line": 320,
      "context": "notification.parentNode.removeChild(notification);"
    },
    {
      "name": "delete",
      "file": "src/animationManager.js",
      "line": 322,
      "context": "this.activeAnimations.delete(animationId);"
    },
    {
      "name": "log",
      "file": "src/animationManager.js",
      "line": 324,
      "context": "console.log('Achievement unlock animation completed');"
    },
    {
      "name": "resolve",
      "file": "src/animationManager.js",
      "line": 325,
      "context": "resolve();"
    },
    {
      "name": "error",
      "file": "src/animationManager.js",
      "line": 331,
      "context": "console.error('Achievement unlock animation failed:', error);"
    },
    {
      "name": "delete",
      "file": "src/animationManager.js",
      "line": 332,
      "context": "this.activeAnimations.delete(animationId);"
    },
    {
      "name": "createAchievementNotification",
      "file": "src/animationManager.js",
      "line": 342,
      "context": "createAchievementNotification(achievement) {"
    },
    {
      "name": "createElement",
      "file": "src/animationManager.js",
      "line": 343,
      "context": "const notification = document.createElement('div');"
    },
    {
      "name": "gradient",
      "file": "src/animationManager.js",
      "line": 349,
      "context": "background: linear-gradient(135deg, #fef5e7, #fed7aa);"
    },
    {
      "name": "rgba",
      "file": "src/animationManager.js",
      "line": 353,
      "context": "box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);"
    },
    {
      "name": "translateY",
      "file": "src/animationManager.js",
      "line": 357,
      "context": "transform: translateY(-20px) scale(0.8);"
    },
    {
      "name": "scale",
      "file": "src/animationManager.js",
      "line": 357,
      "context": "transform: translateY(-20px) scale(0.8);"
    },
    {
      "name": "animateLoadingState",
      "file": "src/animationManager.js",
      "line": 388,
      "context": "async animateLoadingState(element, isLoading) {"
    },
    {
      "name": "Error",
      "file": "src/animationManager.js",
      "line": 390,
      "context": "throw new Error('Element is required for loading animation');"
    },
    {
      "name": "add",
      "file": "src/animationManager.js",
      "line": 395,
      "context": "element.classList.add('loading-state');"
    },
    {
      "name": "remove",
      "file": "src/animationManager.js",
      "line": 401,
      "context": "element.classList.remove('loading-state');"
    },
    {
      "name": "resolve",
      "file": "src/animationManager.js",
      "line": 406,
      "context": "return Promise.resolve();"
    },
    {
      "name": "error",
      "file": "src/animationManager.js",
      "line": 409,
      "context": "console.error('Loading state animation failed:', error);"
    },
    {
      "name": "restoreStyles",
      "file": "src/animationManager.js",
      "line": 419,
      "context": "restoreStyles(element, originalStyles) {"
    },
    {
      "name": "keys",
      "file": "src/animationManager.js",
      "line": 421,
      "context": "Object.keys(originalStyles).forEach(property => {"
    },
    {
      "name": "forEach",
      "file": "src/animationManager.js",
      "line": 421,
      "context": "Object.keys(originalStyles).forEach(property => {"
    },
    {
      "name": "warn",
      "file": "src/animationManager.js",
      "line": 425,
      "context": "console.warn('Failed to restore styles:', error);"
    },
    {
      "name": "cancelAnimation",
      "file": "src/animationManager.js",
      "line": 433,
      "context": "cancelAnimation(animationId) {"
    },
    {
      "name": "get",
      "file": "src/animationManager.js",
      "line": 435,
      "context": "const frameId = this.activeAnimations.get(animationId);"
    },
    {
      "name": "delete",
      "file": "src/animationManager.js",
      "line": 438,
      "context": "this.activeAnimations.delete(animationId);"
    },
    {
      "name": "log",
      "file": "src/animationManager.js",
      "line": 439,
      "context": "console.log(`Animation ${animationId} cancelled`);"
    },
    {
      "name": "warn",
      "file": "src/animationManager.js",
      "line": 442,
      "context": "console.warn('Failed to cancel animation:', error);"
    },
    {
      "name": "cancelAllAnimations",
      "file": "src/animationManager.js",
      "line": 449,
      "context": "cancelAllAnimations() {"
    },
    {
      "name": "forEach",
      "file": "src/animationManager.js",
      "line": 451,
      "context": "this.activeAnimations.forEach((frameId, animationId) => {"
    },
    {
      "name": "clear",
      "file": "src/animationManager.js",
      "line": 454,
      "context": "this.activeAnimations.clear();"
    },
    {
      "name": "log",
      "file": "src/animationManager.js",
      "line": 455,
      "context": "console.log('All animations cancelled');"
    },
    {
      "name": "warn",
      "file": "src/animationManager.js",
      "line": 457,
      "context": "console.warn('Failed to cancel all animations:', error);"
    },
    {
      "name": "getPerformanceMetrics",
      "file": "src/animationManager.js",
      "line": 465,
      "context": "getPerformanceMetrics() {"
    },
    {
      "name": "round",
      "file": "src/animationManager.js",
      "line": 473,
      "context": "averageDuration: Math.round(avgDuration * 100) / 100,"
    },
    {
      "name": "testPerformance",
      "file": "src/animationManager.js",
      "line": 483,
      "context": "async testPerformance(iterations = 10) {"
    },
    {
      "name": "log",
      "file": "src/animationManager.js",
      "line": 484,
      "context": "console.log(`Starting animation performance test with ${iterations} iterations`);"
    },
    {
      "name": "createElement",
      "file": "src/animationManager.js",
      "line": 486,
      "context": "const testElement = document.createElement('div');"
    },
    {
      "name": "appendChild",
      "file": "src/animationManager.js",
      "line": 488,
      "context": "document.body.appendChild(testElement);"
    },
    {
      "name": "now",
      "file": "src/animationManager.js",
      "line": 490,
      "context": "const startTime = performance.now();"
    },
    {
      "name": "animateScoreIncrease",
      "file": "src/animationManager.js",
      "line": 494,
      "context": "await this.animateScoreIncrease(testElement, i * 10, (i + 1) * 10, 100);"
    },
    {
      "name": "now",
      "file": "src/animationManager.js",
      "line": 497,
      "context": "const endTime = performance.now();"
    },
    {
      "name": "round",
      "file": "src/animationManager.js",
      "line": 502,
      "context": "totalTime: Math.round(totalTime),"
    },
    {
      "name": "round",
      "file": "src/animationManager.js",
      "line": 503,
      "context": "averageTime: Math.round(totalTime / iterations),"
    },
    {
      "name": "log",
      "file": "src/animationManager.js",
      "line": 507,
      "context": "console.log('Animation performance test results:', results);"
    },
    {
      "name": "removeChild",
      "file": "src/animationManager.js",
      "line": 511,
      "context": "document.body.removeChild(testElement);"
    },
    {
      "name": "rotate",
      "file": "src/animationManager.js",
      "line": 537,
      "context": "0% { transform: rotate(0deg); }"
    },
    {
      "name": "rotate",
      "file": "src/animationManager.js",
      "line": 538,
      "context": "100% { transform: rotate(360deg); }"
    },
    {
      "name": "media",
      "file": "src/animationManager.js",
      "line": 545,
      "context": "@media (prefers-reduced-motion: reduce) {"
    },
    {
      "name": "createElement",
      "file": "src/animationManager.js",
      "line": 555,
      "context": "const styleElement = document.createElement('style');"
    },
    {
      "name": "appendChild",
      "file": "src/animationManager.js",
      "line": 557,
      "context": "document.head.appendChild(styleElement);"
    },
    {
      "name": "constructor",
      "file": "src/achievementManager.js",
      "line": 6,
      "context": "constructor(dataLoader, gameState) {"
    },
    {
      "name": "Map",
      "file": "src/achievementManager.js",
      "line": 11,
      "context": "this.achievements = new Map(); // All available achievements"
    },
    {
      "name": "Set",
      "file": "src/achievementManager.js",
      "line": 12,
      "context": "this.unlockedAchievements = new Set(); // Achievement IDs that are unlocked"
    },
    {
      "name": "Map",
      "file": "src/achievementManager.js",
      "line": 13,
      "context": "this.achievementProgress = new Map(); // Progress tracking for each achievement"
    },
    {
      "name": "Set",
      "file": "src/achievementManager.js",
      "line": 24,
      "context": "roomsVisited: new Set(),"
    },
    {
      "name": "now",
      "file": "src/achievementManager.js",
      "line": 25,
      "context": "startTime: Date.now(),"
    },
    {
      "name": "log",
      "file": "src/achievementManager.js",
      "line": 32,
      "context": "console.log('AchievementManager initialized');"
    },
    {
      "name": "initialize",
      "file": "src/achievementManager.js",
      "line": 33,
      "context": "this.initialize();"
    },
    {
      "name": "initialize",
      "file": "src/achievementManager.js",
      "line": 39,
      "context": "async initialize() {"
    },
    {
      "name": "loadAchievements",
      "file": "src/achievementManager.js",
      "line": 41,
      "context": "await this.loadAchievements();"
    },
    {
      "name": "loadAchievementProgress",
      "file": "src/achievementManager.js",
      "line": 42,
      "context": "this.loadAchievementProgress();"
    },
    {
      "name": "setupEventListeners",
      "file": "src/achievementManager.js",
      "line": 43,
      "context": "this.setupEventListeners();"
    },
    {
      "name": "updateSessionStats",
      "file": "src/achievementManager.js",
      "line": 44,
      "context": "this.updateSessionStats();"
    },
    {
      "name": "log",
      "file": "src/achievementManager.js",
      "line": 45,
      "context": "console.log(`Loaded ${this.achievements.size} achievements`);"
    },
    {
      "name": "error",
      "file": "src/achievementManager.js",
      "line": 47,
      "context": "console.error('Failed to initialize AchievementManager:', error);"
    },
    {
      "name": "loadAchievements",
      "file": "src/achievementManager.js",
      "line": 54,
      "context": "async loadAchievements() {"
    },
    {
      "name": "getAllData",
      "file": "src/achievementManager.js",
      "line": 56,
      "context": "const gameData = this.dataLoader.getAllData();"
    },
    {
      "name": "Error",
      "file": "src/achievementManager.js",
      "line": 59,
      "context": "throw new Error('Achievement data not available. Ensure DataLoader.loadGameData() was called first.');"
    },
    {
      "name": "loadGameData",
      "file": "src/achievementManager.js",
      "line": 59,
      "context": "throw new Error('Achievement data not available. Ensure DataLoader.loadGameData() was called first.');"
    },
    {
      "name": "forEach",
      "file": "src/achievementManager.js",
      "line": 63,
      "context": "gameData.achievements.forEach(achievement => {"
    },
    {
      "name": "set",
      "file": "src/achievementManager.js",
      "line": 64,
      "context": "this.achievements.set(achievement.id, {"
    },
    {
      "name": "getMaxProgress",
      "file": "src/achievementManager.js",
      "line": 68,
      "context": "maxProgress: this.getMaxProgress(achievement) // Maximum progress needed"
    },
    {
      "name": "log",
      "file": "src/achievementManager.js",
      "line": 72,
      "context": "console.log('Achievement definitions loaded:', this.achievements.size);"
    },
    {
      "name": "error",
      "file": "src/achievementManager.js",
      "line": 74,
      "context": "console.error('Failed to load achievements:', error);"
    },
    {
      "name": "getMaxProgress",
      "file": "src/achievementManager.js",
      "line": 82,
      "context": "getMaxProgress(achievement) {"
    },
    {
      "name": "loadAchievementProgress",
      "file": "src/achievementManager.js",
      "line": 116,
      "context": "loadAchievementProgress() {"
    },
    {
      "name": "getItem",
      "file": "src/achievementManager.js",
      "line": 118,
      "context": "const saved = localStorage.getItem('lobeLabyrinth_achievements');"
    },
    {
      "name": "parse",
      "file": "src/achievementManager.js",
      "line": 120,
      "context": "const data = JSON.parse(saved);"
    },
    {
      "name": "Set",
      "file": "src/achievementManager.js",
      "line": 124,
      "context": "this.unlockedAchievements = new Set(data.unlockedAchievements);"
    },
    {
      "name": "forEach",
      "file": "src/achievementManager.js",
      "line": 127,
      "context": "this.unlockedAchievements.forEach(achievementId => {"
    },
    {
      "name": "get",
      "file": "src/achievementManager.js",
      "line": 128,
      "context": "const achievement = this.achievements.get(achievementId);"
    },
    {
      "name": "now",
      "file": "src/achievementManager.js",
      "line": 131,
      "context": "achievement.unlockedAt = data.unlockTimes?.[achievementId] || Date.now();"
    },
    {
      "name": "Map",
      "file": "src/achievementManager.js",
      "line": 138,
      "context": "this.achievementProgress = new Map(Object.entries(data.achievementProgress));"
    },
    {
      "name": "entries",
      "file": "src/achievementManager.js",
      "line": 138,
      "context": "this.achievementProgress = new Map(Object.entries(data.achievementProgress));"
    },
    {
      "name": "log",
      "file": "src/achievementManager.js",
      "line": 144,
      "context": "console.log(`Loaded ${this.unlockedAchievements.size} unlocked achievements`);"
    },
    {
      "name": "error",
      "file": "src/achievementManager.js",
      "line": 147,
      "context": "console.error('Failed to load achievement progress:', error);"
    },
    {
      "name": "saveAchievementProgress",
      "file": "src/achievementManager.js",
      "line": 154,
      "context": "saveAchievementProgress() {"
    },
    {
      "name": "forEach",
      "file": "src/achievementManager.js",
      "line": 157,
      "context": "this.achievements.forEach((achievement, id) => {"
    },
    {
      "name": "from",
      "file": "src/achievementManager.js",
      "line": 164,
      "context": "unlockedAchievements: Array.from(this.unlockedAchievements),"
    },
    {
      "name": "fromEntries",
      "file": "src/achievementManager.js",
      "line": 165,
      "context": "achievementProgress: Object.fromEntries(this.achievementProgress),"
    },
    {
      "name": "now",
      "file": "src/achievementManager.js",
      "line": 168,
      "context": "lastSaved: Date.now()"
    },
    {
      "name": "setItem",
      "file": "src/achievementManager.js",
      "line": 171,
      "context": "localStorage.setItem('lobeLabyrinth_achievements', JSON.stringify(data));"
    },
    {
      "name": "stringify",
      "file": "src/achievementManager.js",
      "line": 171,
      "context": "localStorage.setItem('lobeLabyrinth_achievements', JSON.stringify(data));"
    },
    {
      "name": "error",
      "file": "src/achievementManager.js",
      "line": 173,
      "context": "console.error('Failed to save achievement progress:', error);"
    },
    {
      "name": "setupEventListeners",
      "file": "src/achievementManager.js",
      "line": 180,
      "context": "setupEventListeners() {"
    },
    {
      "name": "on",
      "file": "src/achievementManager.js",
      "line": 182,
      "context": "this.gameState.on('questionAnswered', (eventData) => {"
    },
    {
      "name": "handleQuestionAnswered",
      "file": "src/achievementManager.js",
      "line": 183,
      "context": "this.handleQuestionAnswered(eventData);"
    },
    {
      "name": "on",
      "file": "src/achievementManager.js",
      "line": 187,
      "context": "this.gameState.on('roomChanged', (eventData) => {"
    },
    {
      "name": "handleRoomChanged",
      "file": "src/achievementManager.js",
      "line": 188,
      "context": "this.handleRoomChanged(eventData);"
    },
    {
      "name": "on",
      "file": "src/achievementManager.js",
      "line": 192,
      "context": "this.gameState.on('gameCompleted', (eventData) => {"
    },
    {
      "name": "handleGameCompleted",
      "file": "src/achievementManager.js",
      "line": 193,
      "context": "this.handleGameCompleted(eventData);"
    },
    {
      "name": "log",
      "file": "src/achievementManager.js",
      "line": 196,
      "context": "console.log('Achievement event listeners set up');"
    },
    {
      "name": "updateSessionStats",
      "file": "src/achievementManager.js",
      "line": 202,
      "context": "updateSessionStats() {"
    },
    {
      "name": "getStateSnapshot",
      "file": "src/achievementManager.js",
      "line": 203,
      "context": "const gameSnapshot = this.gameState.getStateSnapshot();"
    },
    {
      "name": "Set",
      "file": "src/achievementManager.js",
      "line": 205,
      "context": "this.sessionStats.roomsVisited = new Set(gameSnapshot.visitedRooms);"
    },
    {
      "name": "floor",
      "file": "src/achievementManager.js",
      "line": 211,
      "context": "this.sessionStats.correctAnswers = Math.floor(gameSnapshot.score / 50); // Rough estimate"
    },
    {
      "name": "handleQuestionAnswered",
      "file": "src/achievementManager.js",
      "line": 217,
      "context": "handleQuestionAnswered(eventData) {"
    },
    {
      "name": "max",
      "file": "src/achievementManager.js",
      "line": 227,
      "context": "this.sessionStats.maxConsecutiveCorrect = Math.max("
    },
    {
      "name": "push",
      "file": "src/achievementManager.js",
      "line": 234,
      "context": "this.sessionStats.quickAnswers.push(timeElapsed);"
    },
    {
      "name": "push",
      "file": "src/achievementManager.js",
      "line": 242,
      "context": "this.sessionStats.lastAnswerTimes.push({"
    },
    {
      "name": "now",
      "file": "src/achievementManager.js",
      "line": 243,
      "context": "time: Date.now(),"
    },
    {
      "name": "shift",
      "file": "src/achievementManager.js",
      "line": 250,
      "context": "this.sessionStats.lastAnswerTimes.shift();"
    },
    {
      "name": "checkAchievementUnlocks",
      "file": "src/achievementManager.js",
      "line": 254,
      "context": "this.checkAchievementUnlocks();"
    },
    {
      "name": "handleRoomChanged",
      "file": "src/achievementManager.js",
      "line": 260,
      "context": "handleRoomChanged(eventData) {"
    },
    {
      "name": "add",
      "file": "src/achievementManager.js",
      "line": 263,
      "context": "this.sessionStats.roomsVisited.add(roomId);"
    },
    {
      "name": "checkAchievementUnlocks",
      "file": "src/achievementManager.js",
      "line": 266,
      "context": "this.checkAchievementUnlocks();"
    },
    {
      "name": "handleGameCompleted",
      "file": "src/achievementManager.js",
      "line": 272,
      "context": "handleGameCompleted(eventData) {"
    },
    {
      "name": "checkAchievementUnlocks",
      "file": "src/achievementManager.js",
      "line": 274,
      "context": "this.checkAchievementUnlocks();"
    },
    {
      "name": "checkAchievementUnlocks",
      "file": "src/achievementManager.js",
      "line": 280,
      "context": "checkAchievementUnlocks() {"
    },
    {
      "name": "forEach",
      "file": "src/achievementManager.js",
      "line": 281,
      "context": "this.achievements.forEach((achievement, achievementId) => {"
    },
    {
      "name": "checkAchievementCondition",
      "file": "src/achievementManager.js",
      "line": 283,
      "context": "const shouldUnlock = this.checkAchievementCondition(achievement);"
    },
    {
      "name": "unlockAchievement",
      "file": "src/achievementManager.js",
      "line": 285,
      "context": "this.unlockAchievement(achievementId);"
    },
    {
      "name": "updateAchievementProgress",
      "file": "src/achievementManager.js",
      "line": 288,
      "context": "this.updateAchievementProgress(achievementId, achievement);"
    },
    {
      "name": "checkAchievementCondition",
      "file": "src/achievementManager.js",
      "line": 297,
      "context": "checkAchievementCondition(achievement) {"
    },
    {
      "name": "getStateSnapshot",
      "file": "src/achievementManager.js",
      "line": 299,
      "context": "const gameSnapshot = this.gameState.getStateSnapshot();"
    },
    {
      "name": "filter",
      "file": "src/achievementManager.js",
      "line": 312,
      "context": "const quickCount = this.sessionStats.quickAnswers.filter("
    },
    {
      "name": "slice",
      "file": "src/achievementManager.js",
      "line": 323,
      "context": "const recent = this.sessionStats.lastAnswerTimes.slice(-(condition.value + 1));"
    },
    {
      "name": "slice",
      "file": "src/achievementManager.js",
      "line": 324,
      "context": "const wrongAnswers = recent.slice(0, -1).every(answer => !answer.correct);"
    },
    {
      "name": "every",
      "file": "src/achievementManager.js",
      "line": 324,
      "context": "const wrongAnswers = recent.slice(0, -1).every(answer => !answer.correct);"
    },
    {
      "name": "now",
      "file": "src/achievementManager.js",
      "line": 339,
      "context": "const playTime = Date.now() - this.sessionStats.startTime;"
    },
    {
      "name": "has",
      "file": "src/achievementManager.js",
      "line": 349,
      "context": "return this.sessionStats.roomsVisited.has(condition.value);"
    },
    {
      "name": "warn",
      "file": "src/achievementManager.js",
      "line": 358,
      "context": "console.warn('Unknown achievement condition type:', condition.type);"
    },
    {
      "name": "updateAchievementProgress",
      "file": "src/achievementManager.js",
      "line": 366,
      "context": "updateAchievementProgress(achievementId, achievement) {"
    },
    {
      "name": "filter",
      "file": "src/achievementManager.js",
      "line": 381,
      "context": "currentProgress = this.sessionStats.quickAnswers.filter("
    },
    {
      "name": "set",
      "file": "src/achievementManager.js",
      "line": 395,
      "context": "this.achievementProgress.set(achievementId, Math.min(currentProgress, achievement.maxProgress));"
    },
    {
      "name": "min",
      "file": "src/achievementManager.js",
      "line": 395,
      "context": "this.achievementProgress.set(achievementId, Math.min(currentProgress, achievement.maxProgress));"
    },
    {
      "name": "get",
      "file": "src/achievementManager.js",
      "line": 396,
      "context": "achievement.progress = this.achievementProgress.get(achievementId);"
    },
    {
      "name": "unlockAchievement",
      "file": "src/achievementManager.js",
      "line": 402,
      "context": "unlockAchievement(achievementId) {"
    },
    {
      "name": "get",
      "file": "src/achievementManager.js",
      "line": 403,
      "context": "const achievement = this.achievements.get(achievementId);"
    },
    {
      "name": "now",
      "file": "src/achievementManager.js",
      "line": 410,
      "context": "achievement.unlockedAt = Date.now();"
    },
    {
      "name": "add",
      "file": "src/achievementManager.js",
      "line": 411,
      "context": "this.unlockedAchievements.add(achievementId);"
    },
    {
      "name": "saveAchievementProgress",
      "file": "src/achievementManager.js",
      "line": 417,
      "context": "this.saveAchievementProgress();"
    },
    {
      "name": "emit",
      "file": "src/achievementManager.js",
      "line": 420,
      "context": "this.emit('achievementUnlocked', {"
    },
    {
      "name": "log",
      "file": "src/achievementManager.js",
      "line": 426,
      "context": "console.log(`🏆 Achievement unlocked: ${achievement.name} (+${achievement.points} points)`);"
    },
    {
      "name": "getAllAchievements",
      "file": "src/achievementManager.js",
      "line": 432,
      "context": "getAllAchievements() {"
    },
    {
      "name": "from",
      "file": "src/achievementManager.js",
      "line": 433,
      "context": "return Array.from(this.achievements.values()).map(achievement => ({"
    },
    {
      "name": "values",
      "file": "src/achievementManager.js",
      "line": 433,
      "context": "return Array.from(this.achievements.values()).map(achievement => ({"
    },
    {
      "name": "map",
      "file": "src/achievementManager.js",
      "line": 433,
      "context": "return Array.from(this.achievements.values()).map(achievement => ({"
    },
    {
      "name": "getAchievementsByCategory",
      "file": "src/achievementManager.js",
      "line": 442,
      "context": "getAchievementsByCategory(category) {"
    },
    {
      "name": "getAllAchievements",
      "file": "src/achievementManager.js",
      "line": 443,
      "context": "return this.getAllAchievements().filter(achievement =>"
    },
    {
      "name": "filter",
      "file": "src/achievementManager.js",
      "line": 443,
      "context": "return this.getAllAchievements().filter(achievement =>"
    },
    {
      "name": "getUnlockedAchievements",
      "file": "src/achievementManager.js",
      "line": 451,
      "context": "getUnlockedAchievements() {"
    },
    {
      "name": "getAllAchievements",
      "file": "src/achievementManager.js",
      "line": 452,
      "context": "return this.getAllAchievements().filter(achievement => achievement.unlocked);"
    },
    {
      "name": "filter",
      "file": "src/achievementManager.js",
      "line": 452,
      "context": "return this.getAllAchievements().filter(achievement => achievement.unlocked);"
    },
    {
      "name": "progress",
      "file": "src/achievementManager.js",
      "line": 456,
      "context": "* Get achievements in progress (not unlocked but with some progress)"
    },
    {
      "name": "getAchievementsInProgress",
      "file": "src/achievementManager.js",
      "line": 458,
      "context": "getAchievementsInProgress() {"
    },
    {
      "name": "getAllAchievements",
      "file": "src/achievementManager.js",
      "line": 459,
      "context": "return this.getAllAchievements().filter(achievement =>"
    },
    {
      "name": "filter",
      "file": "src/achievementManager.js",
      "line": 459,
      "context": "return this.getAllAchievements().filter(achievement =>"
    },
    {
      "name": "getAchievementStats",
      "file": "src/achievementManager.js",
      "line": 467,
      "context": "getAchievementStats() {"
    },
    {
      "name": "round",
      "file": "src/achievementManager.js",
      "line": 475,
      "context": "percentage: Math.round(percentage * 10) / 10,"
    },
    {
      "name": "getCategoryStats",
      "file": "src/achievementManager.js",
      "line": 477,
      "context": "categories: this.getCategoryStats()"
    },
    {
      "name": "getCategoryStats",
      "file": "src/achievementManager.js",
      "line": 484,
      "context": "getCategoryStats() {"
    },
    {
      "name": "forEach",
      "file": "src/achievementManager.js",
      "line": 487,
      "context": "this.achievements.forEach(achievement => {"
    },
    {
      "name": "keys",
      "file": "src/achievementManager.js",
      "line": 500,
      "context": "Object.keys(categories).forEach(category => {"
    },
    {
      "name": "forEach",
      "file": "src/achievementManager.js",
      "line": 500,
      "context": "Object.keys(categories).forEach(category => {"
    },
    {
      "name": "progress",
      "file": "src/achievementManager.js",
      "line": 509,
      "context": "* Reset all achievement progress (for new game)"
    },
    {
      "name": "resetAchievements",
      "file": "src/achievementManager.js",
      "line": 511,
      "context": "resetAchievements() {"
    },
    {
      "name": "clear",
      "file": "src/achievementManager.js",
      "line": 512,
      "context": "this.unlockedAchievements.clear();"
    },
    {
      "name": "clear",
      "file": "src/achievementManager.js",
      "line": 513,
      "context": "this.achievementProgress.clear();"
    },
    {
      "name": "forEach",
      "file": "src/achievementManager.js",
      "line": 517,
      "context": "this.achievements.forEach(achievement => {"
    },
    {
      "name": "Set",
      "file": "src/achievementManager.js",
      "line": 531,
      "context": "roomsVisited: new Set(),"
    },
    {
      "name": "now",
      "file": "src/achievementManager.js",
      "line": 532,
      "context": "startTime: Date.now(),"
    },
    {
      "name": "removeItem",
      "file": "src/achievementManager.js",
      "line": 537,
      "context": "localStorage.removeItem('lobeLabyrinth_achievements');"
    },
    {
      "name": "log",
      "file": "src/achievementManager.js",
      "line": 539,
      "context": "console.log('Achievement progress reset');"
    },
    {
      "name": "emit",
      "file": "src/achievementManager.js",
      "line": 540,
      "context": "this.emit('achievementsReset', {});"
    },
    {
      "name": "addEventListener",
      "file": "src/achievementManager.js",
      "line": 546,
      "context": "addEventListener(eventType, callback) {"
    },
    {
      "name": "push",
      "file": "src/achievementManager.js",
      "line": 550,
      "context": "this.eventListeners[eventType].push(callback);"
    },
    {
      "name": "removeEventListener",
      "file": "src/achievementManager.js",
      "line": 553,
      "context": "removeEventListener(eventType, callback) {"
    },
    {
      "name": "indexOf",
      "file": "src/achievementManager.js",
      "line": 555,
      "context": "const index = this.eventListeners[eventType].indexOf(callback);"
    },
    {
      "name": "splice",
      "file": "src/achievementManager.js",
      "line": 557,
      "context": "this.eventListeners[eventType].splice(index, 1);"
    },
    {
      "name": "emit",
      "file": "src/achievementManager.js",
      "line": 562,
      "context": "emit(eventType, data) {"
    },
    {
      "name": "forEach",
      "file": "src/achievementManager.js",
      "line": 564,
      "context": "this.eventListeners[eventType].forEach(callback => {"
    },
    {
      "name": "callback",
      "file": "src/achievementManager.js",
      "line": 566,
      "context": "callback({ detail: data });"
    },
    {
      "name": "error",
      "file": "src/achievementManager.js",
      "line": 568,
      "context": "console.error(`Error in ${eventType} event listener:`, error);"
    },
    {
      "name": "getDebugInfo",
      "file": "src/achievementManager.js",
      "line": 577,
      "context": "getDebugInfo() {"
    },
    {
      "name": "fromEntries",
      "file": "src/achievementManager.js",
      "line": 582,
      "context": "achievementProgress: Object.fromEntries(this.achievementProgress),"
    },
    {
      "name": "constructor",
      "file": "src/mapRenderer.js",
      "line": 12,
      "context": "constructor(canvas, gameState, dataLoader) {"
    },
    {
      "name": "getContext",
      "file": "src/mapRenderer.js",
      "line": 15,
      "context": "this.ctx = canvas.getContext('2d');"
    },
    {
      "name": "Map",
      "file": "src/mapRenderer.js",
      "line": 49,
      "context": "this.roomPositions = new Map();"
    },
    {
      "name": "setupRoomPositions",
      "file": "src/mapRenderer.js",
      "line": 50,
      "context": "this.setupRoomPositions();"
    },
    {
      "name": "setupEventListeners",
      "file": "src/mapRenderer.js",
      "line": 53,
      "context": "this.setupEventListeners();"
    },
    {
      "name": "log",
      "file": "src/mapRenderer.js",
      "line": 55,
      "context": "console.log('MapRenderer initialized with canvas size:', this.mapWidth, 'x', this.mapHeight);"
    },
    {
      "name": "setupRoomPositions",
      "file": "src/mapRenderer.js",
      "line": 61,
      "context": "setupRoomPositions() {"
    },
    {
      "name": "set",
      "file": "src/mapRenderer.js",
      "line": 75,
      "context": "this.roomPositions.set('entrance_hall', {"
    },
    {
      "name": "set",
      "file": "src/mapRenderer.js",
      "line": 80,
      "context": "this.roomPositions.set('library', {"
    },
    {
      "name": "set",
      "file": "src/mapRenderer.js",
      "line": 85,
      "context": "this.roomPositions.set('armory', {"
    },
    {
      "name": "set",
      "file": "src/mapRenderer.js",
      "line": 90,
      "context": "this.roomPositions.set('observatory', {"
    },
    {
      "name": "set",
      "file": "src/mapRenderer.js",
      "line": 95,
      "context": "this.roomPositions.set('throne_room', {"
    },
    {
      "name": "set",
      "file": "src/mapRenderer.js",
      "line": 100,
      "context": "this.roomPositions.set('secret_chamber', {"
    },
    {
      "name": "log",
      "file": "src/mapRenderer.js",
      "line": 105,
      "context": "console.log('Room positions configured:', this.roomPositions);"
    },
    {
      "name": "setupEventListeners",
      "file": "src/mapRenderer.js",
      "line": 111,
      "context": "setupEventListeners() {"
    },
    {
      "name": "addEventListener",
      "file": "src/mapRenderer.js",
      "line": 113,
      "context": "this.canvas.addEventListener('click', (event) => {"
    },
    {
      "name": "handleCanvasClick",
      "file": "src/mapRenderer.js",
      "line": 114,
      "context": "this.handleCanvasClick(event);"
    },
    {
      "name": "addEventListener",
      "file": "src/mapRenderer.js",
      "line": 118,
      "context": "this.canvas.addEventListener('dblclick', (event) => {"
    },
    {
      "name": "handleCanvasDoubleClick",
      "file": "src/mapRenderer.js",
      "line": 119,
      "context": "this.handleCanvasDoubleClick(event);"
    },
    {
      "name": "addEventListener",
      "file": "src/mapRenderer.js",
      "line": 123,
      "context": "this.canvas.addEventListener('mousemove', (event) => {"
    },
    {
      "name": "handleCanvasHover",
      "file": "src/mapRenderer.js",
      "line": 124,
      "context": "this.handleCanvasHover(event);"
    },
    {
      "name": "addEventListener",
      "file": "src/mapRenderer.js",
      "line": 128,
      "context": "this.canvas.addEventListener('keydown', (event) => {"
    },
    {
      "name": "handleKeyboardNavigation",
      "file": "src/mapRenderer.js",
      "line": 129,
      "context": "this.handleKeyboardNavigation(event);"
    },
    {
      "name": "setAttribute",
      "file": "src/mapRenderer.js",
      "line": 133,
      "context": "this.canvas.setAttribute('tabindex', '0');"
    },
    {
      "name": "setAttribute",
      "file": "src/mapRenderer.js",
      "line": 134,
      "context": "this.canvas.setAttribute('role', 'application');"
    },
    {
      "name": "setAttribute",
      "file": "src/mapRenderer.js",
      "line": 135,
      "context": "this.canvas.setAttribute('aria-label', 'Castle map - Use arrow keys to navigate between rooms');"
    },
    {
      "name": "on",
      "file": "src/mapRenderer.js",
      "line": 138,
      "context": "this.gameState.on('roomChanged', () => {"
    },
    {
      "name": "render",
      "file": "src/mapRenderer.js",
      "line": 139,
      "context": "this.render();"
    },
    {
      "name": "on",
      "file": "src/mapRenderer.js",
      "line": 142,
      "context": "this.gameState.on('scoreChanged', () => {"
    },
    {
      "name": "render",
      "file": "src/mapRenderer.js",
      "line": 143,
      "context": "this.render();"
    },
    {
      "name": "addEventListener",
      "file": "src/mapRenderer.js",
      "line": 147,
      "context": "window.addEventListener('resize', () => {"
    },
    {
      "name": "handleResize",
      "file": "src/mapRenderer.js",
      "line": 148,
      "context": "this.handleResize();"
    },
    {
      "name": "render",
      "file": "src/mapRenderer.js",
      "line": 155,
      "context": "async render() {"
    },
    {
      "name": "log",
      "file": "src/mapRenderer.js",
      "line": 157,
      "context": "console.log('Rendering map...');"
    },
    {
      "name": "clearCanvas",
      "file": "src/mapRenderer.js",
      "line": 160,
      "context": "this.clearCanvas();"
    },
    {
      "name": "getAllData",
      "file": "src/mapRenderer.js",
      "line": 163,
      "context": "const gameData = this.dataLoader.getAllData();"
    },
    {
      "name": "renderConnections",
      "file": "src/mapRenderer.js",
      "line": 167,
      "context": "await this.renderConnections(rooms);"
    },
    {
      "name": "renderRooms",
      "file": "src/mapRenderer.js",
      "line": 170,
      "context": "await this.renderRooms(rooms);"
    },
    {
      "name": "renderUI",
      "file": "src/mapRenderer.js",
      "line": 173,
      "context": "this.renderUI();"
    },
    {
      "name": "log",
      "file": "src/mapRenderer.js",
      "line": 175,
      "context": "console.log('Map rendering complete');"
    },
    {
      "name": "error",
      "file": "src/mapRenderer.js",
      "line": 177,
      "context": "console.error('Error rendering map:', error);"
    },
    {
      "name": "renderError",
      "file": "src/mapRenderer.js",
      "line": 178,
      "context": "this.renderError(error.message);"
    },
    {
      "name": "clearCanvas",
      "file": "src/mapRenderer.js",
      "line": 185,
      "context": "clearCanvas() {"
    },
    {
      "name": "fillRect",
      "file": "src/mapRenderer.js",
      "line": 187,
      "context": "this.ctx.fillRect(0, 0, this.mapWidth, this.mapHeight);"
    },
    {
      "name": "renderRooms",
      "file": "src/mapRenderer.js",
      "line": 194,
      "context": "async renderRooms(rooms) {"
    },
    {
      "name": "renderRoom",
      "file": "src/mapRenderer.js",
      "line": 196,
      "context": "await this.renderRoom(room);"
    },
    {
      "name": "renderRoom",
      "file": "src/mapRenderer.js",
      "line": 204,
      "context": "async renderRoom(room) {"
    },
    {
      "name": "get",
      "file": "src/mapRenderer.js",
      "line": 205,
      "context": "const position = this.roomPositions.get(room.id);"
    },
    {
      "name": "warn",
      "file": "src/mapRenderer.js",
      "line": 207,
      "context": "console.warn(`No position defined for room: ${room.id}`);"
    },
    {
      "name": "getRoomState",
      "file": "src/mapRenderer.js",
      "line": 212,
      "context": "const roomState = this.getRoomState(room.id);"
    },
    {
      "name": "drawRoomShape",
      "file": "src/mapRenderer.js",
      "line": 216,
      "context": "this.drawRoomShape(position.x, position.y, color, roomState === 'current');"
    },
    {
      "name": "drawRoomIcon",
      "file": "src/mapRenderer.js",
      "line": 219,
      "context": "this.drawRoomIcon(room, position.x, position.y);"
    },
    {
      "name": "drawRoomLabel",
      "file": "src/mapRenderer.js",
      "line": 222,
      "context": "this.drawRoomLabel(room.name, position.x, position.y);"
    },
    {
      "name": "shape",
      "file": "src/mapRenderer.js",
      "line": 226,
      "context": "* Draw the basic room shape (rectangle with rounded corners)"
    },
    {
      "name": "drawRoomShape",
      "file": "src/mapRenderer.js",
      "line": 232,
      "context": "drawRoomShape(x, y, color, isCurrent = false) {"
    },
    {
      "name": "beginPath",
      "file": "src/mapRenderer.js",
      "line": 242,
      "context": "ctx.beginPath();"
    },
    {
      "name": "roundRect",
      "file": "src/mapRenderer.js",
      "line": 243,
      "context": "ctx.roundRect(left, top, size, size, radius);"
    },
    {
      "name": "fill",
      "file": "src/mapRenderer.js",
      "line": 247,
      "context": "ctx.fill();"
    },
    {
      "name": "stroke",
      "file": "src/mapRenderer.js",
      "line": 252,
      "context": "ctx.stroke();"
    },
    {
      "name": "drawRoomIcon",
      "file": "src/mapRenderer.js",
      "line": 261,
      "context": "drawRoomIcon(room, x, y) {"
    },
    {
      "name": "fillText",
      "file": "src/mapRenderer.js",
      "line": 268,
      "context": "this.ctx.fillText(icon, x, y - 10);"
    },
    {
      "name": "drawRoomLabel",
      "file": "src/mapRenderer.js",
      "line": 277,
      "context": "drawRoomLabel(name, x, y) {"
    },
    {
      "name": "fillText",
      "file": "src/mapRenderer.js",
      "line": 282,
      "context": "this.ctx.fillText(name, x, y + 25);"
    },
    {
      "name": "renderConnections",
      "file": "src/mapRenderer.js",
      "line": 289,
      "context": "async renderConnections(rooms) {"
    },
    {
      "name": "renderRoomConnections",
      "file": "src/mapRenderer.js",
      "line": 291,
      "context": "await this.renderRoomConnections(room);"
    },
    {
      "name": "renderRoomConnections",
      "file": "src/mapRenderer.js",
      "line": 299,
      "context": "async renderRoomConnections(room) {"
    },
    {
      "name": "get",
      "file": "src/mapRenderer.js",
      "line": 300,
      "context": "const roomPos = this.roomPositions.get(room.id);"
    },
    {
      "name": "get",
      "file": "src/mapRenderer.js",
      "line": 304,
      "context": "const connectionPos = this.roomPositions.get(connectionId);"
    },
    {
      "name": "drawConnection",
      "file": "src/mapRenderer.js",
      "line": 306,
      "context": "this.drawConnection(roomPos, connectionPos);"
    },
    {
      "name": "drawConnection",
      "file": "src/mapRenderer.js",
      "line": 316,
      "context": "drawConnection(fromPos, toPos) {"
    },
    {
      "name": "beginPath",
      "file": "src/mapRenderer.js",
      "line": 317,
      "context": "this.ctx.beginPath();"
    },
    {
      "name": "moveTo",
      "file": "src/mapRenderer.js",
      "line": 318,
      "context": "this.ctx.moveTo(fromPos.x, fromPos.y);"
    },
    {
      "name": "lineTo",
      "file": "src/mapRenderer.js",
      "line": 319,
      "context": "this.ctx.lineTo(toPos.x, toPos.y);"
    },
    {
      "name": "stroke",
      "file": "src/mapRenderer.js",
      "line": 322,
      "context": "this.ctx.stroke();"
    },
    {
      "name": "state",
      "file": "src/mapRenderer.js",
      "line": 328,
      "context": "* @returns {string} Room state ('current', 'visited', 'accessible', 'locked')"
    },
    {
      "name": "getRoomState",
      "file": "src/mapRenderer.js",
      "line": 330,
      "context": "getRoomState(roomId) {"
    },
    {
      "name": "has",
      "file": "src/mapRenderer.js",
      "line": 333,
      "context": "} else if (this.gameState.visitedRooms.has(roomId)) {"
    },
    {
      "name": "has",
      "file": "src/mapRenderer.js",
      "line": 335,
      "context": "} else if (this.gameState.unlockedRooms.has(roomId)) {"
    },
    {
      "name": "handleCanvasClick",
      "file": "src/mapRenderer.js",
      "line": 346,
      "context": "handleCanvasClick(event) {"
    },
    {
      "name": "getBoundingClientRect",
      "file": "src/mapRenderer.js",
      "line": 347,
      "context": "const rect = this.canvas.getBoundingClientRect();"
    },
    {
      "name": "getRoomAtPosition",
      "file": "src/mapRenderer.js",
      "line": 351,
      "context": "const clickedRoom = this.getRoomAtPosition(x, y);"
    },
    {
      "name": "log",
      "file": "src/mapRenderer.js",
      "line": 353,
      "context": "console.log('Clicked room:', clickedRoom);"
    },
    {
      "name": "attemptRoomNavigation",
      "file": "src/mapRenderer.js",
      "line": 354,
      "context": "this.attemptRoomNavigation(clickedRoom);"
    },
    {
      "name": "handleCanvasDoubleClick",
      "file": "src/mapRenderer.js",
      "line": 362,
      "context": "handleCanvasDoubleClick(event) {"
    },
    {
      "name": "getBoundingClientRect",
      "file": "src/mapRenderer.js",
      "line": 363,
      "context": "const rect = this.canvas.getBoundingClientRect();"
    },
    {
      "name": "getRoomAtPosition",
      "file": "src/mapRenderer.js",
      "line": 367,
      "context": "const clickedRoom = this.getRoomAtPosition(x, y);"
    },
    {
      "name": "log",
      "file": "src/mapRenderer.js",
      "line": 369,
      "context": "console.log('Double-clicked room:', clickedRoom);"
    },
    {
      "name": "getRoomStatus",
      "file": "src/mapRenderer.js",
      "line": 372,
      "context": "const roomStatus = this.getRoomStatus(clickedRoom);"
    },
    {
      "name": "showFastMovementFeedback",
      "file": "src/mapRenderer.js",
      "line": 375,
      "context": "this.showFastMovementFeedback(clickedRoom);"
    },
    {
      "name": "moveToRoom",
      "file": "src/mapRenderer.js",
      "line": 378,
      "context": "this.gameState.moveToRoom(clickedRoom);"
    },
    {
      "name": "handleRoomEntry",
      "file": "src/mapRenderer.js",
      "line": 382,
      "context": "window.quizEngine.handleRoomEntry(clickedRoom);"
    },
    {
      "name": "showInaccessibleRoomFeedback",
      "file": "src/mapRenderer.js",
      "line": 386,
      "context": "this.showInaccessibleRoomFeedback(clickedRoom);"
    },
    {
      "name": "handleCanvasHover",
      "file": "src/mapRenderer.js",
      "line": 395,
      "context": "handleCanvasHover(event) {"
    },
    {
      "name": "getBoundingClientRect",
      "file": "src/mapRenderer.js",
      "line": 396,
      "context": "const rect = this.canvas.getBoundingClientRect();"
    },
    {
      "name": "getRoomAtPosition",
      "file": "src/mapRenderer.js",
      "line": 400,
      "context": "const hoveredRoom = this.getRoomAtPosition(x, y);"
    },
    {
      "name": "getRoomAtPosition",
      "file": "src/mapRenderer.js",
      "line": 414,
      "context": "getRoomAtPosition(x, y) {"
    },
    {
      "name": "sqrt",
      "file": "src/mapRenderer.js",
      "line": 416,
      "context": "const distance = Math.sqrt("
    },
    {
      "name": "pow",
      "file": "src/mapRenderer.js",
      "line": 417,
      "context": "Math.pow(x - position.x, 2) +"
    },
    {
      "name": "pow",
      "file": "src/mapRenderer.js",
      "line": 418,
      "context": "Math.pow(y - position.y, 2)"
    },
    {
      "name": "attemptRoomNavigation",
      "file": "src/mapRenderer.js",
      "line": 432,
      "context": "async attemptRoomNavigation(roomId) {"
    },
    {
      "name": "moveToRoom",
      "file": "src/mapRenderer.js",
      "line": 434,
      "context": "await this.gameState.moveToRoom(roomId);"
    },
    {
      "name": "log",
      "file": "src/mapRenderer.js",
      "line": 435,
      "context": "console.log('Successfully moved to room:', roomId);"
    },
    {
      "name": "log",
      "file": "src/mapRenderer.js",
      "line": 437,
      "context": "console.log('Room navigation failed:', error.message);"
    },
    {
      "name": "handleResize",
      "file": "src/mapRenderer.js",
      "line": 445,
      "context": "handleResize() {"
    },
    {
      "name": "log",
      "file": "src/mapRenderer.js",
      "line": 448,
      "context": "console.log('Window resized, map renderer handling resize');"
    },
    {
      "name": "renderUI",
      "file": "src/mapRenderer.js",
      "line": 454,
      "context": "renderUI() {"
    },
    {
      "name": "drawMapTitle",
      "file": "src/mapRenderer.js",
      "line": 456,
      "context": "this.drawMapTitle();"
    },
    {
      "name": "drawMapTitle",
      "file": "src/mapRenderer.js",
      "line": 462,
      "context": "drawMapTitle() {"
    },
    {
      "name": "fillText",
      "file": "src/mapRenderer.js",
      "line": 467,
      "context": "this.ctx.fillText('Castle Map', this.mapWidth / 2, 10);"
    },
    {
      "name": "movement",
      "file": "src/mapRenderer.js",
      "line": 471,
      "context": "* Show visual feedback for fast movement (double-click)"
    },
    {
      "name": "showFastMovementFeedback",
      "file": "src/mapRenderer.js",
      "line": 474,
      "context": "showFastMovementFeedback(roomId) {"
    },
    {
      "name": "get",
      "file": "src/mapRenderer.js",
      "line": 475,
      "context": "const position = this.roomPositions.get(roomId);"
    },
    {
      "name": "drawRoom",
      "file": "src/mapRenderer.js",
      "line": 483,
      "context": "this.drawRoom(roomId, position.x, position.y, '#FFD700'); // Gold flash"
    },
    {
      "name": "render",
      "file": "src/mapRenderer.js",
      "line": 485,
      "context": "this.render(); // Return to normal"
    },
    {
      "name": "showInaccessibleRoomFeedback",
      "file": "src/mapRenderer.js",
      "line": 494,
      "context": "showInaccessibleRoomFeedback(roomId) {"
    },
    {
      "name": "get",
      "file": "src/mapRenderer.js",
      "line": 495,
      "context": "const position = this.roomPositions.get(roomId);"
    },
    {
      "name": "drawRoom",
      "file": "src/mapRenderer.js",
      "line": 500,
      "context": "this.drawRoom(roomId, position.x, position.y, '#E53E3E'); // Red flash"
    },
    {
      "name": "render",
      "file": "src/mapRenderer.js",
      "line": 502,
      "context": "this.render(); // Return to normal"
    },
    {
      "name": "showTooltip",
      "file": "src/mapRenderer.js",
      "line": 508,
      "context": "this.uiManager.showTooltip('This room is not accessible yet!', 2000);"
    },
    {
      "name": "renderError",
      "file": "src/mapRenderer.js",
      "line": 516,
      "context": "renderError(message) {"
    },
    {
      "name": "clearCanvas",
      "file": "src/mapRenderer.js",
      "line": 517,
      "context": "this.clearCanvas();"
    },
    {
      "name": "fillText",
      "file": "src/mapRenderer.js",
      "line": 523,
      "context": "this.ctx.fillText("
    },
    {
      "name": "getRendererState",
      "file": "src/mapRenderer.js",
      "line": 534,
      "context": "getRendererState() {"
    },
    {
      "name": "fromEntries",
      "file": "src/mapRenderer.js",
      "line": 537,
      "context": "roomPositions: Object.fromEntries(this.roomPositions),"
    },
    {
      "name": "from",
      "file": "src/mapRenderer.js",
      "line": 539,
      "context": "visitedRooms: Array.from(this.gameState.visitedRooms),"
    },
    {
      "name": "from",
      "file": "src/mapRenderer.js",
      "line": 540,
      "context": "unlockedRooms: Array.from(this.gameState.unlockedRooms)"
    },
    {
      "name": "handleKeyboardNavigation",
      "file": "src/mapRenderer.js",
      "line": 548,
      "context": "handleKeyboardNavigation(event) {"
    },
    {
      "name": "preventDefault",
      "file": "src/mapRenderer.js",
      "line": 558,
      "context": "event.preventDefault();"
    },
    {
      "name": "navigateWithKeyboard",
      "file": "src/mapRenderer.js",
      "line": 559,
      "context": "this.navigateWithKeyboard(direction);"
    },
    {
      "name": "preventDefault",
      "file": "src/mapRenderer.js",
      "line": 561,
      "context": "event.preventDefault();"
    },
    {
      "name": "activateCurrentRoom",
      "file": "src/mapRenderer.js",
      "line": 562,
      "context": "this.activateCurrentRoom();"
    },
    {
      "name": "preventDefault",
      "file": "src/mapRenderer.js",
      "line": 564,
      "context": "event.preventDefault();"
    },
    {
      "name": "blur",
      "file": "src/mapRenderer.js",
      "line": 565,
      "context": "this.canvas.blur();"
    },
    {
      "name": "navigate",
      "file": "src/mapRenderer.js",
      "line": 571,
      "context": "* @param {string} direction - Direction to navigate (north, south, east, west)"
    },
    {
      "name": "navigateWithKeyboard",
      "file": "src/mapRenderer.js",
      "line": 573,
      "context": "navigateWithKeyboard(direction) {"
    },
    {
      "name": "getRoom",
      "file": "src/mapRenderer.js",
      "line": 575,
      "context": "const currentRoom = this.dataLoader.getRoom(currentRoomId);"
    },
    {
      "name": "warn",
      "file": "src/mapRenderer.js",
      "line": 578,
      "context": "console.warn('No current room for keyboard navigation');"
    },
    {
      "name": "findRoomInDirection",
      "file": "src/mapRenderer.js",
      "line": 583,
      "context": "const targetRoomId = this.findRoomInDirection(currentRoomId, direction);"
    },
    {
      "name": "getRoom",
      "file": "src/mapRenderer.js",
      "line": 586,
      "context": "const targetRoom = this.dataLoader.getRoom(targetRoomId);"
    },
    {
      "name": "isRoomAccessible",
      "file": "src/mapRenderer.js",
      "line": 587,
      "context": "if (targetRoom && this.gameState.isRoomAccessible(targetRoomId)) {"
    },
    {
      "name": "announceRoomNavigation",
      "file": "src/mapRenderer.js",
      "line": 589,
      "context": "this.announceRoomNavigation(targetRoom, direction);"
    },
    {
      "name": "attemptRoomNavigation",
      "file": "src/mapRenderer.js",
      "line": 592,
      "context": "this.attemptRoomNavigation(targetRoomId);"
    },
    {
      "name": "announceNavigationBlocked",
      "file": "src/mapRenderer.js",
      "line": 595,
      "context": "this.announceNavigationBlocked(direction);"
    },
    {
      "name": "announceNoRoom",
      "file": "src/mapRenderer.js",
      "line": 599,
      "context": "this.announceNoRoom(direction);"
    },
    {
      "name": "findRoomInDirection",
      "file": "src/mapRenderer.js",
      "line": 609,
      "context": "findRoomInDirection(fromRoomId, direction) {"
    },
    {
      "name": "get",
      "file": "src/mapRenderer.js",
      "line": 610,
      "context": "const currentPos = this.roomPositions.get(fromRoomId);"
    },
    {
      "name": "entries",
      "file": "src/mapRenderer.js",
      "line": 629,
      "context": "for (const [roomId, position] of this.roomPositions.entries()) {"
    },
    {
      "name": "sqrt",
      "file": "src/mapRenderer.js",
      "line": 640,
      "context": "const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);"
    },
    {
      "name": "room",
      "file": "src/mapRenderer.js",
      "line": 654,
      "context": "* Activate the current room (Enter/Space)"
    },
    {
      "name": "activateCurrentRoom",
      "file": "src/mapRenderer.js",
      "line": 656,
      "context": "activateCurrentRoom() {"
    },
    {
      "name": "isRoomAccessible",
      "file": "src/mapRenderer.js",
      "line": 658,
      "context": "if (this.gameState.isRoomAccessible(currentRoomId)) {"
    },
    {
      "name": "attemptRoomNavigation",
      "file": "src/mapRenderer.js",
      "line": 660,
      "context": "this.attemptRoomNavigation(currentRoomId);"
    },
    {
      "name": "announceRoomNavigation",
      "file": "src/mapRenderer.js",
      "line": 669,
      "context": "announceRoomNavigation(targetRoom, direction) {"
    },
    {
      "name": "log",
      "file": "src/mapRenderer.js",
      "line": 671,
      "context": "console.log(`♿ Map navigation: ${message}`);"
    },
    {
      "name": "CustomEvent",
      "file": "src/mapRenderer.js",
      "line": 674,
      "context": "const event = new CustomEvent('accessibility-map-announce', {"
    },
    {
      "name": "dispatchEvent",
      "file": "src/mapRenderer.js",
      "line": 677,
      "context": "document.dispatchEvent(event);"
    },
    {
      "name": "announceNavigationBlocked",
      "file": "src/mapRenderer.js",
      "line": 684,
      "context": "announceNavigationBlocked(direction) {"
    },
    {
      "name": "log",
      "file": "src/mapRenderer.js",
      "line": 686,
      "context": "console.log(`♿ Map navigation blocked: ${message}`);"
    },
    {
      "name": "CustomEvent",
      "file": "src/mapRenderer.js",
      "line": 688,
      "context": "const event = new CustomEvent('accessibility-map-announce', {"
    },
    {
      "name": "dispatchEvent",
      "file": "src/mapRenderer.js",
      "line": 691,
      "context": "document.dispatchEvent(event);"
    },
    {
      "name": "announceNoRoom",
      "file": "src/mapRenderer.js",
      "line": 698,
      "context": "announceNoRoom(direction) {"
    },
    {
      "name": "log",
      "file": "src/mapRenderer.js",
      "line": 700,
      "context": "console.log(`♿ Map navigation: ${message}`);"
    },
    {
      "name": "CustomEvent",
      "file": "src/mapRenderer.js",
      "line": 702,
      "context": "const event = new CustomEvent('accessibility-map-announce', {"
    },
    {
      "name": "dispatchEvent",
      "file": "src/mapRenderer.js",
      "line": 705,
      "context": "document.dispatchEvent(event);"
    },
    {
      "name": "announceMapState",
      "file": "src/mapRenderer.js",
      "line": 711,
      "context": "announceMapState() {"
    },
    {
      "name": "getRoom",
      "file": "src/mapRenderer.js",
      "line": 712,
      "context": "const currentRoom = this.dataLoader.getRoom(this.gameState.currentRoomId);"
    },
    {
      "name": "from",
      "file": "src/mapRenderer.js",
      "line": 715,
      "context": "const accessibleRooms = Array.from(this.gameState.unlockedRooms)"
    },
    {
      "name": "filter",
      "file": "src/mapRenderer.js",
      "line": 716,
      "context": ".filter(roomId => roomId !== this.gameState.currentRoomId)"
    },
    {
      "name": "map",
      "file": "src/mapRenderer.js",
      "line": 717,
      "context": ".map(roomId => this.dataLoader.getRoom(roomId))"
    },
    {
      "name": "getRoom",
      "file": "src/mapRenderer.js",
      "line": 717,
      "context": ".map(roomId => this.dataLoader.getRoom(roomId))"
    },
    {
      "name": "filter",
      "file": "src/mapRenderer.js",
      "line": 718,
      "context": ".filter(room => room)"
    },
    {
      "name": "map",
      "file": "src/mapRenderer.js",
      "line": 719,
      "context": ".map(room => room.name);"
    },
    {
      "name": "join",
      "file": "src/mapRenderer.js",
      "line": 722,
      "context": "`Accessible rooms: ${accessibleRooms.length > 0 ? accessibleRooms.join(', ') : 'none'}. ` +"
    },
    {
      "name": "CustomEvent",
      "file": "src/mapRenderer.js",
      "line": 725,
      "context": "const event = new CustomEvent('accessibility-map-announce', {"
    },
    {
      "name": "dispatchEvent",
      "file": "src/mapRenderer.js",
      "line": 728,
      "context": "document.dispatchEvent(event);"
    },
    {
      "name": "constructor",
      "file": "src/errorBoundary.js",
      "line": 6,
      "context": "constructor(gameState = null, uiManager = null) {"
    },
    {
      "name": "setupGlobalErrorHandler",
      "file": "src/errorBoundary.js",
      "line": 14,
      "context": "this.setupGlobalErrorHandler();"
    },
    {
      "name": "injectErrorStyles",
      "file": "src/errorBoundary.js",
      "line": 15,
      "context": "this.injectErrorStyles();"
    },
    {
      "name": "log",
      "file": "src/errorBoundary.js",
      "line": 17,
      "context": "console.log('🛡️ ErrorBoundary initialized - Enhanced error recovery system active');"
    },
    {
      "name": "setupGlobalErrorHandler",
      "file": "src/errorBoundary.js",
      "line": 23,
      "context": "setupGlobalErrorHandler() {"
    },
    {
      "name": "addEventListener",
      "file": "src/errorBoundary.js",
      "line": 25,
      "context": "window.addEventListener('error', (event) => {"
    },
    {
      "name": "handleError",
      "file": "src/errorBoundary.js",
      "line": 26,
      "context": "this.handleError({"
    },
    {
      "name": "addEventListener",
      "file": "src/errorBoundary.js",
      "line": 38,
      "context": "window.addEventListener('unhandledrejection', (event) => {"
    },
    {
      "name": "handleError",
      "file": "src/errorBoundary.js",
      "line": 39,
      "context": "this.handleError({"
    },
    {
      "name": "addEventListener",
      "file": "src/errorBoundary.js",
      "line": 48,
      "context": "window.addEventListener('error', (event) => {"
    },
    {
      "name": "handleError",
      "file": "src/errorBoundary.js",
      "line": 50,
      "context": "this.handleError({"
    },
    {
      "name": "handleError",
      "file": "src/errorBoundary.js",
      "line": 63,
      "context": "handleError(errorInfo) {"
    },
    {
      "name": "toISOString",
      "file": "src/errorBoundary.js",
      "line": 65,
      "context": "const timestamp = new Date().toISOString();"
    },
    {
      "name": "push",
      "file": "src/errorBoundary.js",
      "line": 74,
      "context": "this.errorLog.push(logEntry);"
    },
    {
      "name": "error",
      "file": "src/errorBoundary.js",
      "line": 75,
      "context": "console.error(`🚨 Error #${this.errorCount}:`, errorInfo);"
    },
    {
      "name": "attemptAutoSave",
      "file": "src/errorBoundary.js",
      "line": 78,
      "context": "this.attemptAutoSave();"
    },
    {
      "name": "showRecoveryDialog",
      "file": "src/errorBoundary.js",
      "line": 82,
      "context": "this.showRecoveryDialog(errorInfo);"
    },
    {
      "name": "showCriticalErrorScreen",
      "file": "src/errorBoundary.js",
      "line": 84,
      "context": "this.showCriticalErrorScreen();"
    },
    {
      "name": "attemptAutoSave",
      "file": "src/errorBoundary.js",
      "line": 91,
      "context": "attemptAutoSave() {"
    },
    {
      "name": "saveGame",
      "file": "src/errorBoundary.js",
      "line": 94,
      "context": "this.gameState.saveGame();"
    },
    {
      "name": "log",
      "file": "src/errorBoundary.js",
      "line": 95,
      "context": "console.log('💾 Auto-saved game state due to error');"
    },
    {
      "name": "warn",
      "file": "src/errorBoundary.js",
      "line": 98,
      "context": "console.warn('⚠️ Failed to auto-save game state:', saveError);"
    },
    {
      "name": "showRecoveryDialog",
      "file": "src/errorBoundary.js",
      "line": 106,
      "context": "showRecoveryDialog(errorInfo) {"
    },
    {
      "name": "querySelector",
      "file": "src/errorBoundary.js",
      "line": 108,
      "context": "if (document.querySelector('.error-recovery-dialog')) {"
    },
    {
      "name": "createElement",
      "file": "src/errorBoundary.js",
      "line": 112,
      "context": "const dialog = document.createElement('div');"
    },
    {
      "name": "setAttribute",
      "file": "src/errorBoundary.js",
      "line": 114,
      "context": "dialog.setAttribute('role', 'dialog');"
    },
    {
      "name": "setAttribute",
      "file": "src/errorBoundary.js",
      "line": 115,
      "context": "dialog.setAttribute('aria-labelledby', 'error-title');"
    },
    {
      "name": "setAttribute",
      "file": "src/errorBoundary.js",
      "line": 116,
      "context": "dialog.setAttribute('aria-describedby', 'error-description');"
    },
    {
      "name": "escapeHtml",
      "file": "src/errorBoundary.js",
      "line": 136,
      "context": "<code>${this.escapeHtml(errorInfo.message || 'Unknown error')}</code>"
    },
    {
      "name": "handleRefresh",
      "file": "src/errorBoundary.js",
      "line": 141,
      "context": "<button class=\"error-btn error-btn-primary\" onclick=\"this.handleRefresh()\">"
    },
    {
      "name": "handleContinue",
      "file": "src/errorBoundary.js",
      "line": 144,
      "context": "<button class=\"error-btn error-btn-secondary\" onclick=\"this.handleContinue()\">"
    },
    {
      "name": "handleSaveExit",
      "file": "src/errorBoundary.js",
      "line": 147,
      "context": "<button class=\"error-btn error-btn-secondary\" onclick=\"this.handleSaveExit()\">"
    },
    {
      "name": "handleToggleDetails",
      "file": "src/errorBoundary.js",
      "line": 150,
      "context": "<button class=\"error-btn error-btn-tertiary\" onclick=\"this.handleToggleDetails()\">"
    },
    {
      "name": "setupDialogHandlers",
      "file": "src/errorBoundary.js",
      "line": 162,
      "context": "this.setupDialogHandlers(dialog);"
    },
    {
      "name": "appendChild",
      "file": "src/errorBoundary.js",
      "line": 164,
      "context": "document.body.appendChild(dialog);"
    },
    {
      "name": "querySelector",
      "file": "src/errorBoundary.js",
      "line": 168,
      "context": "const primaryButton = dialog.querySelector('.error-btn-primary');"
    },
    {
      "name": "focus",
      "file": "src/errorBoundary.js",
      "line": 169,
      "context": "if (primaryButton) primaryButton.focus();"
    },
    {
      "name": "setupDialogHandlers",
      "file": "src/errorBoundary.js",
      "line": 177,
      "context": "setupDialogHandlers(dialog) {"
    },
    {
      "name": "querySelector",
      "file": "src/errorBoundary.js",
      "line": 178,
      "context": "const refreshBtn = dialog.querySelector('button[onclick*=\"handleRefresh\"]');"
    },
    {
      "name": "querySelector",
      "file": "src/errorBoundary.js",
      "line": 179,
      "context": "const continueBtn = dialog.querySelector('button[onclick*=\"handleContinue\"]');"
    },
    {
      "name": "querySelector",
      "file": "src/errorBoundary.js",
      "line": 180,
      "context": "const saveExitBtn = dialog.querySelector('button[onclick*=\"handleSaveExit\"]');"
    },
    {
      "name": "querySelector",
      "file": "src/errorBoundary.js",
      "line": 181,
      "context": "const detailsBtn = dialog.querySelector('button[onclick*=\"handleToggleDetails\"]');"
    },
    {
      "name": "handleRefresh",
      "file": "src/errorBoundary.js",
      "line": 184,
      "context": "refreshBtn.onclick = () => this.handleRefresh();"
    },
    {
      "name": "handleContinue",
      "file": "src/errorBoundary.js",
      "line": 188,
      "context": "continueBtn.onclick = () => this.handleContinue(dialog);"
    },
    {
      "name": "handleSaveExit",
      "file": "src/errorBoundary.js",
      "line": 192,
      "context": "saveExitBtn.onclick = () => this.handleSaveExit();"
    },
    {
      "name": "handleToggleDetails",
      "file": "src/errorBoundary.js",
      "line": 196,
      "context": "detailsBtn.onclick = () => this.handleToggleDetails(dialog);"
    },
    {
      "name": "addEventListener",
      "file": "src/errorBoundary.js",
      "line": 200,
      "context": "dialog.addEventListener('keydown', (event) => {"
    },
    {
      "name": "handleContinue",
      "file": "src/errorBoundary.js",
      "line": 202,
      "context": "this.handleContinue(dialog);"
    },
    {
      "name": "handleRefresh",
      "file": "src/errorBoundary.js",
      "line": 210,
      "context": "handleRefresh() {"
    },
    {
      "name": "reload",
      "file": "src/errorBoundary.js",
      "line": 212,
      "context": "window.location.reload();"
    },
    {
      "name": "error",
      "file": "src/errorBoundary.js",
      "line": 214,
      "context": "console.error('Failed to refresh:', error);"
    },
    {
      "name": "alert",
      "file": "src/errorBoundary.js",
      "line": 215,
      "context": "alert('Unable to refresh. Please manually refresh your browser.');"
    },
    {
      "name": "handleContinue",
      "file": "src/errorBoundary.js",
      "line": 223,
      "context": "handleContinue(dialog) {"
    },
    {
      "name": "remove",
      "file": "src/errorBoundary.js",
      "line": 225,
      "context": "dialog.remove();"
    },
    {
      "name": "announceToScreenReader",
      "file": "src/errorBoundary.js",
      "line": 230,
      "context": "this.uiManager.announceToScreenReader('Continuing game after error recovery');"
    },
    {
      "name": "handleSaveExit",
      "file": "src/errorBoundary.js",
      "line": 237,
      "context": "handleSaveExit() {"
    },
    {
      "name": "saveGame",
      "file": "src/errorBoundary.js",
      "line": 240,
      "context": "this.gameState.saveGame();"
    },
    {
      "name": "createElement",
      "file": "src/errorBoundary.js",
      "line": 244,
      "context": "const confirmDialog = document.createElement('div');"
    },
    {
      "name": "remove",
      "file": "src/errorBoundary.js",
      "line": 250,
      "context": "<button class=\"error-btn error-btn-primary\" onclick=\"this.parentElement.parentElement.remove()\">"
    },
    {
      "name": "appendChild",
      "file": "src/errorBoundary.js",
      "line": 256,
      "context": "document.body.appendChild(confirmDialog);"
    },
    {
      "name": "remove",
      "file": "src/errorBoundary.js",
      "line": 261,
      "context": "confirmDialog.remove();"
    },
    {
      "name": "error",
      "file": "src/errorBoundary.js",
      "line": 266,
      "context": "console.error('Failed to save game:', error);"
    },
    {
      "name": "alert",
      "file": "src/errorBoundary.js",
      "line": 267,
      "context": "alert('Save failed. Please try again or manually save using Ctrl+S.');"
    },
    {
      "name": "handleToggleDetails",
      "file": "src/errorBoundary.js",
      "line": 275,
      "context": "handleToggleDetails(dialog) {"
    },
    {
      "name": "querySelector",
      "file": "src/errorBoundary.js",
      "line": 276,
      "context": "const details = dialog.querySelector('.error-details');"
    },
    {
      "name": "querySelector",
      "file": "src/errorBoundary.js",
      "line": 277,
      "context": "const button = dialog.querySelector('button[onclick*=\"handleToggleDetails\"]');"
    },
    {
      "name": "showCriticalErrorScreen",
      "file": "src/errorBoundary.js",
      "line": 289,
      "context": "showCriticalErrorScreen() {"
    },
    {
      "name": "createElement",
      "file": "src/errorBoundary.js",
      "line": 293,
      "context": "const criticalScreen = document.createElement('div');"
    },
    {
      "name": "setAttribute",
      "file": "src/errorBoundary.js",
      "line": 295,
      "context": "criticalScreen.setAttribute('role', 'dialog');"
    },
    {
      "name": "setAttribute",
      "file": "src/errorBoundary.js",
      "line": 296,
      "context": "criticalScreen.setAttribute('aria-labelledby', 'critical-error-title');"
    },
    {
      "name": "occurred",
      "file": "src/errorBoundary.js",
      "line": 306,
      "context": "<p>Multiple errors have occurred (${this.errorCount}/${this.maxErrors})."
    },
    {
      "name": "reload",
      "file": "src/errorBoundary.js",
      "line": 319,
      "context": "<button class=\"error-btn error-btn-primary\" onclick=\"window.location.reload()\">"
    },
    {
      "name": "showErrorLog",
      "file": "src/errorBoundary.js",
      "line": 322,
      "context": "<button class=\"error-btn error-btn-secondary\" onclick=\"this.showErrorLog()\">"
    },
    {
      "name": "appendChild",
      "file": "src/errorBoundary.js",
      "line": 329,
      "context": "document.body.appendChild(criticalScreen);"
    },
    {
      "name": "showErrorLog",
      "file": "src/errorBoundary.js",
      "line": 335,
      "context": "showErrorLog() {"
    },
    {
      "name": "open",
      "file": "src/errorBoundary.js",
      "line": 336,
      "context": "const logWindow = window.open('', '_blank', 'width=800,height=600');"
    },
    {
      "name": "write",
      "file": "src/errorBoundary.js",
      "line": 337,
      "context": "logWindow.document.write(`"
    },
    {
      "name": "stringify",
      "file": "src/errorBoundary.js",
      "line": 342,
      "context": "<pre>${JSON.stringify(this.errorLog, null, 2)}</pre>"
    },
    {
      "name": "escapeHtml",
      "file": "src/errorBoundary.js",
      "line": 353,
      "context": "escapeHtml(text) {"
    },
    {
      "name": "createElement",
      "file": "src/errorBoundary.js",
      "line": 354,
      "context": "const div = document.createElement('div');"
    },
    {
      "name": "injectErrorStyles",
      "file": "src/errorBoundary.js",
      "line": 362,
      "context": "injectErrorStyles() {"
    },
    {
      "name": "rgba",
      "file": "src/errorBoundary.js",
      "line": 370,
      "context": "background: rgba(44, 24, 16, 0.95);"
    },
    {
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 375,
      "context": "font-family: var(--font-ui, 'Segoe UI', sans-serif);"
    },
    {
      "name": "blur",
      "file": "src/errorBoundary.js",
      "line": 376,
      "context": "backdrop-filter: blur(5px);"
    },
    {
      "name": "gradient",
      "file": "src/errorBoundary.js",
      "line": 380,
      "context": "background: linear-gradient(135deg, var(--medieval-parchment, #F5E6D3), var(--medieval-parchment-light, #FAF0E6));"
    },
    {
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 380,
      "context": "background: linear-gradient(135deg, var(--medieval-parchment, #F5E6D3), var(--medieval-parchment-light, #FAF0E6));"
    },
    {
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 380,
      "context": "background: linear-gradient(135deg, var(--medieval-parchment, #F5E6D3), var(--medieval-parchment-light, #FAF0E6));"
    },
    {
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 381,
      "context": "border: 3px solid var(--medieval-gold, #D4AF37);"
    },
    {
      "name": "rgba",
      "file": "src/errorBoundary.js",
      "line": 386,
      "context": "box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);"
    },
    {
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 402,
      "context": "color: var(--medieval-ink, #2C1810);"
    },
    {
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 404,
      "context": "font-family: var(--font-heading, 'Cinzel', serif);"
    },
    {
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 410,
      "context": "color: var(--medieval-ink, #2C1810);"
    },
    {
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 414,
      "context": "background: var(--medieval-parchment-dark, #E8D5B7);"
    },
    {
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 419,
      "context": "border-left: 4px solid var(--medieval-crimson, #8B0000);"
    },
    {
      "name": "rgba",
      "file": "src/errorBoundary.js",
      "line": 423,
      "context": "background: rgba(0, 0, 0, 0.1);"
    },
    {
      "name": "gradient",
      "file": "src/errorBoundary.js",
      "line": 449,
      "context": "background: linear-gradient(135deg, var(--medieval-gold, #D4AF37), var(--medieval-gold-dark, #B8941F));"
    },
    {
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 449,
      "context": "background: linear-gradient(135deg, var(--medieval-gold, #D4AF37), var(--medieval-gold-dark, #B8941F));"
    },
    {
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 449,
      "context": "background: linear-gradient(135deg, var(--medieval-gold, #D4AF37), var(--medieval-gold-dark, #B8941F));"
    },
    {
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 450,
      "context": "color: var(--medieval-ink, #2C1810);"
    },
    {
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 451,
      "context": "border-color: var(--medieval-gold-dark, #B8941F);"
    },
    {
      "name": "translateY",
      "file": "src/errorBoundary.js",
      "line": 455,
      "context": "transform: translateY(-2px);"
    },
    {
      "name": "rgba",
      "file": "src/errorBoundary.js",
      "line": 456,
      "context": "box-shadow: 0 5px 15px rgba(212, 175, 55, 0.3);"
    },
    {
      "name": "gradient",
      "file": "src/errorBoundary.js",
      "line": 460,
      "context": "background: linear-gradient(135deg, var(--medieval-blue, #4A6FA5), var(--medieval-blue-dark, #3A5A8A));"
    },
    {
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 460,
      "context": "background: linear-gradient(135deg, var(--medieval-blue, #4A6FA5), var(--medieval-blue-dark, #3A5A8A));"
    },
    {
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 460,
      "context": "background: linear-gradient(135deg, var(--medieval-blue, #4A6FA5), var(--medieval-blue-dark, #3A5A8A));"
    },
    {
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 462,
      "context": "border-color: var(--medieval-blue-dark, #3A5A8A);"
    },
    {
      "name": "translateY",
      "file": "src/errorBoundary.js",
      "line": 466,
      "context": "transform: translateY(-2px);"
    },
    {
      "name": "rgba",
      "file": "src/errorBoundary.js",
      "line": 467,
      "context": "box-shadow: 0 5px 15px rgba(74, 111, 165, 0.3);"
    },
    {
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 472,
      "context": "color: var(--medieval-ink, #2C1810);"
    },
    {
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 473,
      "context": "border-color: var(--medieval-ink-light, #8B7355);"
    },
    {
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 477,
      "context": "background: var(--medieval-parchment-dark, #E8D5B7);"
    },
    {
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 482,
      "context": "color: var(--medieval-ink-light, #8B7355);"
    },
    {
      "name": "media",
      "file": "src/errorBoundary.js",
      "line": 497,
      "context": "@media (max-width: 768px) {"
    },
    {
      "name": "media",
      "file": "src/errorBoundary.js",
      "line": 515,
      "context": "@media (prefers-reduced-motion: reduce) {"
    },
    {
      "name": "createElement",
      "file": "src/errorBoundary.js",
      "line": 522,
      "context": "const styleSheet = document.createElement('style');"
    },
    {
      "name": "appendChild",
      "file": "src/errorBoundary.js",
      "line": 524,
      "context": "document.head.appendChild(styleSheet);"
    },
    {
      "name": "getErrorStats",
      "file": "src/errorBoundary.js",
      "line": 531,
      "context": "getErrorStats() {"
    },
    {
      "name": "reset",
      "file": "src/errorBoundary.js",
      "line": 543,
      "context": "reset() {"
    },
    {
      "name": "querySelectorAll",
      "file": "src/errorBoundary.js",
      "line": 549,
      "context": "document.querySelectorAll('.error-recovery-dialog, .critical-error-screen').forEach(dialog => {"
    },
    {
      "name": "forEach",
      "file": "src/errorBoundary.js",
      "line": 549,
      "context": "document.querySelectorAll('.error-recovery-dialog, .critical-error-screen').forEach(dialog => {"
    },
    {
      "name": "remove",
      "file": "src/errorBoundary.js",
      "line": 550,
      "context": "dialog.remove();"
    },
    {
      "name": "constructor",
      "file": "src/accessibilityManager.js",
      "line": 7,
      "context": "constructor() {"
    },
    {
      "name": "Map",
      "file": "src/accessibilityManager.js",
      "line": 11,
      "context": "this.liveRegions = new Map();"
    },
    {
      "name": "Map",
      "file": "src/accessibilityManager.js",
      "line": 12,
      "context": "this.keyboardShortcuts = new Map();"
    },
    {
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 28,
      "context": "console.log('♿ AccessibilityManager initialized');"
    },
    {
      "name": "initialize",
      "file": "src/accessibilityManager.js",
      "line": 29,
      "context": "this.initialize();"
    },
    {
      "name": "initialize",
      "file": "src/accessibilityManager.js",
      "line": 35,
      "context": "initialize() {"
    },
    {
      "name": "loadPreferences",
      "file": "src/accessibilityManager.js",
      "line": 36,
      "context": "this.loadPreferences();"
    },
    {
      "name": "setupKeyboardNavigation",
      "file": "src/accessibilityManager.js",
      "line": 37,
      "context": "this.setupKeyboardNavigation();"
    },
    {
      "name": "enhanceARIA",
      "file": "src/accessibilityManager.js",
      "line": 38,
      "context": "this.enhanceARIA();"
    },
    {
      "name": "createLiveRegions",
      "file": "src/accessibilityManager.js",
      "line": 39,
      "context": "this.createLiveRegions();"
    },
    {
      "name": "setupHighContrastMode",
      "file": "src/accessibilityManager.js",
      "line": 40,
      "context": "this.setupHighContrastMode();"
    },
    {
      "name": "detectAccessibilityFeatures",
      "file": "src/accessibilityManager.js",
      "line": 41,
      "context": "this.detectAccessibilityFeatures();"
    },
    {
      "name": "setupFocusManagement",
      "file": "src/accessibilityManager.js",
      "line": 42,
      "context": "this.setupFocusManagement();"
    },
    {
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 44,
      "context": "console.log('♿ Accessibility features initialized');"
    },
    {
      "name": "loadPreferences",
      "file": "src/accessibilityManager.js",
      "line": 50,
      "context": "loadPreferences() {"
    },
    {
      "name": "getItem",
      "file": "src/accessibilityManager.js",
      "line": 52,
      "context": "const saved = localStorage.getItem('accessibility-preferences');"
    },
    {
      "name": "parse",
      "file": "src/accessibilityManager.js",
      "line": 54,
      "context": "this.preferences = { ...this.preferences, ...JSON.parse(saved) };"
    },
    {
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 55,
      "context": "console.log('♿ Loaded accessibility preferences');"
    },
    {
      "name": "applyPreferences",
      "file": "src/accessibilityManager.js",
      "line": 59,
      "context": "this.applyPreferences();"
    },
    {
      "name": "warn",
      "file": "src/accessibilityManager.js",
      "line": 61,
      "context": "console.warn('⚠️ Could not load accessibility preferences:', error);"
    },
    {
      "name": "savePreferences",
      "file": "src/accessibilityManager.js",
      "line": 68,
      "context": "savePreferences() {"
    },
    {
      "name": "setItem",
      "file": "src/accessibilityManager.js",
      "line": 70,
      "context": "localStorage.setItem('accessibility-preferences', JSON.stringify(this.preferences));"
    },
    {
      "name": "stringify",
      "file": "src/accessibilityManager.js",
      "line": 70,
      "context": "localStorage.setItem('accessibility-preferences', JSON.stringify(this.preferences));"
    },
    {
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 71,
      "context": "console.log('♿ Saved accessibility preferences');"
    },
    {
      "name": "warn",
      "file": "src/accessibilityManager.js",
      "line": 73,
      "context": "console.warn('⚠️ Could not save accessibility preferences:', error);"
    },
    {
      "name": "applyPreferences",
      "file": "src/accessibilityManager.js",
      "line": 80,
      "context": "applyPreferences() {"
    },
    {
      "name": "enableHighContrastMode",
      "file": "src/accessibilityManager.js",
      "line": 82,
      "context": "this.enableHighContrastMode();"
    },
    {
      "name": "enableReducedMotion",
      "file": "src/accessibilityManager.js",
      "line": 86,
      "context": "this.enableReducedMotion();"
    },
    {
      "name": "enableLargeText",
      "file": "src/accessibilityManager.js",
      "line": 90,
      "context": "this.enableLargeText();"
    },
    {
      "name": "enableScreenReaderMode",
      "file": "src/accessibilityManager.js",
      "line": 94,
      "context": "this.enableScreenReaderMode();"
    },
    {
      "name": "detectAccessibilityFeatures",
      "file": "src/accessibilityManager.js",
      "line": 101,
      "context": "detectAccessibilityFeatures() {"
    },
    {
      "name": "matchMedia",
      "file": "src/accessibilityManager.js",
      "line": 104,
      "context": "const reducedMotionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');"
    },
    {
      "name": "addEventListener",
      "file": "src/accessibilityManager.js",
      "line": 108,
      "context": "reducedMotionQuery.addEventListener('change', (e) => {"
    },
    {
      "name": "applyPreferences",
      "file": "src/accessibilityManager.js",
      "line": 110,
      "context": "this.applyPreferences();"
    },
    {
      "name": "announce",
      "file": "src/accessibilityManager.js",
      "line": 111,
      "context": "this.announce('Motion preferences updated');"
    },
    {
      "name": "matchMedia",
      "file": "src/accessibilityManager.js",
      "line": 117,
      "context": "const highContrastQuery = window.matchMedia('(prefers-contrast: high)');"
    },
    {
      "name": "enableHighContrastMode",
      "file": "src/accessibilityManager.js",
      "line": 120,
      "context": "this.enableHighContrastMode();"
    },
    {
      "name": "detectScreenReader",
      "file": "src/accessibilityManager.js",
      "line": 125,
      "context": "this.detectScreenReader();"
    },
    {
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 127,
      "context": "console.log('♿ Accessibility features detected:', this.preferences);"
    },
    {
      "name": "detectScreenReader",
      "file": "src/accessibilityManager.js",
      "line": 133,
      "context": "detectScreenReader() {"
    },
    {
      "name": "includes",
      "file": "src/accessibilityManager.js",
      "line": 137,
      "context": "navigator.userAgent.includes('NVDA') ||"
    },
    {
      "name": "includes",
      "file": "src/accessibilityManager.js",
      "line": 138,
      "context": "navigator.userAgent.includes('JAWS') ||"
    },
    {
      "name": "includes",
      "file": "src/accessibilityManager.js",
      "line": 139,
      "context": "navigator.userAgent.includes('Orca'),"
    },
    {
      "name": "matchMedia",
      "file": "src/accessibilityManager.js",
      "line": 145,
      "context": "window.matchMedia && window.matchMedia('(forced-colors: active)').matches"
    },
    {
      "name": "some",
      "file": "src/accessibilityManager.js",
      "line": 148,
      "context": "if (indicators.some(indicator => indicator)) {"
    },
    {
      "name": "enableScreenReaderMode",
      "file": "src/accessibilityManager.js",
      "line": 150,
      "context": "this.enableScreenReaderMode();"
    },
    {
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 151,
      "context": "console.log('♿ Screen reader detected');"
    },
    {
      "name": "setupKeyboardNavigation",
      "file": "src/accessibilityManager.js",
      "line": 158,
      "context": "setupKeyboardNavigation() {"
    },
    {
      "name": "addEventListener",
      "file": "src/accessibilityManager.js",
      "line": 160,
      "context": "document.addEventListener('keydown', (event) => {"
    },
    {
      "name": "handleGlobalKeyPress",
      "file": "src/accessibilityManager.js",
      "line": 161,
      "context": "this.handleGlobalKeyPress(event);"
    },
    {
      "name": "set",
      "file": "src/accessibilityManager.js",
      "line": 165,
      "context": "this.keyboardShortcuts.set('Alt+1', () => this.focusOnSection('map-area'));"
    },
    {
      "name": "focusOnSection",
      "file": "src/accessibilityManager.js",
      "line": 165,
      "context": "this.keyboardShortcuts.set('Alt+1', () => this.focusOnSection('map-area'));"
    },
    {
      "name": "set",
      "file": "src/accessibilityManager.js",
      "line": 166,
      "context": "this.keyboardShortcuts.set('Alt+2', () => this.focusOnSection('room-info'));"
    },
    {
      "name": "focusOnSection",
      "file": "src/accessibilityManager.js",
      "line": 166,
      "context": "this.keyboardShortcuts.set('Alt+2', () => this.focusOnSection('room-info'));"
    },
    {
      "name": "set",
      "file": "src/accessibilityManager.js",
      "line": 167,
      "context": "this.keyboardShortcuts.set('Alt+3', () => this.focusOnSection('question-area'));"
    },
    {
      "name": "focusOnSection",
      "file": "src/accessibilityManager.js",
      "line": 167,
      "context": "this.keyboardShortcuts.set('Alt+3', () => this.focusOnSection('question-area'));"
    },
    {
      "name": "set",
      "file": "src/accessibilityManager.js",
      "line": 168,
      "context": "this.keyboardShortcuts.set('Alt+4', () => this.focusOnSection('answer-buttons'));"
    },
    {
      "name": "focusOnSection",
      "file": "src/accessibilityManager.js",
      "line": 168,
      "context": "this.keyboardShortcuts.set('Alt+4', () => this.focusOnSection('answer-buttons'));"
    },
    {
      "name": "set",
      "file": "src/accessibilityManager.js",
      "line": 169,
      "context": "this.keyboardShortcuts.set('Alt+5', () => this.focusOnSection('game-controls'));"
    },
    {
      "name": "focusOnSection",
      "file": "src/accessibilityManager.js",
      "line": 169,
      "context": "this.keyboardShortcuts.set('Alt+5', () => this.focusOnSection('game-controls'));"
    },
    {
      "name": "set",
      "file": "src/accessibilityManager.js",
      "line": 170,
      "context": "this.keyboardShortcuts.set('Alt+h', () => this.toggleHighContrastMode());"
    },
    {
      "name": "toggleHighContrastMode",
      "file": "src/accessibilityManager.js",
      "line": 170,
      "context": "this.keyboardShortcuts.set('Alt+h', () => this.toggleHighContrastMode());"
    },
    {
      "name": "set",
      "file": "src/accessibilityManager.js",
      "line": 171,
      "context": "this.keyboardShortcuts.set('Alt+?', () => this.showKeyboardHelp());"
    },
    {
      "name": "showKeyboardHelp",
      "file": "src/accessibilityManager.js",
      "line": 171,
      "context": "this.keyboardShortcuts.set('Alt+?', () => this.showKeyboardHelp());"
    },
    {
      "name": "set",
      "file": "src/accessibilityManager.js",
      "line": 172,
      "context": "this.keyboardShortcuts.set('Alt+s', () => this.skipToMainContent());"
    },
    {
      "name": "skipToMainContent",
      "file": "src/accessibilityManager.js",
      "line": 172,
      "context": "this.keyboardShortcuts.set('Alt+s', () => this.skipToMainContent());"
    },
    {
      "name": "setupSpatialNavigation",
      "file": "src/accessibilityManager.js",
      "line": 175,
      "context": "this.setupSpatialNavigation();"
    },
    {
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 177,
      "context": "console.log('⌨️ Keyboard navigation setup complete');"
    },
    {
      "name": "handleGlobalKeyPress",
      "file": "src/accessibilityManager.js",
      "line": 183,
      "context": "handleGlobalKeyPress(event) {"
    },
    {
      "name": "getKeyboardShortcut",
      "file": "src/accessibilityManager.js",
      "line": 184,
      "context": "const key = this.getKeyboardShortcut(event);"
    },
    {
      "name": "has",
      "file": "src/accessibilityManager.js",
      "line": 187,
      "context": "if (this.keyboardShortcuts.has(key)) {"
    },
    {
      "name": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 188,
      "context": "event.preventDefault();"
    },
    {
      "name": "get",
      "file": "src/accessibilityManager.js",
      "line": 189,
      "context": "this.keyboardShortcuts.get(key)();"
    },
    {
      "name": "handleTabNavigation",
      "file": "src/accessibilityManager.js",
      "line": 196,
      "context": "this.handleTabNavigation(event);"
    },
    {
      "name": "handleActivation",
      "file": "src/accessibilityManager.js",
      "line": 200,
      "context": "this.handleActivation(event);"
    },
    {
      "name": "handleEscape",
      "file": "src/accessibilityManager.js",
      "line": 203,
      "context": "this.handleEscape(event);"
    },
    {
      "name": "handleArrowNavigation",
      "file": "src/accessibilityManager.js",
      "line": 209,
      "context": "this.handleArrowNavigation(event);"
    },
    {
      "name": "handleNumberKeyPress",
      "file": "src/accessibilityManager.js",
      "line": 216,
      "context": "this.handleNumberKeyPress(event);"
    },
    {
      "name": "getKeyboardShortcut",
      "file": "src/accessibilityManager.js",
      "line": 224,
      "context": "getKeyboardShortcut(event) {"
    },
    {
      "name": "push",
      "file": "src/accessibilityManager.js",
      "line": 226,
      "context": "if (event.ctrlKey) modifiers.push('Ctrl');"
    },
    {
      "name": "push",
      "file": "src/accessibilityManager.js",
      "line": 227,
      "context": "if (event.altKey) modifiers.push('Alt');"
    },
    {
      "name": "push",
      "file": "src/accessibilityManager.js",
      "line": 228,
      "context": "if (event.shiftKey) modifiers.push('Shift');"
    },
    {
      "name": "push",
      "file": "src/accessibilityManager.js",
      "line": 230,
      "context": "modifiers.push(event.key);"
    },
    {
      "name": "join",
      "file": "src/accessibilityManager.js",
      "line": 231,
      "context": "return modifiers.join('+');"
    },
    {
      "name": "setupSpatialNavigation",
      "file": "src/accessibilityManager.js",
      "line": 237,
      "context": "setupSpatialNavigation() {"
    },
    {
      "name": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 239,
      "context": "const mapCanvas = document.getElementById('map-canvas');"
    },
    {
      "name": "addEventListener",
      "file": "src/accessibilityManager.js",
      "line": 241,
      "context": "mapCanvas.addEventListener('keydown', (event) => {"
    },
    {
      "name": "includes",
      "file": "src/accessibilityManager.js",
      "line": 242,
      "context": "if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {"
    },
    {
      "name": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 243,
      "context": "event.preventDefault();"
    },
    {
      "name": "navigateMapWithKeys",
      "file": "src/accessibilityManager.js",
      "line": 244,
      "context": "this.navigateMapWithKeys(event.key);"
    },
    {
      "name": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 250,
      "context": "const answerContainer = document.getElementById('answer-buttons');"
    },
    {
      "name": "addEventListener",
      "file": "src/accessibilityManager.js",
      "line": 252,
      "context": "answerContainer.addEventListener('keydown', (event) => {"
    },
    {
      "name": "includes",
      "file": "src/accessibilityManager.js",
      "line": 253,
      "context": "if (['ArrowUp', 'ArrowDown'].includes(event.key)) {"
    },
    {
      "name": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 254,
      "context": "event.preventDefault();"
    },
    {
      "name": "navigateAnswersWithKeys",
      "file": "src/accessibilityManager.js",
      "line": 255,
      "context": "this.navigateAnswersWithKeys(event.key);"
    },
    {
      "name": "navigateMapWithKeys",
      "file": "src/accessibilityManager.js",
      "line": 264,
      "context": "navigateMapWithKeys(direction) {"
    },
    {
      "name": "announce",
      "file": "src/accessibilityManager.js",
      "line": 274,
      "context": "this.announce(`Navigating ${mappedDirection} on map`);"
    },
    {
      "name": "CustomEvent",
      "file": "src/accessibilityManager.js",
      "line": 277,
      "context": "const event = new CustomEvent('accessibility-map-navigate', {"
    },
    {
      "name": "dispatchEvent",
      "file": "src/accessibilityManager.js",
      "line": 280,
      "context": "document.dispatchEvent(event);"
    },
    {
      "name": "navigateAnswersWithKeys",
      "file": "src/accessibilityManager.js",
      "line": 286,
      "context": "navigateAnswersWithKeys(direction) {"
    },
    {
      "name": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 287,
      "context": "const buttons = document.querySelectorAll('#answer-buttons button:not([disabled])');"
    },
    {
      "name": "not",
      "file": "src/accessibilityManager.js",
      "line": 287,
      "context": "const buttons = document.querySelectorAll('#answer-buttons button:not([disabled])');"
    },
    {
      "name": "from",
      "file": "src/accessibilityManager.js",
      "line": 291,
      "context": "let currentIndex = Array.from(buttons).indexOf(currentFocus);"
    },
    {
      "name": "indexOf",
      "file": "src/accessibilityManager.js",
      "line": 291,
      "context": "let currentIndex = Array.from(buttons).indexOf(currentFocus);"
    },
    {
      "name": "focus",
      "file": "src/accessibilityManager.js",
      "line": 299,
      "context": "buttons[currentIndex].focus();"
    },
    {
      "name": "announce",
      "file": "src/accessibilityManager.js",
      "line": 300,
      "context": "this.announce(`Answer option ${currentIndex + 1}: ${buttons[currentIndex].textContent}`);"
    },
    {
      "name": "handleNumberKeyPress",
      "file": "src/accessibilityManager.js",
      "line": 306,
      "context": "handleNumberKeyPress(event) {"
    },
    {
      "name": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 308,
      "context": "const questionArea = document.getElementById('question-area');"
    },
    {
      "name": "contains",
      "file": "src/accessibilityManager.js",
      "line": 309,
      "context": "if (!questionArea || !questionArea.contains(document.activeElement)) {"
    },
    {
      "name": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 314,
      "context": "const buttons = document.querySelectorAll('#answer-buttons button:not([disabled])');"
    },
    {
      "name": "not",
      "file": "src/accessibilityManager.js",
      "line": 314,
      "context": "const buttons = document.querySelectorAll('#answer-buttons button:not([disabled])');"
    },
    {
      "name": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 317,
      "context": "event.preventDefault();"
    },
    {
      "name": "click",
      "file": "src/accessibilityManager.js",
      "line": 318,
      "context": "buttons[answerIndex].click();"
    },
    {
      "name": "announce",
      "file": "src/accessibilityManager.js",
      "line": 319,
      "context": "this.announce(`Selected answer ${event.key}: ${buttons[answerIndex].textContent}`);"
    },
    {
      "name": "enhanceARIA",
      "file": "src/accessibilityManager.js",
      "line": 326,
      "context": "enhanceARIA() {"
    },
    {
      "name": "addSkipLinks",
      "file": "src/accessibilityManager.js",
      "line": 328,
      "context": "this.addSkipLinks();"
    },
    {
      "name": "enhanceFormControls",
      "file": "src/accessibilityManager.js",
      "line": 331,
      "context": "this.enhanceFormControls();"
    },
    {
      "name": "addLandmarkRoles",
      "file": "src/accessibilityManager.js",
      "line": 334,
      "context": "this.addLandmarkRoles();"
    },
    {
      "name": "enhanceDynamicContent",
      "file": "src/accessibilityManager.js",
      "line": 337,
      "context": "this.enhanceDynamicContent();"
    },
    {
      "name": "addKeyboardInstructions",
      "file": "src/accessibilityManager.js",
      "line": 340,
      "context": "this.addKeyboardInstructions();"
    },
    {
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 342,
      "context": "console.log('♿ ARIA enhancements applied');"
    },
    {
      "name": "addSkipLinks",
      "file": "src/accessibilityManager.js",
      "line": 348,
      "context": "addSkipLinks() {"
    },
    {
      "name": "createElement",
      "file": "src/accessibilityManager.js",
      "line": 349,
      "context": "const skipLinks = document.createElement('div');"
    },
    {
      "name": "insertBefore",
      "file": "src/accessibilityManager.js",
      "line": 358,
      "context": "document.body.insertBefore(skipLinks, document.body.firstChild);"
    },
    {
      "name": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 361,
      "context": "const gameMain = document.querySelector('.game-main');"
    },
    {
      "name": "enhanceFormControls",
      "file": "src/accessibilityManager.js",
      "line": 370,
      "context": "enhanceFormControls() {"
    },
    {
      "name": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 372,
      "context": "const buttons = document.querySelectorAll('button:not([aria-label])');"
    },
    {
      "name": "not",
      "file": "src/accessibilityManager.js",
      "line": 372,
      "context": "const buttons = document.querySelectorAll('button:not([aria-label])');"
    },
    {
      "name": "forEach",
      "file": "src/accessibilityManager.js",
      "line": 373,
      "context": "buttons.forEach(button => {"
    },
    {
      "name": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 374,
      "context": "if (!button.getAttribute('aria-label') && button.textContent.trim()) {"
    },
    {
      "name": "trim",
      "file": "src/accessibilityManager.js",
      "line": 374,
      "context": "if (!button.getAttribute('aria-label') && button.textContent.trim()) {"
    },
    {
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 375,
      "context": "button.setAttribute('aria-label', button.textContent.trim());"
    },
    {
      "name": "trim",
      "file": "src/accessibilityManager.js",
      "line": 375,
      "context": "button.setAttribute('aria-label', button.textContent.trim());"
    },
    {
      "name": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 380,
      "context": "const interactiveElements = document.querySelectorAll('[onclick]:not([role])');"
    },
    {
      "name": "not",
      "file": "src/accessibilityManager.js",
      "line": 380,
      "context": "const interactiveElements = document.querySelectorAll('[onclick]:not([role])');"
    },
    {
      "name": "forEach",
      "file": "src/accessibilityManager.js",
      "line": 381,
      "context": "interactiveElements.forEach(element => {"
    },
    {
      "name": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 382,
      "context": "if (!element.getAttribute('role')) {"
    },
    {
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 383,
      "context": "element.setAttribute('role', 'button');"
    },
    {
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 384,
      "context": "element.setAttribute('tabindex', '0');"
    },
    {
      "name": "addLandmarkRoles",
      "file": "src/accessibilityManager.js",
      "line": 392,
      "context": "addLandmarkRoles() {"
    },
    {
      "name": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 394,
      "context": "const sections = document.querySelectorAll('.section');"
    },
    {
      "name": "forEach",
      "file": "src/accessibilityManager.js",
      "line": 395,
      "context": "sections.forEach((section, index) => {"
    },
    {
      "name": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 396,
      "context": "if (!section.getAttribute('role')) {"
    },
    {
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 397,
      "context": "section.setAttribute('role', 'region');"
    },
    {
      "name": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 401,
      "context": "const heading = section.querySelector('h1, h2, h3, h4, h5, h6');"
    },
    {
      "name": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 402,
      "context": "if (heading && !section.getAttribute('aria-labelledby')) {"
    },
    {
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 406,
      "context": "section.setAttribute('aria-labelledby', heading.id);"
    },
    {
      "name": "enhanceDynamicContent",
      "file": "src/accessibilityManager.js",
      "line": 414,
      "context": "enhanceDynamicContent() {"
    },
    {
      "name": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 416,
      "context": "const scoreElement = document.getElementById('current-score');"
    },
    {
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 418,
      "context": "scoreElement.setAttribute('aria-live', 'polite');"
    },
    {
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 419,
      "context": "scoreElement.setAttribute('aria-atomic', 'true');"
    },
    {
      "name": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 423,
      "context": "const timerElement = document.querySelector('.timer-container');"
    },
    {
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 425,
      "context": "timerElement.setAttribute('aria-live', 'off'); // Prevent constant announcements"
    },
    {
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 426,
      "context": "timerElement.setAttribute('aria-atomic', 'true');"
    },
    {
      "name": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 430,
      "context": "const roomInfo = document.getElementById('room-info');"
    },
    {
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 432,
      "context": "roomInfo.setAttribute('aria-live', 'polite');"
    },
    {
      "name": "addKeyboardInstructions",
      "file": "src/accessibilityManager.js",
      "line": 439,
      "context": "addKeyboardInstructions() {"
    },
    {
      "name": "createElement",
      "file": "src/accessibilityManager.js",
      "line": 440,
      "context": "const instructions = document.createElement('div');"
    },
    {
      "name": "appendChild",
      "file": "src/accessibilityManager.js",
      "line": 456,
      "context": "document.body.appendChild(instructions);"
    },
    {
      "name": "createLiveRegions",
      "file": "src/accessibilityManager.js",
      "line": 462,
      "context": "createLiveRegions() {"
    },
    {
      "name": "createElement",
      "file": "src/accessibilityManager.js",
      "line": 464,
      "context": "const politeRegion = document.createElement('div');"
    },
    {
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 467,
      "context": "politeRegion.setAttribute('aria-live', 'polite');"
    },
    {
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 468,
      "context": "politeRegion.setAttribute('aria-atomic', 'true');"
    },
    {
      "name": "appendChild",
      "file": "src/accessibilityManager.js",
      "line": 469,
      "context": "document.body.appendChild(politeRegion);"
    },
    {
      "name": "set",
      "file": "src/accessibilityManager.js",
      "line": 470,
      "context": "this.liveRegions.set('polite', politeRegion);"
    },
    {
      "name": "createElement",
      "file": "src/accessibilityManager.js",
      "line": 473,
      "context": "const assertiveRegion = document.createElement('div');"
    },
    {
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 476,
      "context": "assertiveRegion.setAttribute('aria-live', 'assertive');"
    },
    {
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 477,
      "context": "assertiveRegion.setAttribute('aria-atomic', 'true');"
    },
    {
      "name": "appendChild",
      "file": "src/accessibilityManager.js",
      "line": 478,
      "context": "document.body.appendChild(assertiveRegion);"
    },
    {
      "name": "set",
      "file": "src/accessibilityManager.js",
      "line": 479,
      "context": "this.liveRegions.set('assertive', assertiveRegion);"
    },
    {
      "name": "createElement",
      "file": "src/accessibilityManager.js",
      "line": 482,
      "context": "const statusRegion = document.createElement('div');"
    },
    {
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 485,
      "context": "statusRegion.setAttribute('role', 'status');"
    },
    {
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 486,
      "context": "statusRegion.setAttribute('aria-atomic', 'true');"
    },
    {
      "name": "appendChild",
      "file": "src/accessibilityManager.js",
      "line": 487,
      "context": "document.body.appendChild(statusRegion);"
    },
    {
      "name": "set",
      "file": "src/accessibilityManager.js",
      "line": 488,
      "context": "this.liveRegions.set('status', statusRegion);"
    },
    {
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 490,
      "context": "console.log('♿ Live regions created');"
    },
    {
      "name": "announce",
      "file": "src/accessibilityManager.js",
      "line": 496,
      "context": "announce(message, priority = 'polite', delay = 100) {"
    },
    {
      "name": "push",
      "file": "src/accessibilityManager.js",
      "line": 500,
      "context": "this.announcementHistory.push({"
    },
    {
      "name": "now",
      "file": "src/accessibilityManager.js",
      "line": 502,
      "context": "timestamp: Date.now(),"
    },
    {
      "name": "shift",
      "file": "src/accessibilityManager.js",
      "line": 508,
      "context": "this.announcementHistory.shift();"
    },
    {
      "name": "get",
      "file": "src/accessibilityManager.js",
      "line": 512,
      "context": "const region = this.liveRegions.get(priority);"
    },
    {
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 515,
      "context": "console.log(`♿ Announced (${priority}): ${message}`);"
    },
    {
      "name": "Announced",
      "file": "src/accessibilityManager.js",
      "line": 515,
      "context": "console.log(`♿ Announced (${priority}): ${message}`);"
    },
    {
      "name": "announceAnswerResult",
      "file": "src/accessibilityManager.js",
      "line": 532,
      "context": "announceAnswerResult(isCorrect, explanation) {"
    },
    {
      "name": "announce",
      "file": "src/accessibilityManager.js",
      "line": 535,
      "context": "this.announce(message, 'assertive');"
    },
    {
      "name": "setupHighContrastMode",
      "file": "src/accessibilityManager.js",
      "line": 541,
      "context": "setupHighContrastMode() {"
    },
    {
      "name": "createElement",
      "file": "src/accessibilityManager.js",
      "line": 543,
      "context": "const highContrastStyles = document.createElement('style');"
    },
    {
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 560,
      "context": "background-color: var(--bg-color) !important;"
    },
    {
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 561,
      "context": "color: var(--text-color) !important;"
    },
    {
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 562,
      "context": "border-color: var(--border-color) !important;"
    },
    {
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 566,
      "context": "color: var(--accent-color) !important;"
    },
    {
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 571,
      "context": "color: var(--visited-color) !important;"
    },
    {
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 578,
      "context": "background-color: var(--text-color) !important;"
    },
    {
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 579,
      "context": "color: var(--bg-color) !important;"
    },
    {
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 580,
      "context": "border: 2px solid var(--border-color) !important;"
    },
    {
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 584,
      "context": "outline: 3px solid var(--focus-color) !important;"
    },
    {
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 589,
      "context": "color: var(--success-color) !important;"
    },
    {
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 593,
      "context": "color: var(--error-color) !important;"
    },
    {
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 597,
      "context": "color: var(--warning-color) !important;"
    },
    {
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 602,
      "context": "background-color: var(--focus-color) !important;"
    },
    {
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 603,
      "context": "color: var(--bg-color) !important;"
    },
    {
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 604,
      "context": "box-shadow: 0 0 0 3px var(--accent-color) !important;"
    },
    {
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 613,
      "context": "background: var(--bg-color) !important;"
    },
    {
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 614,
      "context": "color: var(--text-color) !important;"
    },
    {
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 615,
      "context": "border: 2px solid var(--accent-color) !important;"
    },
    {
      "name": "appendChild",
      "file": "src/accessibilityManager.js",
      "line": 623,
      "context": "document.head.appendChild(highContrastStyles);"
    },
    {
      "name": "toggleHighContrastMode",
      "file": "src/accessibilityManager.js",
      "line": 629,
      "context": "toggleHighContrastMode() {"
    },
    {
      "name": "enableHighContrastMode",
      "file": "src/accessibilityManager.js",
      "line": 634,
      "context": "this.enableHighContrastMode();"
    },
    {
      "name": "disableHighContrastMode",
      "file": "src/accessibilityManager.js",
      "line": 636,
      "context": "this.disableHighContrastMode();"
    },
    {
      "name": "savePreferences",
      "file": "src/accessibilityManager.js",
      "line": 639,
      "context": "this.savePreferences();"
    },
    {
      "name": "enableHighContrastMode",
      "file": "src/accessibilityManager.js",
      "line": 645,
      "context": "enableHighContrastMode() {"
    },
    {
      "name": "add",
      "file": "src/accessibilityManager.js",
      "line": 646,
      "context": "document.body.classList.add('high-contrast');"
    },
    {
      "name": "announce",
      "file": "src/accessibilityManager.js",
      "line": 648,
      "context": "this.announce('High contrast mode enabled', 'assertive');"
    },
    {
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 649,
      "context": "console.log('♿ High contrast mode enabled');"
    },
    {
      "name": "disableHighContrastMode",
      "file": "src/accessibilityManager.js",
      "line": 655,
      "context": "disableHighContrastMode() {"
    },
    {
      "name": "remove",
      "file": "src/accessibilityManager.js",
      "line": 656,
      "context": "document.body.classList.remove('high-contrast');"
    },
    {
      "name": "announce",
      "file": "src/accessibilityManager.js",
      "line": 658,
      "context": "this.announce('High contrast mode disabled', 'assertive');"
    },
    {
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 659,
      "context": "console.log('♿ High contrast mode disabled');"
    },
    {
      "name": "enableReducedMotion",
      "file": "src/accessibilityManager.js",
      "line": 665,
      "context": "enableReducedMotion() {"
    },
    {
      "name": "add",
      "file": "src/accessibilityManager.js",
      "line": 666,
      "context": "document.body.classList.add('reduced-motion');"
    },
    {
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 668,
      "context": "console.log('♿ Reduced motion mode enabled');"
    },
    {
      "name": "enableLargeText",
      "file": "src/accessibilityManager.js",
      "line": 674,
      "context": "enableLargeText() {"
    },
    {
      "name": "add",
      "file": "src/accessibilityManager.js",
      "line": 675,
      "context": "document.body.classList.add('large-text');"
    },
    {
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 677,
      "context": "console.log('♿ Large text mode enabled');"
    },
    {
      "name": "enableScreenReaderMode",
      "file": "src/accessibilityManager.js",
      "line": 683,
      "context": "enableScreenReaderMode() {"
    },
    {
      "name": "add",
      "file": "src/accessibilityManager.js",
      "line": 684,
      "context": "document.body.classList.add('screen-reader-mode');"
    },
    {
      "name": "optimizeForScreenReaders",
      "file": "src/accessibilityManager.js",
      "line": 688,
      "context": "this.optimizeForScreenReaders();"
    },
    {
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 689,
      "context": "console.log('♿ Screen reader mode enabled');"
    },
    {
      "name": "optimizeForScreenReaders",
      "file": "src/accessibilityManager.js",
      "line": 695,
      "context": "optimizeForScreenReaders() {"
    },
    {
      "name": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 697,
      "context": "const elements = document.querySelectorAll('button, input, select, textarea');"
    },
    {
      "name": "forEach",
      "file": "src/accessibilityManager.js",
      "line": 698,
      "context": "elements.forEach(element => {"
    },
    {
      "name": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 699,
      "context": "if (!element.getAttribute('aria-label') && !element.getAttribute('aria-labelledby')) {"
    },
    {
      "name": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 699,
      "context": "if (!element.getAttribute('aria-label') && !element.getAttribute('aria-labelledby')) {"
    },
    {
      "name": "generateAccessibleLabel",
      "file": "src/accessibilityManager.js",
      "line": 700,
      "context": "const label = this.generateAccessibleLabel(element);"
    },
    {
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 702,
      "context": "element.setAttribute('aria-label', label);"
    },
    {
      "name": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 708,
      "context": "const tables = document.querySelectorAll('table');"
    },
    {
      "name": "forEach",
      "file": "src/accessibilityManager.js",
      "line": 709,
      "context": "tables.forEach(table => {"
    },
    {
      "name": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 710,
      "context": "const headers = table.querySelectorAll('th');"
    },
    {
      "name": "forEach",
      "file": "src/accessibilityManager.js",
      "line": 711,
      "context": "headers.forEach((header, index) => {"
    },
    {
      "name": "generateAccessibleLabel",
      "file": "src/accessibilityManager.js",
      "line": 722,
      "context": "generateAccessibleLabel(element) {"
    },
    {
      "name": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 726,
      "context": "const label = document.querySelector(`label[for=\"${id}\"]`);"
    },
    {
      "name": "trim",
      "file": "src/accessibilityManager.js",
      "line": 727,
      "context": "if (label) return label.textContent.trim();"
    },
    {
      "name": "getTextContent",
      "file": "src/accessibilityManager.js",
      "line": 733,
      "context": "const textNodes = this.getTextContent(parent);"
    },
    {
      "name": "substring",
      "file": "src/accessibilityManager.js",
      "line": 735,
      "context": "return textNodes[0].substring(0, 50);"
    },
    {
      "name": "trim",
      "file": "src/accessibilityManager.js",
      "line": 742,
      "context": "if (element.textContent && element.textContent.trim()) {"
    },
    {
      "name": "trim",
      "file": "src/accessibilityManager.js",
      "line": 743,
      "context": "return element.textContent.trim();"
    },
    {
      "name": "getTextContent",
      "file": "src/accessibilityManager.js",
      "line": 752,
      "context": "getTextContent(element) {"
    },
    {
      "name": "createTreeWalker",
      "file": "src/accessibilityManager.js",
      "line": 754,
      "context": "const walker = document.createTreeWalker("
    },
    {
      "name": "nextNode",
      "file": "src/accessibilityManager.js",
      "line": 762,
      "context": "while (node = walker.nextNode()) {"
    },
    {
      "name": "trim",
      "file": "src/accessibilityManager.js",
      "line": 763,
      "context": "const text = node.textContent.trim();"
    },
    {
      "name": "push",
      "file": "src/accessibilityManager.js",
      "line": 765,
      "context": "texts.push(text);"
    },
    {
      "name": "setupFocusManagement",
      "file": "src/accessibilityManager.js",
      "line": 775,
      "context": "setupFocusManagement() {"
    },
    {
      "name": "addEventListener",
      "file": "src/accessibilityManager.js",
      "line": 777,
      "context": "document.addEventListener('focusin', (event) => {"
    },
    {
      "name": "handleFocusChange",
      "file": "src/accessibilityManager.js",
      "line": 778,
      "context": "this.handleFocusChange(event);"
    },
    {
      "name": "addEventListener",
      "file": "src/accessibilityManager.js",
      "line": 782,
      "context": "document.addEventListener('keydown', (event) => {"
    },
    {
      "name": "handleFocusTrapping",
      "file": "src/accessibilityManager.js",
      "line": 784,
      "context": "this.handleFocusTrapping(event);"
    },
    {
      "name": "handleFocusChange",
      "file": "src/accessibilityManager.js",
      "line": 792,
      "context": "handleFocusChange(event) {"
    },
    {
      "name": "matches",
      "file": "src/accessibilityManager.js",
      "line": 796,
      "context": "if (element.matches('button, input, select, textarea, [role=\"button\"]')) {"
    },
    {
      "name": "getAccessibleName",
      "file": "src/accessibilityManager.js",
      "line": 797,
      "context": "const label = this.getAccessibleName(element);"
    },
    {
      "name": "announce",
      "file": "src/accessibilityManager.js",
      "line": 799,
      "context": "this.announce(`Focused: ${label}`, 'polite', 200);"
    },
    {
      "name": "getAccessibleName",
      "file": "src/accessibilityManager.js",
      "line": 807,
      "context": "getAccessibleName(element) {"
    },
    {
      "name": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 809,
      "context": "if (element.getAttribute('aria-label')) {"
    },
    {
      "name": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 810,
      "context": "return element.getAttribute('aria-label');"
    },
    {
      "name": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 813,
      "context": "if (element.getAttribute('aria-labelledby')) {"
    },
    {
      "name": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 814,
      "context": "const labelId = element.getAttribute('aria-labelledby');"
    },
    {
      "name": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 815,
      "context": "const labelElement = document.getElementById(labelId);"
    },
    {
      "name": "trim",
      "file": "src/accessibilityManager.js",
      "line": 817,
      "context": "return labelElement.textContent.trim();"
    },
    {
      "name": "trim",
      "file": "src/accessibilityManager.js",
      "line": 821,
      "context": "if (element.textContent && element.textContent.trim()) {"
    },
    {
      "name": "trim",
      "file": "src/accessibilityManager.js",
      "line": 822,
      "context": "return element.textContent.trim();"
    },
    {
      "name": "focusOnSection",
      "file": "src/accessibilityManager.js",
      "line": 835,
      "context": "focusOnSection(sectionId) {"
    },
    {
      "name": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 836,
      "context": "const section = document.getElementById(sectionId);"
    },
    {
      "name": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 839,
      "context": "const focusableElement = section.querySelector("
    },
    {
      "name": "not",
      "file": "src/accessibilityManager.js",
      "line": 840,
      "context": "'button, input, select, textarea, a[href], [tabindex]:not([tabindex=\"-1\"])'"
    },
    {
      "name": "focus",
      "file": "src/accessibilityManager.js",
      "line": 843,
      "context": "focusableElement.focus();"
    },
    {
      "name": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 845,
      "context": "const sectionName = section.querySelector('h1, h2, h3, h4, h5, h6')?.textContent || sectionId;"
    },
    {
      "name": "announce",
      "file": "src/accessibilityManager.js",
      "line": 846,
      "context": "this.announce(`Focused on ${sectionName} section`, 'assertive');"
    },
    {
      "name": "skipToMainContent",
      "file": "src/accessibilityManager.js",
      "line": 853,
      "context": "skipToMainContent() {"
    },
    {
      "name": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 854,
      "context": "const mainContent = document.getElementById('main-content') ||"
    },
    {
      "name": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 855,
      "context": "document.querySelector('main') ||"
    },
    {
      "name": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 856,
      "context": "document.querySelector('[role=\"main\"]');"
    },
    {
      "name": "focus",
      "file": "src/accessibilityManager.js",
      "line": 859,
      "context": "mainContent.focus();"
    },
    {
      "name": "announce",
      "file": "src/accessibilityManager.js",
      "line": 860,
      "context": "this.announce('Skipped to main content', 'assertive');"
    },
    {
      "name": "showKeyboardHelp",
      "file": "src/accessibilityManager.js",
      "line": 867,
      "context": "showKeyboardHelp() {"
    },
    {
      "name": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 868,
      "context": "const existingHelp = document.getElementById('keyboard-help-modal');"
    },
    {
      "name": "remove",
      "file": "src/accessibilityManager.js",
      "line": 870,
      "context": "existingHelp.remove();"
    },
    {
      "name": "createElement",
      "file": "src/accessibilityManager.js",
      "line": 873,
      "context": "const helpModal = document.createElement('div');"
    },
    {
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 876,
      "context": "helpModal.setAttribute('role', 'dialog');"
    },
    {
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 877,
      "context": "helpModal.setAttribute('aria-labelledby', 'help-title');"
    },
    {
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 878,
      "context": "helpModal.setAttribute('aria-modal', 'true');"
    },
    {
      "name": "appendChild",
      "file": "src/accessibilityManager.js",
      "line": 918,
      "context": "document.body.appendChild(helpModal);"
    },
    {
      "name": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 921,
      "context": "const closeButtons = helpModal.querySelectorAll('.modal-close, .modal-close-btn');"
    },
    {
      "name": "forEach",
      "file": "src/accessibilityManager.js",
      "line": 922,
      "context": "closeButtons.forEach(button => {"
    },
    {
      "name": "addEventListener",
      "file": "src/accessibilityManager.js",
      "line": 923,
      "context": "button.addEventListener('click', () => {"
    },
    {
      "name": "remove",
      "file": "src/accessibilityManager.js",
      "line": 924,
      "context": "helpModal.remove();"
    },
    {
      "name": "announce",
      "file": "src/accessibilityManager.js",
      "line": 925,
      "context": "this.announce('Help dialog closed', 'assertive');"
    },
    {
      "name": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 930,
      "context": "const firstButton = helpModal.querySelector('button');"
    },
    {
      "name": "focus",
      "file": "src/accessibilityManager.js",
      "line": 932,
      "context": "firstButton.focus();"
    },
    {
      "name": "announce",
      "file": "src/accessibilityManager.js",
      "line": 935,
      "context": "this.announce('Keyboard help dialog opened', 'assertive');"
    },
    {
      "name": "announceGameState",
      "file": "src/accessibilityManager.js",
      "line": 941,
      "context": "announceGameState(gameState) {"
    },
    {
      "name": "announce",
      "file": "src/accessibilityManager.js",
      "line": 943,
      "context": "this.announce(`Entered ${gameState.currentRoom.name}: ${gameState.currentRoom.description}`, 'polite');"
    },
    {
      "name": "announce",
      "file": "src/accessibilityManager.js",
      "line": 947,
      "context": "this.announce(`Score updated: ${gameState.score} points`, 'polite');"
    },
    {
      "name": "announce",
      "file": "src/accessibilityManager.js",
      "line": 951,
      "context": "this.announce(`New question: ${gameState.question.category}, ${gameState.question.difficulty} difficulty`, 'polite');"
    },
    {
      "name": "announceAnswerResult",
      "file": "src/accessibilityManager.js",
      "line": 958,
      "context": "announceAnswerResult(isCorrect, explanation = '') {"
    },
    {
      "name": "announce",
      "file": "src/accessibilityManager.js",
      "line": 966,
      "context": "this.announce(message, 'assertive');"
    },
    {
      "name": "getAccessibilityStatus",
      "file": "src/accessibilityManager.js",
      "line": 972,
      "context": "getAccessibilityStatus() {"
    },
    {
      "name": "slice",
      "file": "src/accessibilityManager.js",
      "line": 979,
      "context": "announcementHistory: this.announcementHistory.slice(-5)"
    },
    {
      "name": "cleanup",
      "file": "src/accessibilityManager.js",
      "line": 986,
      "context": "cleanup() {"
    },
    {
      "name": "forEach",
      "file": "src/accessibilityManager.js",
      "line": 991,
      "context": "this.liveRegions.forEach(region => {"
    },
    {
      "name": "removeChild",
      "file": "src/accessibilityManager.js",
      "line": 993,
      "context": "region.parentNode.removeChild(region);"
    },
    {
      "name": "clear",
      "file": "src/accessibilityManager.js",
      "line": 996,
      "context": "this.liveRegions.clear();"
    },
    {
      "name": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 999,
      "context": "const modal = document.getElementById('keyboard-help-modal');"
    },
    {
      "name": "remove",
      "file": "src/accessibilityManager.js",
      "line": 1001,
      "context": "modal.remove();"
    },
    {
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 1004,
      "context": "console.log('♿ AccessibilityManager cleanup completed');"
    },
    {
      "name": "handleFocusTrapping",
      "file": "src/accessibilityManager.js",
      "line": 1012,
      "context": "handleFocusTrapping(event) {"
    },
    {
      "name": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 1013,
      "context": "const modal = document.querySelector('[aria-modal=\"true\"]');"
    },
    {
      "name": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 1016,
      "context": "const focusableElements = modal.querySelectorAll("
    },
    {
      "name": "not",
      "file": "src/accessibilityManager.js",
      "line": 1017,
      "context": "'button, input, select, textarea, a[href], [tabindex]:not([tabindex=\"-1\"])'"
    },
    {
      "name": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 1026,
      "context": "event.preventDefault();"
    },
    {
      "name": "focus",
      "file": "src/accessibilityManager.js",
      "line": 1027,
      "context": "lastElement.focus();"
    },
    {
      "name": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 1029,
      "context": "event.preventDefault();"
    },
    {
      "name": "focus",
      "file": "src/accessibilityManager.js",
      "line": 1030,
      "context": "firstElement.focus();"
    },
    {
      "name": "handleTabNavigation",
      "file": "src/accessibilityManager.js",
      "line": 1037,
      "context": "handleTabNavigation(event) {"
    },
    {
      "name": "activation",
      "file": "src/accessibilityManager.js",
      "line": 1043,
      "context": "* Handle activation (Enter/Space) events"
    },
    {
      "name": "handleActivation",
      "file": "src/accessibilityManager.js",
      "line": 1045,
      "context": "handleActivation(event) {"
    },
    {
      "name": "hasAttribute",
      "file": "src/accessibilityManager.js",
      "line": 1049,
      "context": "if (element.hasAttribute('onclick') && !element.matches('button, input, select, textarea, a')) {"
    },
    {
      "name": "matches",
      "file": "src/accessibilityManager.js",
      "line": 1049,
      "context": "if (element.hasAttribute('onclick') && !element.matches('button, input, select, textarea, a')) {"
    },
    {
      "name": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 1050,
      "context": "event.preventDefault();"
    },
    {
      "name": "click",
      "file": "src/accessibilityManager.js",
      "line": 1051,
      "context": "element.click();"
    },
    {
      "name": "handleEscape",
      "file": "src/accessibilityManager.js",
      "line": 1058,
      "context": "handleEscape(event) {"
    },
    {
      "name": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 1060,
      "context": "const modal = document.querySelector('[aria-modal=\"true\"]');"
    },
    {
      "name": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 1062,
      "context": "event.preventDefault();"
    },
    {
      "name": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 1063,
      "context": "const closeButton = modal.querySelector('.modal-close, .modal-close-btn');"
    },
    {
      "name": "click",
      "file": "src/accessibilityManager.js",
      "line": 1065,
      "context": "closeButton.click();"
    },
    {
      "name": "handleArrowNavigation",
      "file": "src/accessibilityManager.js",
      "line": 1073,
      "context": "handleArrowNavigation(event) {"
    },
    {
      "name": "matches",
      "file": "src/accessibilityManager.js",
      "line": 1078,
      "context": "if (element.matches('#map-canvas')) {"
    },
    {
      "name": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 1079,
      "context": "event.preventDefault();"
    },
    {
      "name": "handleMapArrowNavigation",
      "file": "src/accessibilityManager.js",
      "line": 1080,
      "context": "this.handleMapArrowNavigation(key);"
    },
    {
      "name": "matches",
      "file": "src/accessibilityManager.js",
      "line": 1085,
      "context": "if (element.matches('.answer-btn')) {"
    },
    {
      "name": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 1086,
      "context": "event.preventDefault();"
    },
    {
      "name": "navigateAnswerButtons",
      "file": "src/accessibilityManager.js",
      "line": 1087,
      "context": "this.navigateAnswerButtons(key);"
    },
    {
      "name": "matches",
      "file": "src/accessibilityManager.js",
      "line": 1092,
      "context": "if (element.matches('[role=\"menu\"], [role=\"listbox\"], .menu-item, .list-item')) {"
    },
    {
      "name": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 1093,
      "context": "event.preventDefault();"
    },
    {
      "name": "navigateMenuItems",
      "file": "src/accessibilityManager.js",
      "line": 1094,
      "context": "this.navigateMenuItems(key);"
    },
    {
      "name": "handleMapArrowNavigation",
      "file": "src/accessibilityManager.js",
      "line": 1104,
      "context": "handleMapArrowNavigation(direction) {"
    },
    {
      "name": "CustomEvent",
      "file": "src/accessibilityManager.js",
      "line": 1106,
      "context": "const mapNavigationEvent = new CustomEvent('accessibility-map-navigate', {"
    },
    {
      "name": "replace",
      "file": "src/accessibilityManager.js",
      "line": 1107,
      "context": "detail: { direction: direction.replace('Arrow', '').toLowerCase() }"
    },
    {
      "name": "toLowerCase",
      "file": "src/accessibilityManager.js",
      "line": 1107,
      "context": "detail: { direction: direction.replace('Arrow', '').toLowerCase() }"
    },
    {
      "name": "dispatchEvent",
      "file": "src/accessibilityManager.js",
      "line": 1109,
      "context": "document.dispatchEvent(mapNavigationEvent);"
    },
    {
      "name": "announce",
      "file": "src/accessibilityManager.js",
      "line": 1112,
      "context": "this.announce(`Navigating ${direction.replace('Arrow', '').toLowerCase()}`, 'polite');"
    },
    {
      "name": "replace",
      "file": "src/accessibilityManager.js",
      "line": 1112,
      "context": "this.announce(`Navigating ${direction.replace('Arrow', '').toLowerCase()}`, 'polite');"
    },
    {
      "name": "toLowerCase",
      "file": "src/accessibilityManager.js",
      "line": 1112,
      "context": "this.announce(`Navigating ${direction.replace('Arrow', '').toLowerCase()}`, 'polite');"
    },
    {
      "name": "navigateAnswerButtons",
      "file": "src/accessibilityManager.js",
      "line": 1118,
      "context": "navigateAnswerButtons(direction) {"
    },
    {
      "name": "from",
      "file": "src/accessibilityManager.js",
      "line": 1119,
      "context": "const buttons = Array.from(document.querySelectorAll('.answer-btn:not([disabled])'));"
    },
    {
      "name": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 1119,
      "context": "const buttons = Array.from(document.querySelectorAll('.answer-btn:not([disabled])'));"
    },
    {
      "name": "not",
      "file": "src/accessibilityManager.js",
      "line": 1119,
      "context": "const buttons = Array.from(document.querySelectorAll('.answer-btn:not([disabled])'));"
    },
    {
      "name": "findIndex",
      "file": "src/accessibilityManager.js",
      "line": 1120,
      "context": "const currentIndex = buttons.findIndex(btn => btn === document.activeElement);"
    },
    {
      "name": "focus",
      "file": "src/accessibilityManager.js",
      "line": 1130,
      "context": "buttons[nextIndex].focus();"
    },
    {
      "name": "announce",
      "file": "src/accessibilityManager.js",
      "line": 1131,
      "context": "this.announce(`Answer option ${String.fromCharCode(65 + nextIndex)}`, 'polite');"
    },
    {
      "name": "fromCharCode",
      "file": "src/accessibilityManager.js",
      "line": 1131,
      "context": "this.announce(`Answer option ${String.fromCharCode(65 + nextIndex)}`, 'polite');"
    },
    {
      "name": "navigateMenuItems",
      "file": "src/accessibilityManager.js",
      "line": 1138,
      "context": "navigateMenuItems(direction) {"
    },
    {
      "name": "from",
      "file": "src/accessibilityManager.js",
      "line": 1139,
      "context": "const menuItems = Array.from(document.querySelectorAll('.menu-item:not([disabled]), .list-item:not([disabled])'));"
    },
    {
      "name": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 1139,
      "context": "const menuItems = Array.from(document.querySelectorAll('.menu-item:not([disabled]), .list-item:not([disabled])'));"
    },
    {
      "name": "not",
      "file": "src/accessibilityManager.js",
      "line": 1139,
      "context": "const menuItems = Array.from(document.querySelectorAll('.menu-item:not([disabled]), .list-item:not([disabled])'));"
    },
    {
      "name": "not",
      "file": "src/accessibilityManager.js",
      "line": 1139,
      "context": "const menuItems = Array.from(document.querySelectorAll('.menu-item:not([disabled]), .list-item:not([disabled])'));"
    },
    {
      "name": "findIndex",
      "file": "src/accessibilityManager.js",
      "line": 1140,
      "context": "const currentIndex = menuItems.findIndex(item => item === document.activeElement);"
    },
    {
      "name": "focus",
      "file": "src/accessibilityManager.js",
      "line": 1152,
      "context": "menuItems[nextIndex].focus();"
    },
    {
      "name": "constructor",
      "file": "src/enhancedDataLoader.js",
      "line": 6,
      "context": "constructor(originalDataLoader, performanceManager) {"
    },
    {
      "name": "Map",
      "file": "src/enhancedDataLoader.js",
      "line": 9,
      "context": "this.categoryCache = new Map();"
    },
    {
      "name": "Map",
      "file": "src/enhancedDataLoader.js",
      "line": 10,
      "context": "this.loadingStates = new Map();"
    },
    {
      "name": "Map",
      "file": "src/enhancedDataLoader.js",
      "line": 14,
      "context": "categoryRequests: new Map(),"
    },
    {
      "name": "Map",
      "file": "src/enhancedDataLoader.js",
      "line": 15,
      "context": "difficultyRequests: new Map(),"
    },
    {
      "name": "Map",
      "file": "src/enhancedDataLoader.js",
      "line": 16,
      "context": "lastAccessed: new Map()"
    },
    {
      "name": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 19,
      "context": "console.log('🚀 Enhanced DataLoader initialized with performance optimizations');"
    },
    {
      "name": "getQuestionsByCategory",
      "file": "src/enhancedDataLoader.js",
      "line": 28,
      "context": "async getQuestionsByCategory(category, forceReload = false) {"
    },
    {
      "name": "trackCategoryUsage",
      "file": "src/enhancedDataLoader.js",
      "line": 30,
      "context": "this.trackCategoryUsage(category);"
    },
    {
      "name": "has",
      "file": "src/enhancedDataLoader.js",
      "line": 33,
      "context": "if (!forceReload && this.categoryCache.has(category)) {"
    },
    {
      "name": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 34,
      "context": "console.log(`📚 Retrieved ${this.categoryCache.get(category).length} questions from cache: ${category}`);"
    },
    {
      "name": "get",
      "file": "src/enhancedDataLoader.js",
      "line": 34,
      "context": "console.log(`📚 Retrieved ${this.categoryCache.get(category).length} questions from cache: ${category}`);"
    },
    {
      "name": "get",
      "file": "src/enhancedDataLoader.js",
      "line": 35,
      "context": "return this.categoryCache.get(category);"
    },
    {
      "name": "has",
      "file": "src/enhancedDataLoader.js",
      "line": 39,
      "context": "if (this.loadingStates.has(category)) {"
    },
    {
      "name": "get",
      "file": "src/enhancedDataLoader.js",
      "line": 40,
      "context": "return this.loadingStates.get(category);"
    },
    {
      "name": "loadCategoryQuestions",
      "file": "src/enhancedDataLoader.js",
      "line": 44,
      "context": "const loadingPromise = this.loadCategoryQuestions(category);"
    },
    {
      "name": "set",
      "file": "src/enhancedDataLoader.js",
      "line": 45,
      "context": "this.loadingStates.set(category, loadingPromise);"
    },
    {
      "name": "delete",
      "file": "src/enhancedDataLoader.js",
      "line": 49,
      "context": "this.loadingStates.delete(category);"
    },
    {
      "name": "delete",
      "file": "src/enhancedDataLoader.js",
      "line": 52,
      "context": "this.loadingStates.delete(category);"
    },
    {
      "name": "loadCategoryQuestions",
      "file": "src/enhancedDataLoader.js",
      "line": 62,
      "context": "async loadCategoryQuestions(category) {"
    },
    {
      "name": "Promise",
      "file": "src/enhancedDataLoader.js",
      "line": 63,
      "context": "return new Promise((resolve) => {"
    },
    {
      "name": "now",
      "file": "src/enhancedDataLoader.js",
      "line": 66,
      "context": "const startTime = performance.now();"
    },
    {
      "name": "getQuestions",
      "file": "src/enhancedDataLoader.js",
      "line": 70,
      "context": "const allQuestions = this.originalLoader.getQuestions();"
    },
    {
      "name": "filter",
      "file": "src/enhancedDataLoader.js",
      "line": 73,
      "context": "const filteredQuestions = allQuestions.filter(q => {"
    },
    {
      "name": "sort",
      "file": "src/enhancedDataLoader.js",
      "line": 78,
      "context": "filteredQuestions.sort((a, b) => {"
    },
    {
      "name": "localeCompare",
      "file": "src/enhancedDataLoader.js",
      "line": 83,
      "context": "return a.id.localeCompare(b.id);"
    },
    {
      "name": "set",
      "file": "src/enhancedDataLoader.js",
      "line": 87,
      "context": "this.categoryCache.set(category, filteredQuestions);"
    },
    {
      "name": "set",
      "file": "src/enhancedDataLoader.js",
      "line": 88,
      "context": "this.usageStats.lastAccessed.set(category, Date.now());"
    },
    {
      "name": "now",
      "file": "src/enhancedDataLoader.js",
      "line": 88,
      "context": "this.usageStats.lastAccessed.set(category, Date.now());"
    },
    {
      "name": "now",
      "file": "src/enhancedDataLoader.js",
      "line": 90,
      "context": "const processingTime = performance.now() - startTime;"
    },
    {
      "name": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 91,
      "context": "console.log(`📚 Loaded ${filteredQuestions.length} questions for category '${category}' in ${processingTime.toFixed(2)}ms`);"
    },
    {
      "name": "toFixed",
      "file": "src/enhancedDataLoader.js",
      "line": 91,
      "context": "console.log(`📚 Loaded ${filteredQuestions.length} questions for category '${category}' in ${processingTime.toFixed(2)}ms`);"
    },
    {
      "name": "resolve",
      "file": "src/enhancedDataLoader.js",
      "line": 93,
      "context": "resolve(filteredQuestions);"
    },
    {
      "name": "error",
      "file": "src/enhancedDataLoader.js",
      "line": 95,
      "context": "console.error(`❌ Error loading questions for category ${category}:`, error);"
    },
    {
      "name": "resolve",
      "file": "src/enhancedDataLoader.js",
      "line": 96,
      "context": "resolve([]); // Return empty array on error"
    },
    {
      "name": "requestIdleCallback",
      "file": "src/enhancedDataLoader.js",
      "line": 102,
      "context": "requestIdleCallback(processQuestions);"
    },
    {
      "name": "processQuestions",
      "file": "src/enhancedDataLoader.js",
      "line": 104,
      "context": "setTimeout(() => processQuestions({}), 0);"
    },
    {
      "name": "getQuestionsByDifficulty",
      "file": "src/enhancedDataLoader.js",
      "line": 114,
      "context": "getQuestionsByDifficulty(difficulty) {"
    },
    {
      "name": "trackDifficultyUsage",
      "file": "src/enhancedDataLoader.js",
      "line": 115,
      "context": "this.trackDifficultyUsage(difficulty);"
    },
    {
      "name": "has",
      "file": "src/enhancedDataLoader.js",
      "line": 119,
      "context": "if (this.categoryCache.has(cacheKey)) {"
    },
    {
      "name": "get",
      "file": "src/enhancedDataLoader.js",
      "line": 120,
      "context": "return this.categoryCache.get(cacheKey);"
    },
    {
      "name": "getQuestions",
      "file": "src/enhancedDataLoader.js",
      "line": 123,
      "context": "const allQuestions = this.originalLoader.getQuestions();"
    },
    {
      "name": "filter",
      "file": "src/enhancedDataLoader.js",
      "line": 124,
      "context": "const filteredQuestions = allQuestions.filter(q => q.difficulty === difficulty);"
    },
    {
      "name": "set",
      "file": "src/enhancedDataLoader.js",
      "line": 126,
      "context": "this.categoryCache.set(cacheKey, filteredQuestions);"
    },
    {
      "name": "set",
      "file": "src/enhancedDataLoader.js",
      "line": 127,
      "context": "this.usageStats.lastAccessed.set(cacheKey, Date.now());"
    },
    {
      "name": "now",
      "file": "src/enhancedDataLoader.js",
      "line": 127,
      "context": "this.usageStats.lastAccessed.set(cacheKey, Date.now());"
    },
    {
      "name": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 129,
      "context": "console.log(`🎯 Loaded ${filteredQuestions.length} questions for difficulty: ${difficulty}`);"
    },
    {
      "name": "optimizeCache",
      "file": "src/enhancedDataLoader.js",
      "line": 136,
      "context": "optimizeCache() {"
    },
    {
      "name": "now",
      "file": "src/enhancedDataLoader.js",
      "line": 137,
      "context": "const now = Date.now();"
    },
    {
      "name": "entries",
      "file": "src/enhancedDataLoader.js",
      "line": 142,
      "context": "for (const [key, lastAccessed] of this.usageStats.lastAccessed.entries()) {"
    },
    {
      "name": "delete",
      "file": "src/enhancedDataLoader.js",
      "line": 144,
      "context": "this.categoryCache.delete(key);"
    },
    {
      "name": "delete",
      "file": "src/enhancedDataLoader.js",
      "line": 145,
      "context": "this.usageStats.lastAccessed.delete(key);"
    },
    {
      "name": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 146,
      "context": "console.log(`🗑️ Removed expired cache entry: ${key}`);"
    },
    {
      "name": "from",
      "file": "src/enhancedDataLoader.js",
      "line": 152,
      "context": "const sortedEntries = Array.from(this.usageStats.lastAccessed.entries())"
    },
    {
      "name": "entries",
      "file": "src/enhancedDataLoader.js",
      "line": 152,
      "context": "const sortedEntries = Array.from(this.usageStats.lastAccessed.entries())"
    },
    {
      "name": "sort",
      "file": "src/enhancedDataLoader.js",
      "line": 153,
      "context": ".sort((a, b) => a[1] - b[1]); // Sort by last accessed time"
    },
    {
      "name": "slice",
      "file": "src/enhancedDataLoader.js",
      "line": 155,
      "context": "const entriesToRemove = sortedEntries.slice(0, this.categoryCache.size - maxCacheSize);"
    },
    {
      "name": "delete",
      "file": "src/enhancedDataLoader.js",
      "line": 158,
      "context": "this.categoryCache.delete(key);"
    },
    {
      "name": "delete",
      "file": "src/enhancedDataLoader.js",
      "line": 159,
      "context": "this.usageStats.lastAccessed.delete(key);"
    },
    {
      "name": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 160,
      "context": "console.log(`🗑️ Removed LRU cache entry: ${key}`);"
    },
    {
      "name": "preloadPopularCategories",
      "file": "src/enhancedDataLoader.js",
      "line": 168,
      "context": "async preloadPopularCategories() {"
    },
    {
      "name": "from",
      "file": "src/enhancedDataLoader.js",
      "line": 170,
      "context": "const popularCategories = Array.from(this.usageStats.categoryRequests.entries())"
    },
    {
      "name": "entries",
      "file": "src/enhancedDataLoader.js",
      "line": 170,
      "context": "const popularCategories = Array.from(this.usageStats.categoryRequests.entries())"
    },
    {
      "name": "sort",
      "file": "src/enhancedDataLoader.js",
      "line": 171,
      "context": ".sort((a, b) => b[1] - a[1])"
    },
    {
      "name": "slice",
      "file": "src/enhancedDataLoader.js",
      "line": 172,
      "context": ".slice(0, 3)"
    },
    {
      "name": "map",
      "file": "src/enhancedDataLoader.js",
      "line": 173,
      "context": ".map(([category]) => category);"
    },
    {
      "name": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 175,
      "context": "console.log('🔄 Preloading popular categories:', popularCategories);"
    },
    {
      "name": "map",
      "file": "src/enhancedDataLoader.js",
      "line": 178,
      "context": "const preloadPromises = popularCategories.map(category =>"
    },
    {
      "name": "getQuestionsByCategory",
      "file": "src/enhancedDataLoader.js",
      "line": 179,
      "context": "this.getQuestionsByCategory(category)"
    },
    {
      "name": "all",
      "file": "src/enhancedDataLoader.js",
      "line": 183,
      "context": "await Promise.all(preloadPromises);"
    },
    {
      "name": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 184,
      "context": "console.log('✅ Popular categories preloaded successfully');"
    },
    {
      "name": "warn",
      "file": "src/enhancedDataLoader.js",
      "line": 186,
      "context": "console.warn('⚠️ Error preloading categories:', error);"
    },
    {
      "name": "trackCategoryUsage",
      "file": "src/enhancedDataLoader.js",
      "line": 194,
      "context": "trackCategoryUsage(category) {"
    },
    {
      "name": "get",
      "file": "src/enhancedDataLoader.js",
      "line": 195,
      "context": "const currentCount = this.usageStats.categoryRequests.get(category) || 0;"
    },
    {
      "name": "set",
      "file": "src/enhancedDataLoader.js",
      "line": 196,
      "context": "this.usageStats.categoryRequests.set(category, currentCount + 1);"
    },
    {
      "name": "trackDifficultyUsage",
      "file": "src/enhancedDataLoader.js",
      "line": 203,
      "context": "trackDifficultyUsage(difficulty) {"
    },
    {
      "name": "get",
      "file": "src/enhancedDataLoader.js",
      "line": 204,
      "context": "const currentCount = this.usageStats.difficultyRequests.get(difficulty) || 0;"
    },
    {
      "name": "set",
      "file": "src/enhancedDataLoader.js",
      "line": 205,
      "context": "this.usageStats.difficultyRequests.set(difficulty, currentCount + 1);"
    },
    {
      "name": "getCacheStats",
      "file": "src/enhancedDataLoader.js",
      "line": 212,
      "context": "getCacheStats() {"
    },
    {
      "name": "fromEntries",
      "file": "src/enhancedDataLoader.js",
      "line": 216,
      "context": "categoryUsage: Object.fromEntries(this.usageStats.categoryRequests),"
    },
    {
      "name": "fromEntries",
      "file": "src/enhancedDataLoader.js",
      "line": 217,
      "context": "difficultyUsage: Object.fromEntries(this.usageStats.difficultyRequests),"
    },
    {
      "name": "fromEntries",
      "file": "src/enhancedDataLoader.js",
      "line": 218,
      "context": "lastAccessTimes: Object.fromEntries(this.usageStats.lastAccessed),"
    },
    {
      "name": "estimateMemoryUsage",
      "file": "src/enhancedDataLoader.js",
      "line": 219,
      "context": "memoryUsage: this.estimateMemoryUsage()"
    },
    {
      "name": "estimateMemoryUsage",
      "file": "src/enhancedDataLoader.js",
      "line": 227,
      "context": "estimateMemoryUsage() {"
    },
    {
      "name": "values",
      "file": "src/enhancedDataLoader.js",
      "line": 230,
      "context": "for (const questions of this.categoryCache.values()) {"
    },
    {
      "name": "loadGameData",
      "file": "src/enhancedDataLoader.js",
      "line": 241,
      "context": "async loadGameData() {"
    },
    {
      "name": "loadGameData",
      "file": "src/enhancedDataLoader.js",
      "line": 242,
      "context": "const result = await this.originalLoader.loadGameData();"
    },
    {
      "name": "preloadPopularCategories",
      "file": "src/enhancedDataLoader.js",
      "line": 246,
      "context": "this.preloadPopularCategories();"
    },
    {
      "name": "getAllData",
      "file": "src/enhancedDataLoader.js",
      "line": 252,
      "context": "getAllData() {"
    },
    {
      "name": "getAllData",
      "file": "src/enhancedDataLoader.js",
      "line": 253,
      "context": "return this.originalLoader.getAllData();"
    },
    {
      "name": "getRooms",
      "file": "src/enhancedDataLoader.js",
      "line": 256,
      "context": "getRooms() {"
    },
    {
      "name": "getAllData",
      "file": "src/enhancedDataLoader.js",
      "line": 257,
      "context": "return this.originalLoader.getAllData().rooms;"
    },
    {
      "name": "getQuestions",
      "file": "src/enhancedDataLoader.js",
      "line": 260,
      "context": "getQuestions() {"
    },
    {
      "name": "getAllData",
      "file": "src/enhancedDataLoader.js",
      "line": 261,
      "context": "return this.originalLoader.getAllData().questions;"
    },
    {
      "name": "getAchievements",
      "file": "src/enhancedDataLoader.js",
      "line": 264,
      "context": "getAchievements() {"
    },
    {
      "name": "getAllData",
      "file": "src/enhancedDataLoader.js",
      "line": 265,
      "context": "return this.originalLoader.getAllData().achievements;"
    },
    {
      "name": "getStartingRoom",
      "file": "src/enhancedDataLoader.js",
      "line": 268,
      "context": "getStartingRoom() {"
    },
    {
      "name": "getStartingRoom",
      "file": "src/enhancedDataLoader.js",
      "line": 269,
      "context": "return this.originalLoader.getStartingRoom();"
    },
    {
      "name": "getRoomById",
      "file": "src/enhancedDataLoader.js",
      "line": 272,
      "context": "getRoomById(roomId) {"
    },
    {
      "name": "getRoom",
      "file": "src/enhancedDataLoader.js",
      "line": 273,
      "context": "return this.originalLoader.getRoom(roomId);"
    },
    {
      "name": "getQuestionById",
      "file": "src/enhancedDataLoader.js",
      "line": 276,
      "context": "getQuestionById(questionId) {"
    },
    {
      "name": "getQuestion",
      "file": "src/enhancedDataLoader.js",
      "line": 277,
      "context": "return this.originalLoader.getQuestion(questionId);"
    },
    {
      "name": "getRandomQuestion",
      "file": "src/enhancedDataLoader.js",
      "line": 280,
      "context": "getRandomQuestion(category = null, excludeIds = []) {"
    },
    {
      "name": "has",
      "file": "src/enhancedDataLoader.js",
      "line": 283,
      "context": "if (this.categoryCache.has(category)) {"
    },
    {
      "name": "get",
      "file": "src/enhancedDataLoader.js",
      "line": 284,
      "context": "const categoryQuestions = this.categoryCache.get(category);"
    },
    {
      "name": "filter",
      "file": "src/enhancedDataLoader.js",
      "line": 285,
      "context": "const availableQuestions = categoryQuestions.filter(q => !excludeIds.includes(q.id));"
    },
    {
      "name": "includes",
      "file": "src/enhancedDataLoader.js",
      "line": 285,
      "context": "const availableQuestions = categoryQuestions.filter(q => !excludeIds.includes(q.id));"
    },
    {
      "name": "floor",
      "file": "src/enhancedDataLoader.js",
      "line": 288,
      "context": "const randomIndex = Math.floor(Math.random() * availableQuestions.length);"
    },
    {
      "name": "random",
      "file": "src/enhancedDataLoader.js",
      "line": 288,
      "context": "const randomIndex = Math.floor(Math.random() * availableQuestions.length);"
    },
    {
      "name": "getAllData",
      "file": "src/enhancedDataLoader.js",
      "line": 295,
      "context": "const allQuestions = this.originalLoader.getAllData().questions || [];"
    },
    {
      "name": "filter",
      "file": "src/enhancedDataLoader.js",
      "line": 296,
      "context": "let filteredQuestions = allQuestions.filter(q => !excludeIds.includes(q.id));"
    },
    {
      "name": "includes",
      "file": "src/enhancedDataLoader.js",
      "line": 296,
      "context": "let filteredQuestions = allQuestions.filter(q => !excludeIds.includes(q.id));"
    },
    {
      "name": "filter",
      "file": "src/enhancedDataLoader.js",
      "line": 299,
      "context": "filteredQuestions = filteredQuestions.filter(q => q.category === category);"
    },
    {
      "name": "floor",
      "file": "src/enhancedDataLoader.js",
      "line": 303,
      "context": "const randomIndex = Math.floor(Math.random() * filteredQuestions.length);"
    },
    {
      "name": "random",
      "file": "src/enhancedDataLoader.js",
      "line": 303,
      "context": "const randomIndex = Math.floor(Math.random() * filteredQuestions.length);"
    },
    {
      "name": "clearCache",
      "file": "src/enhancedDataLoader.js",
      "line": 313,
      "context": "clearCache() {"
    },
    {
      "name": "clear",
      "file": "src/enhancedDataLoader.js",
      "line": 314,
      "context": "this.categoryCache.clear();"
    },
    {
      "name": "clear",
      "file": "src/enhancedDataLoader.js",
      "line": 315,
      "context": "this.loadingStates.clear();"
    },
    {
      "name": "clear",
      "file": "src/enhancedDataLoader.js",
      "line": 316,
      "context": "this.usageStats.categoryRequests.clear();"
    },
    {
      "name": "clear",
      "file": "src/enhancedDataLoader.js",
      "line": 317,
      "context": "this.usageStats.difficultyRequests.clear();"
    },
    {
      "name": "clear",
      "file": "src/enhancedDataLoader.js",
      "line": 318,
      "context": "this.usageStats.lastAccessed.clear();"
    },
    {
      "name": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 320,
      "context": "console.log('🧹 Enhanced DataLoader cache cleared');"
    },
    {
      "name": "cleanup",
      "file": "src/enhancedDataLoader.js",
      "line": 326,
      "context": "cleanup() {"
    },
    {
      "name": "optimizeCache",
      "file": "src/enhancedDataLoader.js",
      "line": 327,
      "context": "this.optimizeCache();"
    },
    {
      "name": "clear",
      "file": "src/enhancedDataLoader.js",
      "line": 330,
      "context": "this.loadingStates.clear();"
    },
    {
      "name": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 332,
      "context": "console.log('🧹 Enhanced DataLoader cleanup completed');"
    },
    {
      "name": "constructor",
      "file": "src/enhancedUIManager.js",
      "line": 6,
      "context": "constructor(originalUIManager, performanceManager) {"
    },
    {
      "name": "Map",
      "file": "src/enhancedUIManager.js",
      "line": 9,
      "context": "this.updateQueue = new Map();"
    },
    {
      "name": "initializeElementPools",
      "file": "src/enhancedUIManager.js",
      "line": 13,
      "context": "this.initializeElementPools();"
    },
    {
      "name": "Map",
      "file": "src/enhancedUIManager.js",
      "line": 16,
      "context": "this.optimizedUpdates = new Map();"
    },
    {
      "name": "setupOptimizedUpdates",
      "file": "src/enhancedUIManager.js",
      "line": 17,
      "context": "this.setupOptimizedUpdates();"
    },
    {
      "name": "log",
      "file": "src/enhancedUIManager.js",
      "line": 19,
      "context": "console.log('🚀 Enhanced UIManager initialized with performance optimizations');"
    },
    {
      "name": "initializeElementPools",
      "file": "src/enhancedUIManager.js",
      "line": 25,
      "context": "initializeElementPools() {"
    },
    {
      "name": "createPool",
      "file": "src/enhancedUIManager.js",
      "line": 27,
      "context": "this.performanceManager.createPool('answerButtons', UIFactories.answerButton, 8);"
    },
    {
      "name": "createPool",
      "file": "src/enhancedUIManager.js",
      "line": 28,
      "context": "this.performanceManager.createPool('notifications', UIFactories.notificationToast, 5);"
    },
    {
      "name": "createPool",
      "file": "src/enhancedUIManager.js",
      "line": 29,
      "context": "this.performanceManager.createPool('roomConnections', UIFactories.roomConnection, 10);"
    },
    {
      "name": "createPool",
      "file": "src/enhancedUIManager.js",
      "line": 30,
      "context": "this.performanceManager.createPool('progressBars', UIFactories.progressBar, 3);"
    },
    {
      "name": "createPool",
      "file": "src/enhancedUIManager.js",
      "line": 31,
      "context": "this.performanceManager.createPool('timers', UIFactories.timerDisplay, 2);"
    },
    {
      "name": "log",
      "file": "src/enhancedUIManager.js",
      "line": 33,
      "context": "console.log('📦 UI element pools initialized');"
    },
    {
      "name": "setupOptimizedUpdates",
      "file": "src/enhancedUIManager.js",
      "line": 39,
      "context": "setupOptimizedUpdates() {"
    },
    {
      "name": "set",
      "file": "src/enhancedUIManager.js",
      "line": 41,
      "context": "this.optimizedUpdates.set('score', this.createScoreUpdater());"
    },
    {
      "name": "createScoreUpdater",
      "file": "src/enhancedUIManager.js",
      "line": 41,
      "context": "this.optimizedUpdates.set('score', this.createScoreUpdater());"
    },
    {
      "name": "set",
      "file": "src/enhancedUIManager.js",
      "line": 44,
      "context": "this.optimizedUpdates.set('roomInfo', this.createRoomInfoUpdater());"
    },
    {
      "name": "createRoomInfoUpdater",
      "file": "src/enhancedUIManager.js",
      "line": 44,
      "context": "this.optimizedUpdates.set('roomInfo', this.createRoomInfoUpdater());"
    },
    {
      "name": "set",
      "file": "src/enhancedUIManager.js",
      "line": 47,
      "context": "this.optimizedUpdates.set('question', this.createQuestionUpdater());"
    },
    {
      "name": "createQuestionUpdater",
      "file": "src/enhancedUIManager.js",
      "line": 47,
      "context": "this.optimizedUpdates.set('question', this.createQuestionUpdater());"
    },
    {
      "name": "set",
      "file": "src/enhancedUIManager.js",
      "line": 50,
      "context": "this.optimizedUpdates.set('progress', this.createProgressUpdater());"
    },
    {
      "name": "createProgressUpdater",
      "file": "src/enhancedUIManager.js",
      "line": 50,
      "context": "this.optimizedUpdates.set('progress', this.createProgressUpdater());"
    },
    {
      "name": "set",
      "file": "src/enhancedUIManager.js",
      "line": 53,
      "context": "this.optimizedUpdates.set('timer', this.createTimerUpdater());"
    },
    {
      "name": "createTimerUpdater",
      "file": "src/enhancedUIManager.js",
      "line": 53,
      "context": "this.optimizedUpdates.set('timer', this.createTimerUpdater());"
    },
    {
      "name": "createScoreUpdater",
      "file": "src/enhancedUIManager.js",
      "line": 59,
      "context": "createScoreUpdater() {"
    },
    {
      "name": "return",
      "file": "src/enhancedUIManager.js",
      "line": 63,
      "context": "return (newScore) => {"
    },
    {
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 65,
      "context": "scoreElement = document.getElementById('current-score');"
    },
    {
      "name": "batchDOMUpdate",
      "file": "src/enhancedUIManager.js",
      "line": 69,
      "context": "this.performanceManager.batchDOMUpdate("
    },
    {
      "name": "updateText",
      "file": "src/enhancedUIManager.js",
      "line": 70,
      "context": "DOMUpdateTemplates.updateText(scoreElement, newScore.toString()),"
    },
    {
      "name": "toString",
      "file": "src/enhancedUIManager.js",
      "line": 70,
      "context": "DOMUpdateTemplates.updateText(scoreElement, newScore.toString()),"
    },
    {
      "name": "createRoomInfoUpdater",
      "file": "src/enhancedUIManager.js",
      "line": 81,
      "context": "createRoomInfoUpdater() {"
    },
    {
      "name": "return",
      "file": "src/enhancedUIManager.js",
      "line": 85,
      "context": "return (roomData) => {"
    },
    {
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 89,
      "context": "elements.name = document.getElementById('room-name');"
    },
    {
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 90,
      "context": "elements.description = document.getElementById('room-description');"
    },
    {
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 91,
      "context": "elements.connections = document.getElementById('room-connections');"
    },
    {
      "name": "push",
      "file": "src/enhancedUIManager.js",
      "line": 97,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.name, roomData.name));"
    },
    {
      "name": "updateText",
      "file": "src/enhancedUIManager.js",
      "line": 97,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.name, roomData.name));"
    },
    {
      "name": "push",
      "file": "src/enhancedUIManager.js",
      "line": 101,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.description, roomData.description));"
    },
    {
      "name": "updateText",
      "file": "src/enhancedUIManager.js",
      "line": 101,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.description, roomData.description));"
    },
    {
      "name": "push",
      "file": "src/enhancedUIManager.js",
      "line": 105,
      "context": "updates.push(() => this.updateRoomConnections(elements.connections, roomData.connections));"
    },
    {
      "name": "updateRoomConnections",
      "file": "src/enhancedUIManager.js",
      "line": 105,
      "context": "updates.push(() => this.updateRoomConnections(elements.connections, roomData.connections));"
    },
    {
      "name": "forEach",
      "file": "src/enhancedUIManager.js",
      "line": 109,
      "context": "updates.forEach(update => this.performanceManager.batchDOMUpdate(update, 2));"
    },
    {
      "name": "batchDOMUpdate",
      "file": "src/enhancedUIManager.js",
      "line": 109,
      "context": "updates.forEach(update => this.performanceManager.batchDOMUpdate(update, 2));"
    },
    {
      "name": "createQuestionUpdater",
      "file": "src/enhancedUIManager.js",
      "line": 118,
      "context": "createQuestionUpdater() {"
    },
    {
      "name": "return",
      "file": "src/enhancedUIManager.js",
      "line": 122,
      "context": "return (questionData) => {"
    },
    {
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 126,
      "context": "elements.text = document.getElementById('question-text');"
    },
    {
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 127,
      "context": "elements.category = document.getElementById('question-category');"
    },
    {
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 128,
      "context": "elements.difficulty = document.getElementById('question-difficulty');"
    },
    {
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 129,
      "context": "elements.points = document.getElementById('question-points');"
    },
    {
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 130,
      "context": "elements.answers = document.getElementById('answer-buttons');"
    },
    {
      "name": "push",
      "file": "src/enhancedUIManager.js",
      "line": 136,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.text, questionData.question));"
    },
    {
      "name": "updateText",
      "file": "src/enhancedUIManager.js",
      "line": 136,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.text, questionData.question));"
    },
    {
      "name": "push",
      "file": "src/enhancedUIManager.js",
      "line": 140,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.category, questionData.category));"
    },
    {
      "name": "updateText",
      "file": "src/enhancedUIManager.js",
      "line": 140,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.category, questionData.category));"
    },
    {
      "name": "push",
      "file": "src/enhancedUIManager.js",
      "line": 144,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.difficulty, questionData.difficulty));"
    },
    {
      "name": "updateText",
      "file": "src/enhancedUIManager.js",
      "line": 144,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.difficulty, questionData.difficulty));"
    },
    {
      "name": "push",
      "file": "src/enhancedUIManager.js",
      "line": 148,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.points, `${questionData.points} points`));"
    },
    {
      "name": "updateText",
      "file": "src/enhancedUIManager.js",
      "line": 148,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.points, `${questionData.points} points`));"
    },
    {
      "name": "push",
      "file": "src/enhancedUIManager.js",
      "line": 152,
      "context": "updates.push(() => this.updateAnswerButtons(elements.answers, questionData.answers));"
    },
    {
      "name": "updateAnswerButtons",
      "file": "src/enhancedUIManager.js",
      "line": 152,
      "context": "updates.push(() => this.updateAnswerButtons(elements.answers, questionData.answers));"
    },
    {
      "name": "forEach",
      "file": "src/enhancedUIManager.js",
      "line": 156,
      "context": "updates.forEach(update => this.performanceManager.batchDOMUpdate(update, 1));"
    },
    {
      "name": "batchDOMUpdate",
      "file": "src/enhancedUIManager.js",
      "line": 156,
      "context": "updates.forEach(update => this.performanceManager.batchDOMUpdate(update, 1));"
    },
    {
      "name": "createProgressUpdater",
      "file": "src/enhancedUIManager.js",
      "line": 165,
      "context": "createProgressUpdater() {"
    },
    {
      "name": "return",
      "file": "src/enhancedUIManager.js",
      "line": 169,
      "context": "return (progressData) => {"
    },
    {
      "name": "stringify",
      "file": "src/enhancedUIManager.js",
      "line": 170,
      "context": "const progressKey = JSON.stringify(progressData);"
    },
    {
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 175,
      "context": "percent: document.getElementById('overall-progress-percent'),"
    },
    {
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 176,
      "context": "fill: document.getElementById('overall-progress-fill')"
    },
    {
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 179,
      "context": "percent: document.getElementById('rooms-progress-percent'),"
    },
    {
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 180,
      "context": "fill: document.getElementById('rooms-progress-fill')"
    },
    {
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 183,
      "context": "percent: document.getElementById('accuracy-progress-percent'),"
    },
    {
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 184,
      "context": "fill: document.getElementById('accuracy-progress-fill')"
    },
    {
      "name": "warn",
      "file": "src/enhancedUIManager.js",
      "line": 189,
      "context": "console.warn('Enhanced UI: Overall progress elements not found');"
    },
    {
      "name": "warn",
      "file": "src/enhancedUIManager.js",
      "line": 192,
      "context": "console.warn('Enhanced UI: Rooms progress elements not found');"
    },
    {
      "name": "warn",
      "file": "src/enhancedUIManager.js",
      "line": 195,
      "context": "console.warn('Enhanced UI: Accuracy progress elements not found');"
    },
    {
      "name": "push",
      "file": "src/enhancedUIManager.js",
      "line": 202,
      "context": "updates.push(() => {"
    },
    {
      "name": "round",
      "file": "src/enhancedUIManager.js",
      "line": 203,
      "context": "elements.overall.percent.textContent = `${Math.round(progressData.overall)}%`;"
    },
    {
      "name": "max",
      "file": "src/enhancedUIManager.js",
      "line": 204,
      "context": "elements.overall.fill.style.width = `${Math.max(0, progressData.overall)}%`;"
    },
    {
      "name": "setAttribute",
      "file": "src/enhancedUIManager.js",
      "line": 205,
      "context": "elements.overall.fill.setAttribute('aria-valuenow', progressData.overall);"
    },
    {
      "name": "push",
      "file": "src/enhancedUIManager.js",
      "line": 210,
      "context": "updates.push(() => {"
    },
    {
      "name": "round",
      "file": "src/enhancedUIManager.js",
      "line": 211,
      "context": "elements.rooms.percent.textContent = `${Math.round(progressData.rooms)}%`;"
    },
    {
      "name": "max",
      "file": "src/enhancedUIManager.js",
      "line": 212,
      "context": "elements.rooms.fill.style.width = `${Math.max(0, progressData.rooms)}%`;"
    },
    {
      "name": "setAttribute",
      "file": "src/enhancedUIManager.js",
      "line": 213,
      "context": "elements.rooms.fill.setAttribute('aria-valuenow', progressData.rooms);"
    },
    {
      "name": "push",
      "file": "src/enhancedUIManager.js",
      "line": 218,
      "context": "updates.push(() => {"
    },
    {
      "name": "round",
      "file": "src/enhancedUIManager.js",
      "line": 219,
      "context": "elements.accuracy.percent.textContent = `${Math.round(progressData.accuracy)}%`;"
    },
    {
      "name": "max",
      "file": "src/enhancedUIManager.js",
      "line": 220,
      "context": "elements.accuracy.fill.style.width = `${Math.max(0, progressData.accuracy)}%`;"
    },
    {
      "name": "setAttribute",
      "file": "src/enhancedUIManager.js",
      "line": 221,
      "context": "elements.accuracy.fill.setAttribute('aria-valuenow', progressData.accuracy);"
    },
    {
      "name": "forEach",
      "file": "src/enhancedUIManager.js",
      "line": 226,
      "context": "updates.forEach(update => this.performanceManager.batchDOMUpdate(update, 2));"
    },
    {
      "name": "batchDOMUpdate",
      "file": "src/enhancedUIManager.js",
      "line": 226,
      "context": "updates.forEach(update => this.performanceManager.batchDOMUpdate(update, 2));"
    },
    {
      "name": "createTimerUpdater",
      "file": "src/enhancedUIManager.js",
      "line": 235,
      "context": "createTimerUpdater() {"
    },
    {
      "name": "return",
      "file": "src/enhancedUIManager.js",
      "line": 239,
      "context": "return (timeRemaining, totalTime) => {"
    },
    {
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 243,
      "context": "timerElement = document.getElementById('timer-text');"
    },
    {
      "name": "warn",
      "file": "src/enhancedUIManager.js",
      "line": 245,
      "context": "console.warn('Enhanced UI: Timer element (timer-text) not found');"
    },
    {
      "name": "element",
      "file": "src/enhancedUIManager.js",
      "line": 245,
      "context": "console.warn('Enhanced UI: Timer element (timer-text) not found');"
    },
    {
      "name": "batchDOMUpdate",
      "file": "src/enhancedUIManager.js",
      "line": 251,
      "context": "this.performanceManager.batchDOMUpdate("
    },
    {
      "name": "updateTimer",
      "file": "src/enhancedUIManager.js",
      "line": 252,
      "context": "DOMUpdateTemplates.updateTimer(timerElement, timeRemaining, totalTime),"
    },
    {
      "name": "updateRoomConnections",
      "file": "src/enhancedUIManager.js",
      "line": 263,
      "context": "updateRoomConnections(container, connections) {"
    },
    {
      "name": "forEach",
      "file": "src/enhancedUIManager.js",
      "line": 267,
      "context": "connections.forEach(connection => {"
    },
    {
      "name": "acquireFromPool",
      "file": "src/enhancedUIManager.js",
      "line": 268,
      "context": "const connectionElement = this.performanceManager.acquireFromPool('roomConnections');"
    },
    {
      "name": "querySelector",
      "file": "src/enhancedUIManager.js",
      "line": 269,
      "context": "const link = connectionElement.querySelector('.connection-link');"
    },
    {
      "name": "setAttribute",
      "file": "src/enhancedUIManager.js",
      "line": 272,
      "context": "link.setAttribute('data-room-id', connection.id);"
    },
    {
      "name": "setAttribute",
      "file": "src/enhancedUIManager.js",
      "line": 273,
      "context": "link.setAttribute('aria-label', `Navigate to ${connection.name}`);"
    },
    {
      "name": "add",
      "file": "src/enhancedUIManager.js",
      "line": 276,
      "context": "connectionElement.classList.add('locked');"
    },
    {
      "name": "remove",
      "file": "src/enhancedUIManager.js",
      "line": 279,
      "context": "connectionElement.classList.remove('locked');"
    },
    {
      "name": "moveToRoom",
      "file": "src/enhancedUIManager.js",
      "line": 281,
      "context": "link.onclick = () => this.originalUI.moveToRoom(connection.id);"
    },
    {
      "name": "appendChild",
      "file": "src/enhancedUIManager.js",
      "line": 284,
      "context": "container.appendChild(connectionElement);"
    },
    {
      "name": "updateAnswerButtons",
      "file": "src/enhancedUIManager.js",
      "line": 291,
      "context": "updateAnswerButtons(container, answers) {"
    },
    {
      "name": "forEach",
      "file": "src/enhancedUIManager.js",
      "line": 295,
      "context": "answers.forEach((answer, index) => {"
    },
    {
      "name": "acquireFromPool",
      "file": "src/enhancedUIManager.js",
      "line": 296,
      "context": "const button = this.performanceManager.acquireFromPool('answerButtons');"
    },
    {
      "name": "setAttribute",
      "file": "src/enhancedUIManager.js",
      "line": 299,
      "context": "button.setAttribute('data-answer-index', index);"
    },
    {
      "name": "setAttribute",
      "file": "src/enhancedUIManager.js",
      "line": 300,
      "context": "button.setAttribute('aria-label', `Answer option ${index + 1}: ${answer}`);"
    },
    {
      "name": "selectAnswer",
      "file": "src/enhancedUIManager.js",
      "line": 301,
      "context": "button.onclick = () => this.originalUI.selectAnswer(index);"
    },
    {
      "name": "appendChild",
      "file": "src/enhancedUIManager.js",
      "line": 303,
      "context": "container.appendChild(button);"
    },
    {
      "name": "showOptimizedNotification",
      "file": "src/enhancedUIManager.js",
      "line": 310,
      "context": "showOptimizedNotification(type, title, message, duration = 5000) {"
    },
    {
      "name": "acquireFromPool",
      "file": "src/enhancedUIManager.js",
      "line": 311,
      "context": "const notification = this.performanceManager.acquireFromPool('notifications');"
    },
    {
      "name": "querySelector",
      "file": "src/enhancedUIManager.js",
      "line": 312,
      "context": "const icon = notification.querySelector('.toast-icon');"
    },
    {
      "name": "querySelector",
      "file": "src/enhancedUIManager.js",
      "line": 313,
      "context": "const titleElement = notification.querySelector('.toast-title');"
    },
    {
      "name": "querySelector",
      "file": "src/enhancedUIManager.js",
      "line": 314,
      "context": "const messageElement = notification.querySelector('.toast-message');"
    },
    {
      "name": "setAttribute",
      "file": "src/enhancedUIManager.js",
      "line": 318,
      "context": "notification.setAttribute('data-type', type);"
    },
    {
      "name": "appendChild",
      "file": "src/enhancedUIManager.js",
      "line": 333,
      "context": "document.body.appendChild(notification);"
    },
    {
      "name": "translateX",
      "file": "src/enhancedUIManager.js",
      "line": 337,
      "context": "notification.style.transform = 'translateX(0)';"
    },
    {
      "name": "translateX",
      "file": "src/enhancedUIManager.js",
      "line": 343,
      "context": "notification.style.transform = 'translateX(100%)';"
    },
    {
      "name": "removeChild",
      "file": "src/enhancedUIManager.js",
      "line": 348,
      "context": "notification.parentNode.removeChild(notification);"
    },
    {
      "name": "releaseToPool",
      "file": "src/enhancedUIManager.js",
      "line": 350,
      "context": "this.performanceManager.releaseToPool('notifications', notification);"
    },
    {
      "name": "updateUI",
      "file": "src/enhancedUIManager.js",
      "line": 358,
      "context": "updateUI(updates) {"
    },
    {
      "name": "entries",
      "file": "src/enhancedUIManager.js",
      "line": 359,
      "context": "for (const [type, data] of Object.entries(updates)) {"
    },
    {
      "name": "get",
      "file": "src/enhancedUIManager.js",
      "line": 360,
      "context": "const updater = this.optimizedUpdates.get(type);"
    },
    {
      "name": "updater",
      "file": "src/enhancedUIManager.js",
      "line": 362,
      "context": "updater(data);"
    },
    {
      "name": "updateScore",
      "file": "src/enhancedUIManager.js",
      "line": 370,
      "context": "updateScore(score) {"
    },
    {
      "name": "get",
      "file": "src/enhancedUIManager.js",
      "line": 371,
      "context": "const updater = this.optimizedUpdates.get('score');"
    },
    {
      "name": "updater",
      "file": "src/enhancedUIManager.js",
      "line": 373,
      "context": "updater(score);"
    },
    {
      "name": "updateScore",
      "file": "src/enhancedUIManager.js",
      "line": 375,
      "context": "this.originalUI.updateScore(score);"
    },
    {
      "name": "updateRoomInfo",
      "file": "src/enhancedUIManager.js",
      "line": 379,
      "context": "updateRoomInfo(roomData) {"
    },
    {
      "name": "get",
      "file": "src/enhancedUIManager.js",
      "line": 380,
      "context": "const updater = this.optimizedUpdates.get('roomInfo');"
    },
    {
      "name": "updater",
      "file": "src/enhancedUIManager.js",
      "line": 382,
      "context": "updater(roomData);"
    },
    {
      "name": "updateRoomInfo",
      "file": "src/enhancedUIManager.js",
      "line": 384,
      "context": "this.originalUI.updateRoomInfo(roomData);"
    },
    {
      "name": "updateQuestionDisplay",
      "file": "src/enhancedUIManager.js",
      "line": 388,
      "context": "updateQuestionDisplay(questionData) {"
    },
    {
      "name": "get",
      "file": "src/enhancedUIManager.js",
      "line": 389,
      "context": "const updater = this.optimizedUpdates.get('question');"
    },
    {
      "name": "updater",
      "file": "src/enhancedUIManager.js",
      "line": 391,
      "context": "updater(questionData);"
    },
    {
      "name": "updateQuestionDisplay",
      "file": "src/enhancedUIManager.js",
      "line": 393,
      "context": "this.originalUI.updateQuestionDisplay(questionData);"
    },
    {
      "name": "updateProgress",
      "file": "src/enhancedUIManager.js",
      "line": 397,
      "context": "updateProgress(progressData) {"
    },
    {
      "name": "get",
      "file": "src/enhancedUIManager.js",
      "line": 398,
      "context": "const updater = this.optimizedUpdates.get('progress');"
    },
    {
      "name": "updater",
      "file": "src/enhancedUIManager.js",
      "line": 400,
      "context": "updater(progressData);"
    },
    {
      "name": "updateProgress",
      "file": "src/enhancedUIManager.js",
      "line": 402,
      "context": "this.originalUI.updateProgress(progressData);"
    },
    {
      "name": "updateTimer",
      "file": "src/enhancedUIManager.js",
      "line": 406,
      "context": "updateTimer(timeRemaining, totalTime) {"
    },
    {
      "name": "get",
      "file": "src/enhancedUIManager.js",
      "line": 407,
      "context": "const updater = this.optimizedUpdates.get('timer');"
    },
    {
      "name": "updater",
      "file": "src/enhancedUIManager.js",
      "line": 409,
      "context": "updater(timeRemaining, totalTime);"
    },
    {
      "name": "updateTimer",
      "file": "src/enhancedUIManager.js",
      "line": 411,
      "context": "this.originalUI.updateTimer(timeRemaining, totalTime);"
    },
    {
      "name": "showNotification",
      "file": "src/enhancedUIManager.js",
      "line": 418,
      "context": "showNotification(type, title, message, duration) {"
    },
    {
      "name": "showOptimizedNotification",
      "file": "src/enhancedUIManager.js",
      "line": 419,
      "context": "this.showOptimizedNotification(type, title, message, duration);"
    },
    {
      "name": "cleanup",
      "file": "src/enhancedUIManager.js",
      "line": 425,
      "context": "cleanup() {"
    },
    {
      "name": "forEach",
      "file": "src/enhancedUIManager.js",
      "line": 427,
      "context": "['answerButtons', 'notifications', 'roomConnections', 'progressBars', 'timers'].forEach(poolName => {"
    },
    {
      "name": "get",
      "file": "src/enhancedUIManager.js",
      "line": 428,
      "context": "const pool = this.performanceManager.objectPools.get(poolName);"
    },
    {
      "name": "clear",
      "file": "src/enhancedUIManager.js",
      "line": 431,
      "context": "pool.inUse.clear();"
    },
    {
      "name": "forEach",
      "file": "src/enhancedUIManager.js",
      "line": 434,
      "context": "pool.available.forEach(item => {"
    },
    {
      "name": "reset",
      "file": "src/enhancedUIManager.js",
      "line": 436,
      "context": "item.reset();"
    },
    {
      "name": "clear",
      "file": "src/enhancedUIManager.js",
      "line": 443,
      "context": "this.updateQueue.clear();"
    },
    {
      "name": "log",
      "file": "src/enhancedUIManager.js",
      "line": 446,
      "context": "console.log('🧹 Enhanced UIManager cleanup completed');"
    },
    {
      "name": "getUIPerformanceStats",
      "file": "src/enhancedUIManager.js",
      "line": 452,
      "context": "getUIPerformanceStats() {"
    },
    {
      "name": "map",
      "file": "src/enhancedUIManager.js",
      "line": 455,
      "context": ".map(name => this.performanceManager.getPoolStats(name)),"
    },
    {
      "name": "getPoolStats",
      "file": "src/enhancedUIManager.js",
      "line": 455,
      "context": ".map(name => this.performanceManager.getPoolStats(name)),"
    },
    {
      "name": "selectAnswer",
      "file": "src/enhancedUIManager.js",
      "line": 465,
      "context": "selectAnswer(index) {"
    },
    {
      "name": "selectAnswer",
      "file": "src/enhancedUIManager.js",
      "line": 466,
      "context": "return this.originalUI.selectAnswer(index);"
    },
    {
      "name": "moveToRoom",
      "file": "src/enhancedUIManager.js",
      "line": 469,
      "context": "moveToRoom(roomId) {"
    },
    {
      "name": "moveToRoom",
      "file": "src/enhancedUIManager.js",
      "line": 470,
      "context": "return this.originalUI.moveToRoom(roomId);"
    },
    {
      "name": "newQuestion",
      "file": "src/enhancedUIManager.js",
      "line": 473,
      "context": "newQuestion() {"
    },
    {
      "name": "newQuestion",
      "file": "src/enhancedUIManager.js",
      "line": 474,
      "context": "return this.originalUI.newQuestion();"
    },
    {
      "name": "skipQuestion",
      "file": "src/enhancedUIManager.js",
      "line": 477,
      "context": "skipQuestion() {"
    },
    {
      "name": "skipQuestion",
      "file": "src/enhancedUIManager.js",
      "line": 478,
      "context": "return this.originalUI.skipQuestion();"
    },
    {
      "name": "showHint",
      "file": "src/enhancedUIManager.js",
      "line": 481,
      "context": "showHint() {"
    },
    {
      "name": "showHint",
      "file": "src/enhancedUIManager.js",
      "line": 482,
      "context": "return this.originalUI.showHint();"
    },
    {
      "name": "saveGame",
      "file": "src/enhancedUIManager.js",
      "line": 485,
      "context": "saveGame() {"
    },
    {
      "name": "saveGame",
      "file": "src/enhancedUIManager.js",
      "line": 486,
      "context": "return this.originalUI.saveGame();"
    },
    {
      "name": "loadGame",
      "file": "src/enhancedUIManager.js",
      "line": 489,
      "context": "loadGame() {"
    },
    {
      "name": "loadGame",
      "file": "src/enhancedUIManager.js",
      "line": 490,
      "context": "return this.originalUI.loadGame();"
    },
    {
      "name": "resetGame",
      "file": "src/enhancedUIManager.js",
      "line": 493,
      "context": "resetGame() {"
    },
    {
      "name": "resetGame",
      "file": "src/enhancedUIManager.js",
      "line": 494,
      "context": "return this.originalUI.resetGame();"
    },
    {
      "name": "constructor",
      "file": "src/learningAnalytics.js",
      "line": 6,
      "context": "constructor(gameState = null) {"
    },
    {
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 11,
      "context": "startTime: Date.now(),"
    },
    {
      "name": "generateSessionId",
      "file": "src/learningAnalytics.js",
      "line": 12,
      "context": "sessionId: this.generateSessionId(),"
    },
    {
      "name": "Map",
      "file": "src/learningAnalytics.js",
      "line": 13,
      "context": "questionPatterns: new Map(),"
    },
    {
      "name": "Map",
      "file": "src/learningAnalytics.js",
      "line": 18,
      "context": "categoryPerformance: new Map(),"
    },
    {
      "name": "loadPersistentData",
      "file": "src/learningAnalytics.js",
      "line": 38,
      "context": "this.loadPersistentData();"
    },
    {
      "name": "setupPerformanceObserver",
      "file": "src/learningAnalytics.js",
      "line": 39,
      "context": "this.setupPerformanceObserver();"
    },
    {
      "name": "log",
      "file": "src/learningAnalytics.js",
      "line": 41,
      "context": "console.log('📊 LearningAnalytics initialized - Advanced educational tracking active');"
    },
    {
      "name": "generateSessionId",
      "file": "src/learningAnalytics.js",
      "line": 48,
      "context": "generateSessionId() {"
    },
    {
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 49,
      "context": "return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;"
    },
    {
      "name": "random",
      "file": "src/learningAnalytics.js",
      "line": 49,
      "context": "return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;"
    },
    {
      "name": "toString",
      "file": "src/learningAnalytics.js",
      "line": 49,
      "context": "return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;"
    },
    {
      "name": "substr",
      "file": "src/learningAnalytics.js",
      "line": 49,
      "context": "return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;"
    },
    {
      "name": "loadPersistentData",
      "file": "src/learningAnalytics.js",
      "line": 55,
      "context": "loadPersistentData() {"
    },
    {
      "name": "getItem",
      "file": "src/learningAnalytics.js",
      "line": 57,
      "context": "const saved = localStorage.getItem('lobeLabyrinth_analytics');"
    },
    {
      "name": "parse",
      "file": "src/learningAnalytics.js",
      "line": 59,
      "context": "const data = JSON.parse(saved);"
    },
    {
      "name": "createDefaultProfile",
      "file": "src/learningAnalytics.js",
      "line": 62,
      "context": "this.learnerProfile = data.learnerProfile || this.createDefaultProfile();"
    },
    {
      "name": "createDefaultProfile",
      "file": "src/learningAnalytics.js",
      "line": 66,
      "context": "this.learnerProfile = this.createDefaultProfile();"
    },
    {
      "name": "warn",
      "file": "src/learningAnalytics.js",
      "line": 69,
      "context": "console.warn('Failed to load learning analytics data:', error);"
    },
    {
      "name": "createDefaultProfile",
      "file": "src/learningAnalytics.js",
      "line": 72,
      "context": "this.learnerProfile = this.createDefaultProfile();"
    },
    {
      "name": "createDefaultProfile",
      "file": "src/learningAnalytics.js",
      "line": 80,
      "context": "createDefaultProfile() {"
    },
    {
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 89,
      "context": "createdAt: Date.now()"
    },
    {
      "name": "setupPerformanceObserver",
      "file": "src/learningAnalytics.js",
      "line": 96,
      "context": "setupPerformanceObserver() {"
    },
    {
      "name": "warn",
      "file": "src/learningAnalytics.js",
      "line": 98,
      "context": "console.warn('PerformanceObserver not supported');"
    },
    {
      "name": "PerformanceObserver",
      "file": "src/learningAnalytics.js",
      "line": 103,
      "context": "const observer = new PerformanceObserver((list) => {"
    },
    {
      "name": "getEntries",
      "file": "src/learningAnalytics.js",
      "line": 104,
      "context": "for (const entry of list.getEntries()) {"
    },
    {
      "name": "includes",
      "file": "src/learningAnalytics.js",
      "line": 105,
      "context": "if (entry.name.includes('question') || entry.name.includes('answer')) {"
    },
    {
      "name": "includes",
      "file": "src/learningAnalytics.js",
      "line": 105,
      "context": "if (entry.name.includes('question') || entry.name.includes('answer')) {"
    },
    {
      "name": "trackPerformanceMetric",
      "file": "src/learningAnalytics.js",
      "line": 106,
      "context": "this.trackPerformanceMetric(entry);"
    },
    {
      "name": "observe",
      "file": "src/learningAnalytics.js",
      "line": 111,
      "context": "observer.observe({ entryTypes: ['measure', 'navigation'] });"
    },
    {
      "name": "warn",
      "file": "src/learningAnalytics.js",
      "line": 113,
      "context": "console.warn('Performance observer setup failed:', error);"
    },
    {
      "name": "trackPerformanceMetric",
      "file": "src/learningAnalytics.js",
      "line": 121,
      "context": "trackPerformanceMetric(entry) {"
    },
    {
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 122,
      "context": "this.sessionData.timePatterns.push({"
    },
    {
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 123,
      "context": "timestamp: Date.now(),"
    },
    {
      "name": "trackQuestionResponse",
      "file": "src/learningAnalytics.js",
      "line": 134,
      "context": "trackQuestionResponse(questionData) {"
    },
    {
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 156,
      "context": "timestamp: Date.now()"
    },
    {
      "name": "set",
      "file": "src/learningAnalytics.js",
      "line": 159,
      "context": "this.sessionData.questionPatterns.set(questionId, pattern);"
    },
    {
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 160,
      "context": "this.sessionData.difficultyProgression.push(difficulty);"
    },
    {
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 163,
      "context": "this.sessionData.hintUsage.push({"
    },
    {
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 167,
      "context": "timestamp: Date.now()"
    },
    {
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 173,
      "context": "this.sessionData.errorPatterns.push({"
    },
    {
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 179,
      "context": "timestamp: Date.now()"
    },
    {
      "name": "has",
      "file": "src/learningAnalytics.js",
      "line": 184,
      "context": "if (!this.sessionData.categoryPerformance.has(category)) {"
    },
    {
      "name": "set",
      "file": "src/learningAnalytics.js",
      "line": 185,
      "context": "this.sessionData.categoryPerformance.set(category, {"
    },
    {
      "name": "get",
      "file": "src/learningAnalytics.js",
      "line": 193,
      "context": "const categoryStats = this.sessionData.categoryPerformance.get(category);"
    },
    {
      "name": "updateStreakData",
      "file": "src/learningAnalytics.js",
      "line": 203,
      "context": "this.updateStreakData(isCorrect);"
    },
    {
      "name": "updateLearnerProfile",
      "file": "src/learningAnalytics.js",
      "line": 206,
      "context": "this.updateLearnerProfile(pattern);"
    },
    {
      "name": "log",
      "file": "src/learningAnalytics.js",
      "line": 208,
      "context": "console.log(`📈 Tracked response: ${category} (${difficulty}) - ${isCorrect ? 'Correct' : 'Incorrect'}`);"
    },
    {
      "name": "updateStreakData",
      "file": "src/learningAnalytics.js",
      "line": 215,
      "context": "updateStreakData(isCorrect) {"
    },
    {
      "name": "max",
      "file": "src/learningAnalytics.js",
      "line": 226,
      "context": "this.learnerProfile.longestStreak = Math.max("
    },
    {
      "name": "updateLearnerProfile",
      "file": "src/learningAnalytics.js",
      "line": 245,
      "context": "updateLearnerProfile(pattern) {"
    },
    {
      "name": "from",
      "file": "src/learningAnalytics.js",
      "line": 249,
      "context": "const totalCorrect = Array.from(this.sessionData.questionPatterns.values())"
    },
    {
      "name": "values",
      "file": "src/learningAnalytics.js",
      "line": 249,
      "context": "const totalCorrect = Array.from(this.sessionData.questionPatterns.values())"
    },
    {
      "name": "filter",
      "file": "src/learningAnalytics.js",
      "line": 250,
      "context": ".filter(p => p.isCorrect).length;"
    },
    {
      "name": "updateCategoryAssessment",
      "file": "src/learningAnalytics.js",
      "line": 254,
      "context": "this.updateCategoryAssessment(pattern);"
    },
    {
      "name": "updateLearningSpeedPreference",
      "file": "src/learningAnalytics.js",
      "line": 257,
      "context": "this.updateLearningSpeedPreference(pattern);"
    },
    {
      "name": "updateCategoryAssessment",
      "file": "src/learningAnalytics.js",
      "line": 264,
      "context": "updateCategoryAssessment(pattern) {"
    },
    {
      "name": "get",
      "file": "src/learningAnalytics.js",
      "line": 265,
      "context": "const categoryStats = this.sessionData.categoryPerformance.get(pattern.category);"
    },
    {
      "name": "includes",
      "file": "src/learningAnalytics.js",
      "line": 269,
      "context": "if (!this.learnerProfile.strongCategories.includes(pattern.category)) {"
    },
    {
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 270,
      "context": "this.learnerProfile.strongCategories.push(pattern.category);"
    },
    {
      "name": "filter",
      "file": "src/learningAnalytics.js",
      "line": 274,
      "context": ".filter(cat => cat !== pattern.category);"
    },
    {
      "name": "includes",
      "file": "src/learningAnalytics.js",
      "line": 276,
      "context": "if (!this.learnerProfile.improvementAreas.includes(pattern.category)) {"
    },
    {
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 277,
      "context": "this.learnerProfile.improvementAreas.push(pattern.category);"
    },
    {
      "name": "filter",
      "file": "src/learningAnalytics.js",
      "line": 281,
      "context": ".filter(cat => cat !== pattern.category);"
    },
    {
      "name": "updateLearningSpeedPreference",
      "file": "src/learningAnalytics.js",
      "line": 289,
      "context": "updateLearningSpeedPreference(pattern) {"
    },
    {
      "name": "from",
      "file": "src/learningAnalytics.js",
      "line": 290,
      "context": "const recentPatterns = Array.from(this.sessionData.questionPatterns.values())"
    },
    {
      "name": "values",
      "file": "src/learningAnalytics.js",
      "line": 290,
      "context": "const recentPatterns = Array.from(this.sessionData.questionPatterns.values())"
    },
    {
      "name": "slice",
      "file": "src/learningAnalytics.js",
      "line": 291,
      "context": ".slice(-this.learningMetrics.velocityWindow);"
    },
    {
      "name": "reduce",
      "file": "src/learningAnalytics.js",
      "line": 294,
      "context": "const averageTime = recentPatterns.reduce((sum, p) => sum + p.timeSpent, 0) / recentPatterns.length;"
    },
    {
      "name": "calculateLearningVelocity",
      "file": "src/learningAnalytics.js",
      "line": 310,
      "context": "calculateLearningVelocity() {"
    },
    {
      "name": "from",
      "file": "src/learningAnalytics.js",
      "line": 311,
      "context": "const patterns = Array.from(this.sessionData.questionPatterns.values());"
    },
    {
      "name": "values",
      "file": "src/learningAnalytics.js",
      "line": 311,
      "context": "const patterns = Array.from(this.sessionData.questionPatterns.values());"
    },
    {
      "name": "slice",
      "file": "src/learningAnalytics.js",
      "line": 316,
      "context": "const recentPatterns = patterns.slice(-this.learningMetrics.velocityWindow);"
    },
    {
      "name": "slice",
      "file": "src/learningAnalytics.js",
      "line": 317,
      "context": "const firstHalf = recentPatterns.slice(0, Math.floor(recentPatterns.length / 2));"
    },
    {
      "name": "floor",
      "file": "src/learningAnalytics.js",
      "line": 317,
      "context": "const firstHalf = recentPatterns.slice(0, Math.floor(recentPatterns.length / 2));"
    },
    {
      "name": "slice",
      "file": "src/learningAnalytics.js",
      "line": 318,
      "context": "const secondHalf = recentPatterns.slice(Math.floor(recentPatterns.length / 2));"
    },
    {
      "name": "floor",
      "file": "src/learningAnalytics.js",
      "line": 318,
      "context": "const secondHalf = recentPatterns.slice(Math.floor(recentPatterns.length / 2));"
    },
    {
      "name": "filter",
      "file": "src/learningAnalytics.js",
      "line": 320,
      "context": "const firstHalfAccuracy = firstHalf.filter(p => p.isCorrect).length / firstHalf.length;"
    },
    {
      "name": "filter",
      "file": "src/learningAnalytics.js",
      "line": 321,
      "context": "const secondHalfAccuracy = secondHalf.filter(p => p.isCorrect).length / secondHalf.length;"
    },
    {
      "name": "min",
      "file": "src/learningAnalytics.js",
      "line": 335,
      "context": "confidence: Math.min(recentPatterns.length / this.learningMetrics.velocityWindow, 1),"
    },
    {
      "name": "generateLearningInsights",
      "file": "src/learningAnalytics.js",
      "line": 345,
      "context": "generateLearningInsights() {"
    },
    {
      "name": "calculateLearningVelocity",
      "file": "src/learningAnalytics.js",
      "line": 346,
      "context": "const velocity = this.calculateLearningVelocity();"
    },
    {
      "name": "getSessionStatistics",
      "file": "src/learningAnalytics.js",
      "line": 347,
      "context": "const sessionStats = this.getSessionStatistics();"
    },
    {
      "name": "identifyStrengthsAndWeaknesses",
      "file": "src/learningAnalytics.js",
      "line": 348,
      "context": "const strengths = this.identifyStrengthsAndWeaknesses();"
    },
    {
      "name": "generateRecommendations",
      "file": "src/learningAnalytics.js",
      "line": 349,
      "context": "const recommendations = this.generateRecommendations();"
    },
    {
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 353,
      "context": "timestamp: Date.now(),"
    },
    {
      "name": "generateMotivationalMessage",
      "file": "src/learningAnalytics.js",
      "line": 358,
      "context": "motivationalMessage: this.generateMotivationalMessage(velocity, sessionStats)"
    },
    {
      "name": "getSessionStatistics",
      "file": "src/learningAnalytics.js",
      "line": 371,
      "context": "getSessionStatistics() {"
    },
    {
      "name": "from",
      "file": "src/learningAnalytics.js",
      "line": 372,
      "context": "const patterns = Array.from(this.sessionData.questionPatterns.values());"
    },
    {
      "name": "values",
      "file": "src/learningAnalytics.js",
      "line": 372,
      "context": "const patterns = Array.from(this.sessionData.questionPatterns.values());"
    },
    {
      "name": "filter",
      "file": "src/learningAnalytics.js",
      "line": 374,
      "context": "const correctAnswers = patterns.filter(p => p.isCorrect).length;"
    },
    {
      "name": "reduce",
      "file": "src/learningAnalytics.js",
      "line": 377,
      "context": "const totalTime = patterns.reduce((sum, p) => sum + p.timeSpent, 0);"
    },
    {
      "name": "from",
      "file": "src/learningAnalytics.js",
      "line": 380,
      "context": "const categories = Array.from(this.sessionData.categoryPerformance.entries());"
    },
    {
      "name": "entries",
      "file": "src/learningAnalytics.js",
      "line": 380,
      "context": "const categories = Array.from(this.sessionData.categoryPerformance.entries());"
    },
    {
      "name": "reduce",
      "file": "src/learningAnalytics.js",
      "line": 381,
      "context": "const hintsUsed = this.sessionData.hintUsage.reduce((sum, h) => sum + h.hintsUsed, 0);"
    },
    {
      "name": "round",
      "file": "src/learningAnalytics.js",
      "line": 386,
      "context": "accuracy: Math.round(accuracy * 100),"
    },
    {
      "name": "round",
      "file": "src/learningAnalytics.js",
      "line": 387,
      "context": "averageTimePerQuestion: Math.round(averageTimePerQuestion / 1000), // Convert to seconds"
    },
    {
      "name": "round",
      "file": "src/learningAnalytics.js",
      "line": 392,
      "context": "sessionDuration: Math.round((Date.now() - this.sessionData.startTime) / 1000 / 60) // minutes"
    },
    {
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 392,
      "context": "sessionDuration: Math.round((Date.now() - this.sessionData.startTime) / 1000 / 60) // minutes"
    },
    {
      "name": "identifyStrengthsAndWeaknesses",
      "file": "src/learningAnalytics.js",
      "line": 400,
      "context": "identifyStrengthsAndWeaknesses() {"
    },
    {
      "name": "from",
      "file": "src/learningAnalytics.js",
      "line": 401,
      "context": "const categoryPerformance = Array.from(this.sessionData.categoryPerformance.entries())"
    },
    {
      "name": "entries",
      "file": "src/learningAnalytics.js",
      "line": 401,
      "context": "const categoryPerformance = Array.from(this.sessionData.categoryPerformance.entries())"
    },
    {
      "name": "map",
      "file": "src/learningAnalytics.js",
      "line": 402,
      "context": ".map(([category, stats]) => ({"
    },
    {
      "name": "filter",
      "file": "src/learningAnalytics.js",
      "line": 408,
      "context": ".filter(cat => cat.questionsAnswered >= 2); // Only consider categories with at least 2 questions"
    },
    {
      "name": "filter",
      "file": "src/learningAnalytics.js",
      "line": 411,
      "context": ".filter(cat => cat.accuracy >= this.learningMetrics.masteryThreshold)"
    },
    {
      "name": "sort",
      "file": "src/learningAnalytics.js",
      "line": 412,
      "context": ".sort((a, b) => b.accuracy - a.accuracy);"
    },
    {
      "name": "filter",
      "file": "src/learningAnalytics.js",
      "line": 415,
      "context": ".filter(cat => cat.accuracy < 0.6)"
    },
    {
      "name": "sort",
      "file": "src/learningAnalytics.js",
      "line": 416,
      "context": ".sort((a, b) => a.accuracy - b.accuracy);"
    },
    {
      "name": "generateRecommendations",
      "file": "src/learningAnalytics.js",
      "line": 425,
      "context": "generateRecommendations() {"
    },
    {
      "name": "calculateLearningVelocity",
      "file": "src/learningAnalytics.js",
      "line": 427,
      "context": "const velocity = this.calculateLearningVelocity();"
    },
    {
      "name": "getSessionStatistics",
      "file": "src/learningAnalytics.js",
      "line": 428,
      "context": "const sessionStats = this.getSessionStatistics();"
    },
    {
      "name": "identifyStrengthsAndWeaknesses",
      "file": "src/learningAnalytics.js",
      "line": 429,
      "context": "const strengths = this.identifyStrengthsAndWeaknesses();"
    },
    {
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 433,
      "context": "recommendations.push({"
    },
    {
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 444,
      "context": "recommendations.push({"
    },
    {
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 455,
      "context": "recommendations.push({"
    },
    {
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 467,
      "context": "recommendations.push({"
    },
    {
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 478,
      "context": "recommendations.push({"
    },
    {
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 486,
      "context": "recommendations.push({"
    },
    {
      "name": "slice",
      "file": "src/learningAnalytics.js",
      "line": 495,
      "context": "return recommendations.slice(0, 3); // Limit to top 3 recommendations"
    },
    {
      "name": "generateMotivationalMessage",
      "file": "src/learningAnalytics.js",
      "line": 504,
      "context": "generateMotivationalMessage(velocity, sessionStats) {"
    },
    {
      "name": "floor",
      "file": "src/learningAnalytics.js",
      "line": 539,
      "context": "return categoryMessages[Math.floor(Math.random() * categoryMessages.length)];"
    },
    {
      "name": "random",
      "file": "src/learningAnalytics.js",
      "line": 539,
      "context": "return categoryMessages[Math.floor(Math.random() * categoryMessages.length)];"
    },
    {
      "name": "saveAnalyticsData",
      "file": "src/learningAnalytics.js",
      "line": 545,
      "context": "saveAnalyticsData() {"
    },
    {
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 551,
      "context": "lastUpdated: Date.now()"
    },
    {
      "name": "setItem",
      "file": "src/learningAnalytics.js",
      "line": 554,
      "context": "localStorage.setItem('lobeLabyrinth_analytics', JSON.stringify(dataToSave));"
    },
    {
      "name": "stringify",
      "file": "src/learningAnalytics.js",
      "line": 554,
      "context": "localStorage.setItem('lobeLabyrinth_analytics', JSON.stringify(dataToSave));"
    },
    {
      "name": "log",
      "file": "src/learningAnalytics.js",
      "line": 555,
      "context": "console.log('📊 Learning analytics data saved');"
    },
    {
      "name": "error",
      "file": "src/learningAnalytics.js",
      "line": 557,
      "context": "console.error('Failed to save learning analytics data:', error);"
    },
    {
      "name": "endSession",
      "file": "src/learningAnalytics.js",
      "line": 564,
      "context": "endSession() {"
    },
    {
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 568,
      "context": "endTime: Date.now(),"
    },
    {
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 569,
      "context": "duration: Date.now() - this.sessionData.startTime,"
    },
    {
      "name": "getSessionStatistics",
      "file": "src/learningAnalytics.js",
      "line": 572,
      "context": "finalStats: this.getSessionStatistics()"
    },
    {
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 575,
      "context": "this.historicalData.push(sessionSummary);"
    },
    {
      "name": "saveAnalyticsData",
      "file": "src/learningAnalytics.js",
      "line": 576,
      "context": "this.saveAnalyticsData();"
    },
    {
      "name": "log",
      "file": "src/learningAnalytics.js",
      "line": 578,
      "context": "console.log('📋 Session ended and archived:', this.sessionData.sessionId);"
    },
    {
      "name": "getAnalyticsSummary",
      "file": "src/learningAnalytics.js",
      "line": 586,
      "context": "getAnalyticsSummary() {"
    },
    {
      "name": "getSessionStatistics",
      "file": "src/learningAnalytics.js",
      "line": 588,
      "context": "sessionStats: this.getSessionStatistics(),"
    },
    {
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 594,
      "context": "sessionDuration: Date.now() - this.sessionData.startTime"
    },
    {
      "name": "constructor",
      "file": "src/performanceManager.js",
      "line": 7,
      "context": "constructor() {"
    },
    {
      "name": "Map",
      "file": "src/performanceManager.js",
      "line": 8,
      "context": "this.objectPools = new Map();"
    },
    {
      "name": "Map",
      "file": "src/performanceManager.js",
      "line": 20,
      "context": "this.questionCache = new Map();"
    },
    {
      "name": "Map",
      "file": "src/performanceManager.js",
      "line": 21,
      "context": "this.loadingPromises = new Map();"
    },
    {
      "name": "now",
      "file": "src/performanceManager.js",
      "line": 25,
      "context": "this.lastFrameTime = performance.now();"
    },
    {
      "name": "log",
      "file": "src/performanceManager.js",
      "line": 28,
      "context": "console.log('🚀 PerformanceManager initialized');"
    },
    {
      "name": "startPerformanceMonitoring",
      "file": "src/performanceManager.js",
      "line": 29,
      "context": "this.startPerformanceMonitoring();"
    },
    {
      "name": "createPool",
      "file": "src/performanceManager.js",
      "line": 44,
      "context": "createPool(poolName, factory, initialSize = 10) {"
    },
    {
      "name": "has",
      "file": "src/performanceManager.js",
      "line": 45,
      "context": "if (this.objectPools.has(poolName)) {"
    },
    {
      "name": "get",
      "file": "src/performanceManager.js",
      "line": 46,
      "context": "return this.objectPools.get(poolName);"
    },
    {
      "name": "Set",
      "file": "src/performanceManager.js",
      "line": 51,
      "context": "inUse: new Set(),"
    },
    {
      "name": "push",
      "file": "src/performanceManager.js",
      "line": 60,
      "context": "pool.available.push(factory());"
    },
    {
      "name": "factory",
      "file": "src/performanceManager.js",
      "line": 60,
      "context": "pool.available.push(factory());"
    },
    {
      "name": "set",
      "file": "src/performanceManager.js",
      "line": 64,
      "context": "this.objectPools.set(poolName, pool);"
    },
    {
      "name": "log",
      "file": "src/performanceManager.js",
      "line": 65,
      "context": "console.log(`📦 Created object pool '${poolName}' with ${initialSize} objects`);"
    },
    {
      "name": "acquireFromPool",
      "file": "src/performanceManager.js",
      "line": 74,
      "context": "acquireFromPool(poolName) {"
    },
    {
      "name": "get",
      "file": "src/performanceManager.js",
      "line": 75,
      "context": "const pool = this.objectPools.get(poolName);"
    },
    {
      "name": "Error",
      "file": "src/performanceManager.js",
      "line": 77,
      "context": "throw new Error(`Pool '${poolName}' does not exist`);"
    },
    {
      "name": "pop",
      "file": "src/performanceManager.js",
      "line": 82,
      "context": "obj = pool.available.pop();"
    },
    {
      "name": "factory",
      "file": "src/performanceManager.js",
      "line": 86,
      "context": "obj = pool.factory();"
    },
    {
      "name": "add",
      "file": "src/performanceManager.js",
      "line": 92,
      "context": "pool.inUse.add(obj);"
    },
    {
      "name": "releaseToPool",
      "file": "src/performanceManager.js",
      "line": 101,
      "context": "releaseToPool(poolName, obj) {"
    },
    {
      "name": "get",
      "file": "src/performanceManager.js",
      "line": 102,
      "context": "const pool = this.objectPools.get(poolName);"
    },
    {
      "name": "has",
      "file": "src/performanceManager.js",
      "line": 103,
      "context": "if (!pool || !pool.inUse.has(obj)) {"
    },
    {
      "name": "delete",
      "file": "src/performanceManager.js",
      "line": 107,
      "context": "pool.inUse.delete(obj);"
    },
    {
      "name": "reset",
      "file": "src/performanceManager.js",
      "line": 111,
      "context": "obj.reset();"
    },
    {
      "name": "push",
      "file": "src/performanceManager.js",
      "line": 114,
      "context": "pool.available.push(obj);"
    },
    {
      "name": "getPoolStats",
      "file": "src/performanceManager.js",
      "line": 123,
      "context": "getPoolStats(poolName) {"
    },
    {
      "name": "get",
      "file": "src/performanceManager.js",
      "line": 124,
      "context": "const pool = this.objectPools.get(poolName);"
    },
    {
      "name": "lazyLoadQuestions",
      "file": "src/performanceManager.js",
      "line": 149,
      "context": "async lazyLoadQuestions(category, allQuestions) {"
    },
    {
      "name": "has",
      "file": "src/performanceManager.js",
      "line": 151,
      "context": "if (this.questionCache.has(category)) {"
    },
    {
      "name": "get",
      "file": "src/performanceManager.js",
      "line": 152,
      "context": "return this.questionCache.get(category);"
    },
    {
      "name": "has",
      "file": "src/performanceManager.js",
      "line": 156,
      "context": "if (this.loadingPromises.has(category)) {"
    },
    {
      "name": "get",
      "file": "src/performanceManager.js",
      "line": 157,
      "context": "return this.loadingPromises.get(category);"
    },
    {
      "name": "Promise",
      "file": "src/performanceManager.js",
      "line": 161,
      "context": "const loadPromise = new Promise((resolve) => {"
    },
    {
      "name": "requestIdleCallback",
      "file": "src/performanceManager.js",
      "line": 163,
      "context": "requestIdleCallback(() => {"
    },
    {
      "name": "filter",
      "file": "src/performanceManager.js",
      "line": 164,
      "context": "const filteredQuestions = allQuestions.filter(q =>"
    },
    {
      "name": "set",
      "file": "src/performanceManager.js",
      "line": 168,
      "context": "this.questionCache.set(category, filteredQuestions);"
    },
    {
      "name": "delete",
      "file": "src/performanceManager.js",
      "line": 169,
      "context": "this.loadingPromises.delete(category);"
    },
    {
      "name": "log",
      "file": "src/performanceManager.js",
      "line": 171,
      "context": "console.log(`📚 Lazy loaded ${filteredQuestions.length} questions for category: ${category}`);"
    },
    {
      "name": "resolve",
      "file": "src/performanceManager.js",
      "line": 172,
      "context": "resolve(filteredQuestions);"
    },
    {
      "name": "set",
      "file": "src/performanceManager.js",
      "line": 176,
      "context": "this.loadingPromises.set(category, loadPromise);"
    },
    {
      "name": "clear",
      "file": "src/performanceManager.js",
      "line": 182,
      "context": "* @param {string} category - Category to clear (optional)"
    },
    {
      "name": "clearQuestionCache",
      "file": "src/performanceManager.js",
      "line": 184,
      "context": "clearQuestionCache(category = null) {"
    },
    {
      "name": "delete",
      "file": "src/performanceManager.js",
      "line": 186,
      "context": "this.questionCache.delete(category);"
    },
    {
      "name": "log",
      "file": "src/performanceManager.js",
      "line": 187,
      "context": "console.log(`🗑️ Cleared question cache for category: ${category}`);"
    },
    {
      "name": "clear",
      "file": "src/performanceManager.js",
      "line": 189,
      "context": "this.questionCache.clear();"
    },
    {
      "name": "log",
      "file": "src/performanceManager.js",
      "line": 190,
      "context": "console.log('🗑️ Cleared all question caches');"
    },
    {
      "name": "level",
      "file": "src/performanceManager.js",
      "line": 202,
      "context": "* @param {number} priority - Priority level (1-3, 1 = highest)"
    },
    {
      "name": "batchDOMUpdate",
      "file": "src/performanceManager.js",
      "line": 204,
      "context": "batchDOMUpdate(updateFunction, priority = 2) {"
    },
    {
      "name": "push",
      "file": "src/performanceManager.js",
      "line": 205,
      "context": "this.domBatchQueue.push({"
    },
    {
      "name": "now",
      "file": "src/performanceManager.js",
      "line": 208,
      "context": "timestamp: performance.now()"
    },
    {
      "name": "scheduleBatch",
      "file": "src/performanceManager.js",
      "line": 212,
      "context": "this.scheduleBatch();"
    },
    {
      "name": "scheduleBatch",
      "file": "src/performanceManager.js",
      "line": 220,
      "context": "scheduleBatch() {"
    },
    {
      "name": "executeBatch",
      "file": "src/performanceManager.js",
      "line": 223,
      "context": "this.executeBatch();"
    },
    {
      "name": "executeBatch",
      "file": "src/performanceManager.js",
      "line": 231,
      "context": "executeBatch() {"
    },
    {
      "name": "sort",
      "file": "src/performanceManager.js",
      "line": 238,
      "context": "this.domBatchQueue.sort((a, b) => a.priority - b.priority);"
    },
    {
      "name": "now",
      "file": "src/performanceManager.js",
      "line": 240,
      "context": "const batchStartTime = performance.now();"
    },
    {
      "name": "shift",
      "file": "src/performanceManager.js",
      "line": 245,
      "context": "const { update } = this.domBatchQueue.shift();"
    },
    {
      "name": "update",
      "file": "src/performanceManager.js",
      "line": 248,
      "context": "update();"
    },
    {
      "name": "error",
      "file": "src/performanceManager.js",
      "line": 251,
      "context": "console.error('🚨 Error in batched DOM update:', error);"
    },
    {
      "name": "now",
      "file": "src/performanceManager.js",
      "line": 255,
      "context": "if (performance.now() - batchStartTime > 8) { // 8ms budget"
    },
    {
      "name": "scheduleBatch",
      "file": "src/performanceManager.js",
      "line": 265,
      "context": "this.scheduleBatch();"
    },
    {
      "name": "log",
      "file": "src/performanceManager.js",
      "line": 268,
      "context": "console.log(`⚡ Executed ${updatesExecuted} DOM updates in ${Math.round(performance.now() - batchStartTime)}ms`);"
    },
    {
      "name": "round",
      "file": "src/performanceManager.js",
      "line": 268,
      "context": "console.log(`⚡ Executed ${updatesExecuted} DOM updates in ${Math.round(performance.now() - batchStartTime)}ms`);"
    },
    {
      "name": "now",
      "file": "src/performanceManager.js",
      "line": 268,
      "context": "console.log(`⚡ Executed ${updatesExecuted} DOM updates in ${Math.round(performance.now() - batchStartTime)}ms`);"
    },
    {
      "name": "createDOMUpdate",
      "file": "src/performanceManager.js",
      "line": 277,
      "context": "createDOMUpdate(element, properties) {"
    },
    {
      "name": "return",
      "file": "src/performanceManager.js",
      "line": 278,
      "context": "return () => {"
    },
    {
      "name": "entries",
      "file": "src/performanceManager.js",
      "line": 279,
      "context": "for (const [prop, value] of Object.entries(properties)) {"
    },
    {
      "name": "startsWith",
      "file": "src/performanceManager.js",
      "line": 286,
      "context": "} else if (prop.startsWith('data-')) {"
    },
    {
      "name": "setAttribute",
      "file": "src/performanceManager.js",
      "line": 287,
      "context": "element.setAttribute(prop, value);"
    },
    {
      "name": "assign",
      "file": "src/performanceManager.js",
      "line": 289,
      "context": "Object.assign(element.style, value);"
    },
    {
      "name": "startPerformanceMonitoring",
      "file": "src/performanceManager.js",
      "line": 305,
      "context": "startPerformanceMonitoring() {"
    },
    {
      "name": "monitorFrameRate",
      "file": "src/performanceManager.js",
      "line": 309,
      "context": "this.monitorFrameRate();"
    },
    {
      "name": "monitorMemoryUsage",
      "file": "src/performanceManager.js",
      "line": 310,
      "context": "this.monitorMemoryUsage();"
    },
    {
      "name": "log",
      "file": "src/performanceManager.js",
      "line": 312,
      "context": "console.log('📊 Performance monitoring started');"
    },
    {
      "name": "stopPerformanceMonitoring",
      "file": "src/performanceManager.js",
      "line": 318,
      "context": "stopPerformanceMonitoring() {"
    },
    {
      "name": "log",
      "file": "src/performanceManager.js",
      "line": 320,
      "context": "console.log('📊 Performance monitoring stopped');"
    },
    {
      "name": "monitorFrameRate",
      "file": "src/performanceManager.js",
      "line": 327,
      "context": "monitorFrameRate() {"
    },
    {
      "name": "push",
      "file": "src/performanceManager.js",
      "line": 334,
      "context": "this.frameRateHistory.push(fps);"
    },
    {
      "name": "shift",
      "file": "src/performanceManager.js",
      "line": 338,
      "context": "this.frameRateHistory.shift();"
    },
    {
      "name": "reduce",
      "file": "src/performanceManager.js",
      "line": 342,
      "context": "this.metrics.frameRate = this.frameRateHistory.reduce((a, b) => a + b, 0) / this.frameRateHistory.length;"
    },
    {
      "name": "usage",
      "file": "src/performanceManager.js",
      "line": 355,
      "context": "* Monitor memory usage (if available)"
    },
    {
      "name": "monitorMemoryUsage",
      "file": "src/performanceManager.js",
      "line": 358,
      "context": "monitorMemoryUsage() {"
    },
    {
      "name": "updateMemory",
      "file": "src/performanceManager.js",
      "line": 371,
      "context": "updateMemory();"
    },
    {
      "name": "getMetrics",
      "file": "src/performanceManager.js",
      "line": 378,
      "context": "getMetrics() {"
    },
    {
      "name": "round",
      "file": "src/performanceManager.js",
      "line": 381,
      "context": "frameRate: Math.round(this.metrics.frameRate * 100) / 100,"
    },
    {
      "name": "round",
      "file": "src/performanceManager.js",
      "line": 382,
      "context": "memoryUsage: Math.round(this.metrics.memoryUsage * 100) / 100,"
    },
    {
      "name": "from",
      "file": "src/performanceManager.js",
      "line": 383,
      "context": "poolStats: Array.from(this.objectPools.keys()).map(name => this.getPoolStats(name)),"
    },
    {
      "name": "keys",
      "file": "src/performanceManager.js",
      "line": 383,
      "context": "poolStats: Array.from(this.objectPools.keys()).map(name => this.getPoolStats(name)),"
    },
    {
      "name": "map",
      "file": "src/performanceManager.js",
      "line": 383,
      "context": "poolStats: Array.from(this.objectPools.keys()).map(name => this.getPoolStats(name)),"
    },
    {
      "name": "getPoolStats",
      "file": "src/performanceManager.js",
      "line": 383,
      "context": "poolStats: Array.from(this.objectPools.keys()).map(name => this.getPoolStats(name)),"
    },
    {
      "name": "debounce",
      "file": "src/performanceManager.js",
      "line": 399,
      "context": "debounce(func, wait) {"
    },
    {
      "name": "executedFunction",
      "file": "src/performanceManager.js",
      "line": 401,
      "context": "return function executedFunction(...args) {"
    },
    {
      "name": "clearTimeout",
      "file": "src/performanceManager.js",
      "line": 403,
      "context": "clearTimeout(timeout);"
    },
    {
      "name": "func",
      "file": "src/performanceManager.js",
      "line": 404,
      "context": "func(...args);"
    },
    {
      "name": "clearTimeout",
      "file": "src/performanceManager.js",
      "line": 406,
      "context": "clearTimeout(timeout);"
    },
    {
      "name": "throttle",
      "file": "src/performanceManager.js",
      "line": 417,
      "context": "throttle(func, limit) {"
    },
    {
      "name": "executedFunction",
      "file": "src/performanceManager.js",
      "line": 419,
      "context": "return function executedFunction(...args) {"
    },
    {
      "name": "apply",
      "file": "src/performanceManager.js",
      "line": 421,
      "context": "func.apply(this, args);"
    },
    {
      "name": "prefersReducedMotion",
      "file": "src/performanceManager.js",
      "line": 432,
      "context": "prefersReducedMotion() {"
    },
    {
      "name": "matchMedia",
      "file": "src/performanceManager.js",
      "line": 433,
      "context": "return window.matchMedia('(prefers-reduced-motion: reduce)').matches;"
    },
    {
      "name": "cleanup",
      "file": "src/performanceManager.js",
      "line": 443,
      "context": "cleanup() {"
    },
    {
      "name": "stopPerformanceMonitoring",
      "file": "src/performanceManager.js",
      "line": 444,
      "context": "this.stopPerformanceMonitoring();"
    },
    {
      "name": "clearQuestionCache",
      "file": "src/performanceManager.js",
      "line": 445,
      "context": "this.clearQuestionCache();"
    },
    {
      "name": "clear",
      "file": "src/performanceManager.js",
      "line": 448,
      "context": "this.objectPools.clear();"
    },
    {
      "name": "log",
      "file": "src/performanceManager.js",
      "line": 454,
      "context": "console.log('🧹 PerformanceManager cleanup completed');"
    },
    {
      "name": "getRecommendations",
      "file": "src/performanceManager.js",
      "line": 461,
      "context": "getRecommendations() {"
    },
    {
      "name": "getMetrics",
      "file": "src/performanceManager.js",
      "line": 463,
      "context": "const metrics = this.getMetrics();"
    },
    {
      "name": "push",
      "file": "src/performanceManager.js",
      "line": 466,
      "context": "recommendations.push('Frame rate is low. Consider reducing visual effects or DOM updates.');"
    },
    {
      "name": "push",
      "file": "src/performanceManager.js",
      "line": 470,
      "context": "recommendations.push('Memory usage is high. Consider clearing caches or reducing object creation.');"
    },
    {
      "name": "push",
      "file": "src/performanceManager.js",
      "line": 474,
      "context": "recommendations.push('Object pool miss rate is high. Consider increasing pool sizes.');"
    },
    {
      "name": "push",
      "file": "src/performanceManager.js",
      "line": 478,
      "context": "recommendations.push('DOM update queue is large. Consider batching updates more aggressively.');"
    },
    {
      "name": "push",
      "file": "src/performanceManager.js",
      "line": 482,
      "context": "recommendations.push('Performance metrics look good! 🎉');"
    },
    {
      "name": "constructor",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 6,
      "context": "constructor(performanceManager) {"
    },
    {
      "name": "createDashboard",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 21,
      "context": "this.createDashboard();"
    },
    {
      "name": "setupKeyboardShortcuts",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 22,
      "context": "this.setupKeyboardShortcuts();"
    },
    {
      "name": "log",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 24,
      "context": "console.log('📊 Performance Monitoring Dashboard initialized');"
    },
    {
      "name": "createDashboard",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 30,
      "context": "createDashboard() {"
    },
    {
      "name": "createElement",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 31,
      "context": "this.dashboardElement = document.createElement('div');"
    },
    {
      "name": "addDashboardStyles",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 92,
      "context": "this.addDashboardStyles();"
    },
    {
      "name": "setupDashboardEvents",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 95,
      "context": "this.setupDashboardEvents();"
    },
    {
      "name": "appendChild",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 97,
      "context": "document.body.appendChild(this.dashboardElement);"
    },
    {
      "name": "addDashboardStyles",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 103,
      "context": "addDashboardStyles() {"
    },
    {
      "name": "getElementById",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 104,
      "context": "if (document.getElementById('performance-dashboard-styles')) return;"
    },
    {
      "name": "createElement",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 106,
      "context": "const styles = document.createElement('style');"
    },
    {
      "name": "rgba",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 115,
      "context": "background: rgba(0, 0, 0, 0.95);"
    },
    {
      "name": "rgba",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 121,
      "context": "box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);"
    },
    {
      "name": "translateX",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 127,
      "context": "transform: translateX(100%);"
    },
    {
      "name": "rgba",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 138,
      "context": "background: rgba(255, 255, 255, 0.1);"
    },
    {
      "name": "rgba",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 162,
      "context": "background: rgba(255, 255, 255, 0.2);"
    },
    {
      "name": "rgba",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 177,
      "context": "background: rgba(255, 255, 255, 0.1);"
    },
    {
      "name": "rgba",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 204,
      "context": "background: rgba(255, 255, 255, 0.1);"
    },
    {
      "name": "gradient",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 214,
      "context": "background: linear-gradient(to top, #4CAF50, #81C784);"
    },
    {
      "name": "rgba",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 232,
      "context": "border-bottom: 1px solid rgba(255, 255, 255, 0.1);"
    },
    {
      "name": "rgba",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 250,
      "context": "border: 1px solid rgba(255, 255, 255, 0.3);"
    },
    {
      "name": "rgba",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 251,
      "context": "background: rgba(255, 255, 255, 0.1);"
    },
    {
      "name": "rgba",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 259,
      "context": "background: rgba(255, 255, 255, 0.2);"
    },
    {
      "name": "appendChild",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 275,
      "context": "document.head.appendChild(styles);"
    },
    {
      "name": "setupDashboardEvents",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 281,
      "context": "setupDashboardEvents() {"
    },
    {
      "name": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 282,
      "context": "const closeBtn = this.dashboardElement.querySelector('.dashboard-close');"
    },
    {
      "name": "addEventListener",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 283,
      "context": "closeBtn.addEventListener('click', () => this.hide());"
    },
    {
      "name": "hide",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 283,
      "context": "closeBtn.addEventListener('click', () => this.hide());"
    },
    {
      "name": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 285,
      "context": "const clearBtn = this.dashboardElement.querySelector('#clear-metrics');"
    },
    {
      "name": "addEventListener",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 286,
      "context": "clearBtn.addEventListener('click', () => this.clearMetrics());"
    },
    {
      "name": "clearMetrics",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 286,
      "context": "clearBtn.addEventListener('click', () => this.clearMetrics());"
    },
    {
      "name": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 288,
      "context": "const exportBtn = this.dashboardElement.querySelector('#export-metrics');"
    },
    {
      "name": "addEventListener",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 289,
      "context": "exportBtn.addEventListener('click', () => this.exportMetrics());"
    },
    {
      "name": "exportMetrics",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 289,
      "context": "exportBtn.addEventListener('click', () => this.exportMetrics());"
    },
    {
      "name": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 291,
      "context": "const autoOptimizeCheckbox = this.dashboardElement.querySelector('#auto-optimize');"
    },
    {
      "name": "addEventListener",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 292,
      "context": "autoOptimizeCheckbox.addEventListener('change', (e) => {"
    },
    {
      "name": "setupKeyboardShortcuts",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 300,
      "context": "setupKeyboardShortcuts() {"
    },
    {
      "name": "addEventListener",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 301,
      "context": "document.addEventListener('keydown', (e) => {"
    },
    {
      "name": "preventDefault",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 304,
      "context": "e.preventDefault();"
    },
    {
      "name": "toggle",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 305,
      "context": "this.toggle();"
    },
    {
      "name": "show",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 313,
      "context": "show() {"
    },
    {
      "name": "remove",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 315,
      "context": "this.dashboardElement.classList.remove('hidden');"
    },
    {
      "name": "startUpdating",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 316,
      "context": "this.startUpdating();"
    },
    {
      "name": "log",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 317,
      "context": "console.log('📊 Performance dashboard shown');"
    },
    {
      "name": "hide",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 323,
      "context": "hide() {"
    },
    {
      "name": "add",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 325,
      "context": "this.dashboardElement.classList.add('hidden');"
    },
    {
      "name": "stopUpdating",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 326,
      "context": "this.stopUpdating();"
    },
    {
      "name": "log",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 327,
      "context": "console.log('📊 Performance dashboard hidden');"
    },
    {
      "name": "toggle",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 333,
      "context": "toggle() {"
    },
    {
      "name": "hide",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 335,
      "context": "this.hide();"
    },
    {
      "name": "show",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 337,
      "context": "this.show();"
    },
    {
      "name": "startUpdating",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 344,
      "context": "startUpdating() {"
    },
    {
      "name": "updateMetrics",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 348,
      "context": "this.updateMetrics();"
    },
    {
      "name": "stopUpdating",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 355,
      "context": "stopUpdating() {"
    },
    {
      "name": "clearInterval",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 357,
      "context": "clearInterval(this.updateInterval);"
    },
    {
      "name": "updateMetrics",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 365,
      "context": "updateMetrics() {"
    },
    {
      "name": "getMetrics",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 366,
      "context": "const metrics = this.performanceManager.getMetrics();"
    },
    {
      "name": "addToHistory",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 369,
      "context": "this.addToHistory('frameRate', metrics.frameRate);"
    },
    {
      "name": "addToHistory",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 370,
      "context": "this.addToHistory('memoryUsage', metrics.memoryUsage);"
    },
    {
      "name": "addToHistory",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 371,
      "context": "this.addToHistory('domUpdates', metrics.domUpdates);"
    },
    {
      "name": "addToHistory",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 372,
      "context": "this.addToHistory('poolHits', metrics.poolHits);"
    },
    {
      "name": "addToHistory",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 373,
      "context": "this.addToHistory('poolMisses', metrics.poolMisses);"
    },
    {
      "name": "updateFrameRateDisplay",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 376,
      "context": "this.updateFrameRateDisplay(metrics.frameRate);"
    },
    {
      "name": "updateMemoryDisplay",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 377,
      "context": "this.updateMemoryDisplay(metrics.memoryUsage);"
    },
    {
      "name": "updateDOMDisplay",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 378,
      "context": "this.updateDOMDisplay(metrics.domUpdates);"
    },
    {
      "name": "updatePoolDisplay",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 379,
      "context": "this.updatePoolDisplay(metrics);"
    },
    {
      "name": "updatePoolStats",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 380,
      "context": "this.updatePoolStats(metrics.poolStats);"
    },
    {
      "name": "updateRecommendations",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 381,
      "context": "this.updateRecommendations();"
    },
    {
      "name": "performAutoOptimizations",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 385,
      "context": "this.performAutoOptimizations(metrics);"
    },
    {
      "name": "addToHistory",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 392,
      "context": "addToHistory(metric, value) {"
    },
    {
      "name": "push",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 393,
      "context": "this.metricsHistory[metric].push(value);"
    },
    {
      "name": "shift",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 396,
      "context": "this.metricsHistory[metric].shift();"
    },
    {
      "name": "updateFrameRateDisplay",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 403,
      "context": "updateFrameRateDisplay(fps) {"
    },
    {
      "name": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 404,
      "context": "const valueElement = this.dashboardElement.querySelector('#fps-value');"
    },
    {
      "name": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 405,
      "context": "const chartElement = this.dashboardElement.querySelector('#fps-chart');"
    },
    {
      "name": "toFixed",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 407,
      "context": "valueElement.textContent = fps.toFixed(1);"
    },
    {
      "name": "updateChart",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 418,
      "context": "this.updateChart(chartElement, this.metricsHistory.frameRate, 60);"
    },
    {
      "name": "updateMemoryDisplay",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 424,
      "context": "updateMemoryDisplay(memory) {"
    },
    {
      "name": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 425,
      "context": "const valueElement = this.dashboardElement.querySelector('#memory-value');"
    },
    {
      "name": "toFixed",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 427,
      "context": "valueElement.textContent = memory.toFixed(1);"
    },
    {
      "name": "updateDOMDisplay",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 442,
      "context": "updateDOMDisplay(domUpdates) {"
    },
    {
      "name": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 443,
      "context": "const valueElement = this.dashboardElement.querySelector('#dom-value');"
    },
    {
      "name": "updatePoolDisplay",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 450,
      "context": "updatePoolDisplay(metrics) {"
    },
    {
      "name": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 451,
      "context": "const valueElement = this.dashboardElement.querySelector('#pool-value');"
    },
    {
      "name": "toFixed",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 455,
      "context": "valueElement.textContent = hitRate.toFixed(1);"
    },
    {
      "name": "updatePoolStats",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 469,
      "context": "updatePoolStats(poolStats) {"
    },
    {
      "name": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 470,
      "context": "const container = this.dashboardElement.querySelector('#pool-stats-content');"
    },
    {
      "name": "map",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 477,
      "context": "container.innerHTML = poolStats.map(pool => `"
    },
    {
      "name": "toFixed",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 480,
      "context": "<span>${pool.hitRate.toFixed(1)}% (${pool.hits}/${pool.hits + pool.misses})</span>"
    },
    {
      "name": "join",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 482,
      "context": "`).join('');"
    },
    {
      "name": "updateRecommendations",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 488,
      "context": "updateRecommendations() {"
    },
    {
      "name": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 489,
      "context": "const container = this.dashboardElement.querySelector('#recommendations-content');"
    },
    {
      "name": "getRecommendations",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 490,
      "context": "const recommendations = this.performanceManager.getRecommendations();"
    },
    {
      "name": "map",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 492,
      "context": "container.innerHTML = recommendations.map(rec => `"
    },
    {
      "name": "join",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 494,
      "context": "`).join('');"
    },
    {
      "name": "updateChart",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 500,
      "context": "updateChart(chartElement, data, maxValue) {"
    },
    {
      "name": "max",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 506,
      "context": "const barWidth = Math.max(1, width / this.maxHistoryLength);"
    },
    {
      "name": "forEach",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 508,
      "context": "data.forEach((value, index) => {"
    },
    {
      "name": "createElement",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 509,
      "context": "const bar = document.createElement('div');"
    },
    {
      "name": "appendChild",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 515,
      "context": "chartElement.appendChild(bar);"
    },
    {
      "name": "performAutoOptimizations",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 522,
      "context": "performAutoOptimizations(metrics) {"
    },
    {
      "name": "clearQuestionCache",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 525,
      "context": "this.performanceManager.clearQuestionCache();"
    },
    {
      "name": "log",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 526,
      "context": "console.log('🧹 Auto-optimization: Cleared question cache due to high memory usage');"
    },
    {
      "name": "log",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 535,
      "context": "console.log('⚡ Auto-optimization: Low pool hit rate detected');"
    },
    {
      "name": "clearMetrics",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 542,
      "context": "clearMetrics() {"
    },
    {
      "name": "keys",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 543,
      "context": "for (const key of Object.keys(this.metricsHistory)) {"
    },
    {
      "name": "log",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 556,
      "context": "console.log('🧹 Metrics cleared');"
    },
    {
      "name": "exportMetrics",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 562,
      "context": "exportMetrics() {"
    },
    {
      "name": "toISOString",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 564,
      "context": "timestamp: new Date().toISOString(),"
    },
    {
      "name": "getMetrics",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 566,
      "context": "currentMetrics: this.performanceManager.getMetrics(),"
    },
    {
      "name": "getRecommendations",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 567,
      "context": "recommendations: this.performanceManager.getRecommendations()"
    },
    {
      "name": "stringify",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 570,
      "context": "const dataStr = JSON.stringify(exportData, null, 2);"
    },
    {
      "name": "Blob",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 571,
      "context": "const dataBlob = new Blob([dataStr], { type: 'application/json' });"
    },
    {
      "name": "createElement",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 573,
      "context": "const link = document.createElement('a');"
    },
    {
      "name": "createObjectURL",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 574,
      "context": "link.href = URL.createObjectURL(dataBlob);"
    },
    {
      "name": "now",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 575,
      "context": "link.download = `performance-metrics-${Date.now()}.json`;"
    },
    {
      "name": "click",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 576,
      "context": "link.click();"
    },
    {
      "name": "log",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 578,
      "context": "console.log('📊 Metrics exported');"
    },
    {
      "name": "cleanup",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 584,
      "context": "cleanup() {"
    },
    {
      "name": "stopUpdating",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 585,
      "context": "this.stopUpdating();"
    },
    {
      "name": "removeChild",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 588,
      "context": "this.dashboardElement.parentNode.removeChild(this.dashboardElement);"
    },
    {
      "name": "getElementById",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 591,
      "context": "const styles = document.getElementById('performance-dashboard-styles');"
    },
    {
      "name": "removeChild",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 593,
      "context": "styles.parentNode.removeChild(styles);"
    },
    {
      "name": "log",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 596,
      "context": "console.log('🧹 Performance dashboard cleanup completed');"
    },
    {
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 14,
      "context": "const button = document.createElement('button');"
    },
    {
      "name": "setAttribute",
      "file": "src/uiOptimizations.js",
      "line": 17,
      "context": "button.setAttribute('tabindex', '0');"
    },
    {
      "name": "setAttribute",
      "file": "src/uiOptimizations.js",
      "line": 18,
      "context": "button.setAttribute('role', 'button');"
    },
    {
      "name": "removeAttribute",
      "file": "src/uiOptimizations.js",
      "line": 26,
      "context": "this.removeAttribute('data-answer-index');"
    },
    {
      "name": "removeAttribute",
      "file": "src/uiOptimizations.js",
      "line": 27,
      "context": "this.removeAttribute('aria-label');"
    },
    {
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 37,
      "context": "const toast = document.createElement('div');"
    },
    {
      "name": "setAttribute",
      "file": "src/uiOptimizations.js",
      "line": 39,
      "context": "toast.setAttribute('role', 'alert');"
    },
    {
      "name": "setAttribute",
      "file": "src/uiOptimizations.js",
      "line": 40,
      "context": "toast.setAttribute('aria-live', 'polite');"
    },
    {
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 43,
      "context": "const icon = document.createElement('span');"
    },
    {
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 46,
      "context": "const content = document.createElement('div');"
    },
    {
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 49,
      "context": "const title = document.createElement('div');"
    },
    {
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 52,
      "context": "const message = document.createElement('div');"
    },
    {
      "name": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 55,
      "context": "content.appendChild(title);"
    },
    {
      "name": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 56,
      "context": "content.appendChild(message);"
    },
    {
      "name": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 57,
      "context": "toast.appendChild(icon);"
    },
    {
      "name": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 58,
      "context": "toast.appendChild(content);"
    },
    {
      "name": "removeAttribute",
      "file": "src/uiOptimizations.js",
      "line": 67,
      "context": "this.removeAttribute('data-type');"
    },
    {
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 77,
      "context": "const connection = document.createElement('div');"
    },
    {
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 80,
      "context": "const link = document.createElement('button');"
    },
    {
      "name": "setAttribute",
      "file": "src/uiOptimizations.js",
      "line": 83,
      "context": "link.setAttribute('tabindex', '0');"
    },
    {
      "name": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 85,
      "context": "connection.appendChild(link);"
    },
    {
      "name": "removeAttribute",
      "file": "src/uiOptimizations.js",
      "line": 93,
      "context": "link.removeAttribute('data-room-id');"
    },
    {
      "name": "removeAttribute",
      "file": "src/uiOptimizations.js",
      "line": 94,
      "context": "link.removeAttribute('aria-label');"
    },
    {
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 104,
      "context": "const container = document.createElement('div');"
    },
    {
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 107,
      "context": "const bar = document.createElement('div');"
    },
    {
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 110,
      "context": "const fill = document.createElement('div');"
    },
    {
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 113,
      "context": "const label = document.createElement('span');"
    },
    {
      "name": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 116,
      "context": "bar.appendChild(fill);"
    },
    {
      "name": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 117,
      "context": "container.appendChild(bar);"
    },
    {
      "name": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 118,
      "context": "container.appendChild(label);"
    },
    {
      "name": "removeAttribute",
      "file": "src/uiOptimizations.js",
      "line": 125,
      "context": "this.removeAttribute('data-progress');"
    },
    {
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 135,
      "context": "const timer = document.createElement('div');"
    },
    {
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 138,
      "context": "const bar = document.createElement('div');"
    },
    {
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 141,
      "context": "const fill = document.createElement('div');"
    },
    {
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 144,
      "context": "const text = document.createElement('span');"
    },
    {
      "name": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 147,
      "context": "bar.appendChild(fill);"
    },
    {
      "name": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 148,
      "context": "timer.appendChild(bar);"
    },
    {
      "name": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 149,
      "context": "timer.appendChild(text);"
    },
    {
      "name": "return",
      "file": "src/uiOptimizations.js",
      "line": 172,
      "context": "return () => {"
    },
    {
      "name": "return",
      "file": "src/uiOptimizations.js",
      "line": 183,
      "context": "return () => {"
    },
    {
      "name": "return",
      "file": "src/uiOptimizations.js",
      "line": 194,
      "context": "return () => {"
    },
    {
      "name": "entries",
      "file": "src/uiOptimizations.js",
      "line": 195,
      "context": "for (const [property, value] of Object.entries(styles)) {"
    },
    {
      "name": "return",
      "file": "src/uiOptimizations.js",
      "line": 207,
      "context": "return () => {"
    },
    {
      "name": "entries",
      "file": "src/uiOptimizations.js",
      "line": 208,
      "context": "for (const [attr, value] of Object.entries(attributes)) {"
    },
    {
      "name": "getAttribute",
      "file": "src/uiOptimizations.js",
      "line": 209,
      "context": "if (element.getAttribute(attr) !== value) {"
    },
    {
      "name": "setAttribute",
      "file": "src/uiOptimizations.js",
      "line": 210,
      "context": "element.setAttribute(attr, value);"
    },
    {
      "name": "return",
      "file": "src/uiOptimizations.js",
      "line": 220,
      "context": "return () => {"
    },
    {
      "name": "querySelector",
      "file": "src/uiOptimizations.js",
      "line": 222,
      "context": "const fill = progressElement.querySelector('.progress-fill') ||"
    },
    {
      "name": "contains",
      "file": "src/uiOptimizations.js",
      "line": 223,
      "context": "progressElement.classList.contains('progress-fill') ? progressElement : null;"
    },
    {
      "name": "querySelector",
      "file": "src/uiOptimizations.js",
      "line": 224,
      "context": "const labelElement = progressElement.querySelector('.progress-percent') ||"
    },
    {
      "name": "querySelector",
      "file": "src/uiOptimizations.js",
      "line": 225,
      "context": "progressElement.querySelector('.progress-label') ||"
    },
    {
      "name": "querySelector",
      "file": "src/uiOptimizations.js",
      "line": 226,
      "context": "progressElement.parentElement?.querySelector('.progress-percent');"
    },
    {
      "name": "max",
      "file": "src/uiOptimizations.js",
      "line": 229,
      "context": "fill.style.width = `${Math.max(0, Math.min(100, percentage))}%`;"
    },
    {
      "name": "min",
      "file": "src/uiOptimizations.js",
      "line": 229,
      "context": "fill.style.width = `${Math.max(0, Math.min(100, percentage))}%`;"
    },
    {
      "name": "setAttribute",
      "file": "src/uiOptimizations.js",
      "line": 234,
      "context": "progressElement.setAttribute('data-progress', percentage);"
    },
    {
      "name": "return",
      "file": "src/uiOptimizations.js",
      "line": 242,
      "context": "return () => {"
    },
    {
      "name": "getElementById",
      "file": "src/uiOptimizations.js",
      "line": 243,
      "context": "const fill = document.getElementById('timer-bar');"
    },
    {
      "name": "getElementById",
      "file": "src/uiOptimizations.js",
      "line": 244,
      "context": "const text = document.getElementById('timer-text') || timerElement;"
    },
    {
      "name": "warn",
      "file": "src/uiOptimizations.js",
      "line": 247,
      "context": "console.warn('UI Optimizations: Timer bar element not found');"
    },
    {
      "name": "warn",
      "file": "src/uiOptimizations.js",
      "line": 250,
      "context": "console.warn('UI Optimizations: Timer text element not found');"
    },
    {
      "name": "max",
      "file": "src/uiOptimizations.js",
      "line": 256,
      "context": "fill.style.width = `${Math.max(0, percentage)}%`;"
    },
    {
      "name": "ceil",
      "file": "src/uiOptimizations.js",
      "line": 269,
      "context": "text.textContent = `${Math.ceil(timeRemaining)}s`;"
    },
    {
      "name": "IntersectionObserver",
      "file": "src/uiOptimizations.js",
      "line": 289,
      "context": "return new IntersectionObserver(callback, { ...defaultOptions, ...options });"
    },
    {
      "name": "addEventListener",
      "file": "src/uiOptimizations.js",
      "line": 296,
      "context": "container.addEventListener(eventType, (event) => {"
    },
    {
      "name": "closest",
      "file": "src/uiOptimizations.js",
      "line": 297,
      "context": "const target = event.target.closest(selector);"
    },
    {
      "name": "handler",
      "file": "src/uiOptimizations.js",
      "line": 299,
      "context": "handler(event, target);"
    },
    {
      "name": "ResizeObserver",
      "file": "src/uiOptimizations.js",
      "line": 309,
      "context": "return new ResizeObserver(callback);"
    },
    {
      "name": "clearTimeout",
      "file": "src/uiOptimizations.js",
      "line": 315,
      "context": "clearTimeout(resizeTimeout);"
    },
    {
      "name": "addEventListener",
      "file": "src/uiOptimizations.js",
      "line": 319,
      "context": "window.addEventListener('resize', fallbackHandler);"
    },
    {
      "name": "removeEventListener",
      "file": "src/uiOptimizations.js",
      "line": 323,
      "context": "disconnect: () => window.removeEventListener('resize', fallbackHandler)"
    },
    {
      "name": "updateFunction",
      "file": "src/uiOptimizations.js",
      "line": 337,
      "context": "updateFunction(currentTime - lastTime);"
    },
    {
      "name": "Map",
      "file": "src/uiOptimizations.js",
      "line": 362,
      "context": "const listeners = new Map();"
    },
    {
      "name": "has",
      "file": "src/uiOptimizations.js",
      "line": 367,
      "context": "if (!listeners.has(key)) {"
    },
    {
      "name": "set",
      "file": "src/uiOptimizations.js",
      "line": 368,
      "context": "listeners.set(key, []);"
    },
    {
      "name": "get",
      "file": "src/uiOptimizations.js",
      "line": 370,
      "context": "listeners.get(key).push({ handler, options });"
    },
    {
      "name": "push",
      "file": "src/uiOptimizations.js",
      "line": 370,
      "context": "listeners.get(key).push({ handler, options });"
    },
    {
      "name": "addEventListener",
      "file": "src/uiOptimizations.js",
      "line": 371,
      "context": "element.addEventListener(eventType, handler, options);"
    },
    {
      "name": "get",
      "file": "src/uiOptimizations.js",
      "line": 376,
      "context": "const elementListeners = listeners.get(key);"
    },
    {
      "name": "findIndex",
      "file": "src/uiOptimizations.js",
      "line": 378,
      "context": "const index = elementListeners.findIndex(l => l.handler === handler);"
    },
    {
      "name": "splice",
      "file": "src/uiOptimizations.js",
      "line": 380,
      "context": "elementListeners.splice(index, 1);"
    },
    {
      "name": "removeEventListener",
      "file": "src/uiOptimizations.js",
      "line": 381,
      "context": "element.removeEventListener(eventType, handler);"
    },
    {
      "name": "entries",
      "file": "src/uiOptimizations.js",
      "line": 387,
      "context": "for (const [key, elementListeners] of listeners.entries()) {"
    },
    {
      "name": "startsWith",
      "file": "src/uiOptimizations.js",
      "line": 388,
      "context": "if (key.startsWith(element.toString())) {"
    },
    {
      "name": "toString",
      "file": "src/uiOptimizations.js",
      "line": 388,
      "context": "if (key.startsWith(element.toString())) {"
    },
    {
      "name": "forEach",
      "file": "src/uiOptimizations.js",
      "line": 389,
      "context": "elementListeners.forEach(({ handler }) => {"
    },
    {
      "name": "split",
      "file": "src/uiOptimizations.js",
      "line": 390,
      "context": "const eventType = key.split(':')[1];"
    },
    {
      "name": "removeEventListener",
      "file": "src/uiOptimizations.js",
      "line": 391,
      "context": "element.removeEventListener(eventType, handler);"
    },
    {
      "name": "delete",
      "file": "src/uiOptimizations.js",
      "line": 393,
      "context": "listeners.delete(key);"
    },
    {
      "name": "clear",
      "file": "src/uiOptimizations.js",
      "line": 399,
      "context": "listeners.clear();"
    }
  ],
  "methodCalls": [
    {
      "object": "this",
      "method": "_performLoad",
      "file": "src/dataLoader.js",
      "line": 24,
      "context": "this.loadPromise = this._performLoad();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/dataLoader.js",
      "line": 34,
      "context": "console.log('🔄 Loading game data...');"
    },
    {
      "object": "Promise",
      "method": "all",
      "file": "src/dataLoader.js",
      "line": 37,
      "context": "const [roomsResponse, questionsResponse, achievementsResponse] = await Promise.all(["
    },
    {
      "object": "roomsResponse",
      "method": "json",
      "file": "src/dataLoader.js",
      "line": 55,
      "context": "const roomsData = await roomsResponse.json();"
    },
    {
      "object": "questionsResponse",
      "method": "json",
      "file": "src/dataLoader.js",
      "line": 56,
      "context": "const questionsData = await questionsResponse.json();"
    },
    {
      "object": "achievementsResponse",
      "method": "json",
      "file": "src/dataLoader.js",
      "line": 57,
      "context": "const achievementsData = await achievementsResponse.json();"
    },
    {
      "object": "this",
      "method": "validateDataIntegrity",
      "file": "src/dataLoader.js",
      "line": 65,
      "context": "this.validateDataIntegrity();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/dataLoader.js",
      "line": 67,
      "context": "console.log('✅ Game data loaded successfully!');"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/dataLoader.js",
      "line": 68,
      "context": "console.log(`📍 Loaded ${this.gameData.rooms.length} rooms`);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/dataLoader.js",
      "line": 69,
      "context": "console.log(`❓ Loaded ${this.gameData.questions.length} questions`);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/dataLoader.js",
      "line": 70,
      "context": "console.log(`🏆 Loaded ${this.gameData.achievements.length} achievements`);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/dataLoader.js",
      "line": 75,
      "context": "console.error('❌ Error loading game data:', error);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/dataLoader.js",
      "line": 85,
      "context": "console.log('🔍 Validating data integrity...');"
    },
    {
      "object": "this",
      "method": "_validateRooms",
      "file": "src/dataLoader.js",
      "line": 88,
      "context": "this._validateRooms();"
    },
    {
      "object": "this",
      "method": "_validateQuestions",
      "file": "src/dataLoader.js",
      "line": 91,
      "context": "this._validateQuestions();"
    },
    {
      "object": "this",
      "method": "_validateAchievements",
      "file": "src/dataLoader.js",
      "line": 94,
      "context": "this._validateAchievements();"
    },
    {
      "object": "this",
      "method": "_validateCrossReferences",
      "file": "src/dataLoader.js",
      "line": 97,
      "context": "this._validateCrossReferences();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/dataLoader.js",
      "line": 99,
      "context": "console.log('✅ Data validation passed!');"
    },
    {
      "object": "Array",
      "method": "isArray",
      "file": "src/dataLoader.js",
      "line": 107,
      "context": "if (!Array.isArray(this.gameData.rooms)) {"
    },
    {
      "object": "roomIds",
      "method": "has",
      "file": "src/dataLoader.js",
      "line": 128,
      "context": "if (roomIds.has(room.id)) {"
    },
    {
      "object": "roomIds",
      "method": "add",
      "file": "src/dataLoader.js",
      "line": 131,
      "context": "roomIds.add(room.id);"
    },
    {
      "object": "Array",
      "method": "isArray",
      "file": "src/dataLoader.js",
      "line": 139,
      "context": "if (!Array.isArray(room.connections)) {"
    },
    {
      "object": "Array",
      "method": "isArray",
      "file": "src/dataLoader.js",
      "line": 154,
      "context": "if (!Array.isArray(this.gameData.questions)) {"
    },
    {
      "object": "questionIds",
      "method": "has",
      "file": "src/dataLoader.js",
      "line": 174,
      "context": "if (questionIds.has(question.id)) {"
    },
    {
      "object": "questionIds",
      "method": "add",
      "file": "src/dataLoader.js",
      "line": 177,
      "context": "questionIds.add(question.id);"
    },
    {
      "object": "Array",
      "method": "isArray",
      "file": "src/dataLoader.js",
      "line": 180,
      "context": "if (!Array.isArray(question.answers) || question.answers.length < 2) {"
    },
    {
      "object": "Array",
      "method": "isArray",
      "file": "src/dataLoader.js",
      "line": 201,
      "context": "if (!Array.isArray(this.gameData.achievements)) {"
    },
    {
      "object": "achievementIds",
      "method": "has",
      "file": "src/dataLoader.js",
      "line": 217,
      "context": "if (achievementIds.has(achievement.id)) {"
    },
    {
      "object": "achievementIds",
      "method": "add",
      "file": "src/dataLoader.js",
      "line": 220,
      "context": "achievementIds.add(achievement.id);"
    },
    {
      "object": "rooms",
      "method": "map",
      "file": "src/dataLoader.js",
      "line": 234,
      "context": "const roomIds = new Set(this.gameData.rooms.map(room => room.id));"
    },
    {
      "object": "roomIds",
      "method": "has",
      "file": "src/dataLoader.js",
      "line": 239,
      "context": "if (!roomIds.has(connectionId)) {"
    },
    {
      "object": "questionCategories",
      "method": "forEach",
      "file": "src/dataLoader.js",
      "line": 249,
      "context": "room.questionCategories.forEach(cat => usedCategories.add(cat));"
    },
    {
      "object": "usedCategories",
      "method": "add",
      "file": "src/dataLoader.js",
      "line": 249,
      "context": "room.questionCategories.forEach(cat => usedCategories.add(cat));"
    },
    {
      "object": "questions",
      "method": "map",
      "file": "src/dataLoader.js",
      "line": 253,
      "context": "const questionCategories = new Set(this.gameData.questions.map(q => q.category));"
    },
    {
      "object": "questionCategories",
      "method": "has",
      "file": "src/dataLoader.js",
      "line": 255,
      "context": "if (!questionCategories.has(category)) {"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/dataLoader.js",
      "line": 256,
      "context": "console.warn(`⚠️ Room references unused question category: ${category}`);"
    },
    {
      "object": "rooms",
      "method": "find",
      "file": "src/dataLoader.js",
      "line": 271,
      "context": "return this.gameData.rooms.find(room => room.id === roomId) || null;"
    },
    {
      "object": "questions",
      "method": "find",
      "file": "src/dataLoader.js",
      "line": 284,
      "context": "return this.gameData.questions.find(question => question.id === questionId) || null;"
    },
    {
      "object": "questions",
      "method": "filter",
      "file": "src/dataLoader.js",
      "line": 297,
      "context": "return this.gameData.questions.filter(question => question.category === category);"
    },
    {
      "object": "achievements",
      "method": "find",
      "file": "src/dataLoader.js",
      "line": 310,
      "context": "return this.gameData.achievements.find(achievement => achievement.id === achievementId) || null;"
    },
    {
      "object": "rooms",
      "method": "find",
      "file": "src/dataLoader.js",
      "line": 322,
      "context": "return this.gameData.rooms.find(room => room.isStartingRoom) || null;"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/gameState.js",
      "line": 13,
      "context": "this.startTime = Date.now();"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/gameState.js",
      "line": 14,
      "context": "this.currentRoomStartTime = Date.now(); // Track time in current room"
    },
    {
      "object": "this",
      "method": "initializeStartingRoom",
      "file": "src/gameState.js",
      "line": 21,
      "context": "this.initializeStartingRoom();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/gameState.js",
      "line": 26,
      "context": "console.log('GameState initialized:', this.getStateSnapshot());"
    },
    {
      "object": "this",
      "method": "getStateSnapshot",
      "file": "src/gameState.js",
      "line": 26,
      "context": "console.log('GameState initialized:', this.getStateSnapshot());"
    },
    {
      "object": "dataLoader",
      "method": "getStartingRoom",
      "file": "src/gameState.js",
      "line": 34,
      "context": "const startingRoom = this.dataLoader.getStartingRoom();"
    },
    {
      "object": "visitedRooms",
      "method": "add",
      "file": "src/gameState.js",
      "line": 37,
      "context": "this.visitedRooms.add(startingRoom.id);"
    },
    {
      "object": "unlockedRooms",
      "method": "add",
      "file": "src/gameState.js",
      "line": 38,
      "context": "this.unlockedRooms.add(startingRoom.id);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/gameState.js",
      "line": 39,
      "context": "console.log(`Starting room initialized: ${startingRoom.id} (${startingRoom.name})`);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/gameState.js",
      "line": 41,
      "context": "console.error('No starting room found in data!');"
    },
    {
      "object": "dataLoader",
      "method": "getAllData",
      "file": "src/gameState.js",
      "line": 43,
      "context": "const gameData = this.dataLoader.getAllData();"
    },
    {
      "object": "visitedRooms",
      "method": "add",
      "file": "src/gameState.js",
      "line": 47,
      "context": "this.visitedRooms.add(firstRoom.id);"
    },
    {
      "object": "unlockedRooms",
      "method": "add",
      "file": "src/gameState.js",
      "line": 48,
      "context": "this.unlockedRooms.add(firstRoom.id);"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/gameState.js",
      "line": 49,
      "context": "console.warn(`Using first room as fallback: ${firstRoom.id}`);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/gameState.js",
      "line": 53,
      "context": "console.error('Failed to initialize starting room:', error);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/gameState.js",
      "line": 62,
      "context": "console.log(`Attempting to move to room: ${roomId}`);"
    },
    {
      "object": "dataLoader",
      "method": "getRoom",
      "file": "src/gameState.js",
      "line": 65,
      "context": "const targetRoom = await this.dataLoader.getRoom(roomId);"
    },
    {
      "object": "unlockedRooms",
      "method": "has",
      "file": "src/gameState.js",
      "line": 71,
      "context": "if (!this.unlockedRooms.has(roomId)) {"
    },
    {
      "object": "visitedRooms",
      "method": "add",
      "file": "src/gameState.js",
      "line": 77,
      "context": "this.visitedRooms.add(roomId);"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/gameState.js",
      "line": 78,
      "context": "this.currentRoomStartTime = Date.now(); // Reset room timer"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/gameState.js",
      "line": 80,
      "context": "console.log(`Moved from ${previousRoom} to ${roomId}`);"
    },
    {
      "object": "this",
      "method": "emit",
      "file": "src/gameState.js",
      "line": 81,
      "context": "this.emit('roomChanged', { from: previousRoom, to: roomId, room: targetRoom });"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/gameState.js",
      "line": 85,
      "context": "console.error('Failed to move to room:', error.message);"
    },
    {
      "object": "this",
      "method": "emit",
      "file": "src/gameState.js",
      "line": 86,
      "context": "this.emit('error', { type: 'movement', message: error.message });"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/gameState.js",
      "line": 96,
      "context": "console.log(`Answering question ${questionId} with answer ${answerIndex}`);"
    },
    {
      "object": "dataLoader",
      "method": "getQuestion",
      "file": "src/gameState.js",
      "line": 98,
      "context": "const question = await this.dataLoader.getQuestion(questionId);"
    },
    {
      "object": "answeredQuestions",
      "method": "has",
      "file": "src/gameState.js",
      "line": 103,
      "context": "if (this.answeredQuestions.has(questionId)) {"
    },
    {
      "object": "this",
      "method": "calculateTimeBonus",
      "file": "src/gameState.js",
      "line": 108,
      "context": "const timeBonus = this.calculateTimeBonus();"
    },
    {
      "object": "answeredQuestions",
      "method": "add",
      "file": "src/gameState.js",
      "line": 114,
      "context": "this.answeredQuestions.add(questionId);"
    },
    {
      "object": "this",
      "method": "emit",
      "file": "src/gameState.js",
      "line": 117,
      "context": "this.emit('scoreChanged', {"
    },
    {
      "object": "this",
      "method": "unlockConnectedRooms",
      "file": "src/gameState.js",
      "line": 124,
      "context": "await this.unlockConnectedRooms();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/gameState.js",
      "line": 126,
      "context": "console.log(`Correct answer! Points earned: ${pointsEarned} (${question.points} + ${timeBonus} time bonus)`);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/gameState.js",
      "line": 128,
      "context": "console.log('Incorrect answer');"
    },
    {
      "object": "this",
      "method": "emit",
      "file": "src/gameState.js",
      "line": 140,
      "context": "this.emit('questionAnswered', result);"
    },
    {
      "object": "this",
      "method": "checkGameCompletion",
      "file": "src/gameState.js",
      "line": 143,
      "context": "this.checkGameCompletion();"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/gameState.js",
      "line": 147,
      "context": "console.error('Failed to answer question:', error.message);"
    },
    {
      "object": "this",
      "method": "emit",
      "file": "src/gameState.js",
      "line": 148,
      "context": "this.emit('error', { type: 'answer', message: error.message });"
    },
    {
      "object": "dataLoader",
      "method": "getRoom",
      "file": "src/gameState.js",
      "line": 158,
      "context": "const currentRoom = await this.dataLoader.getRoom(this.currentRoomId);"
    },
    {
      "object": "connections",
      "method": "forEach",
      "file": "src/gameState.js",
      "line": 160,
      "context": "currentRoom.connections.forEach(roomId => {"
    },
    {
      "object": "unlockedRooms",
      "method": "has",
      "file": "src/gameState.js",
      "line": 161,
      "context": "if (!this.unlockedRooms.has(roomId)) {"
    },
    {
      "object": "unlockedRooms",
      "method": "add",
      "file": "src/gameState.js",
      "line": 162,
      "context": "this.unlockedRooms.add(roomId);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/gameState.js",
      "line": 163,
      "context": "console.log(`Unlocked room: ${roomId}`);"
    },
    {
      "object": "this",
      "method": "emit",
      "file": "src/gameState.js",
      "line": 164,
      "context": "this.emit('roomUnlocked', { roomId });"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/gameState.js",
      "line": 169,
      "context": "console.error('Failed to unlock connected rooms:', error);"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/gameState.js",
      "line": 177,
      "context": "const now = Date.now();"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/gameState.js",
      "line": 183,
      "context": "return Math.floor(maxBonus * (1 - timeSinceQuestion / maxBonusTime));"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/gameState.js",
      "line": 192,
      "context": "this.questionStartTime = Date.now();"
    },
    {
      "object": "dataLoader",
      "method": "loadGameData",
      "file": "src/gameState.js",
      "line": 200,
      "context": "const gameData = await this.dataLoader.loadGameData();"
    },
    {
      "object": "this",
      "method": "getCorrectAnswersCount",
      "file": "src/gameState.js",
      "line": 210,
      "context": "const correctAnswers = this.getCorrectAnswersCount();"
    },
    {
      "object": "this",
      "method": "calculateFinalScore",
      "file": "src/gameState.js",
      "line": 220,
      "context": "const finalScore = this.calculateFinalScore();"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/gameState.js",
      "line": 221,
      "context": "const playTime = Date.now() - this.startTime;"
    },
    {
      "object": "this",
      "method": "getStateSnapshot",
      "file": "src/gameState.js",
      "line": 236,
      "context": "gameState: this.getStateSnapshot()"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/gameState.js",
      "line": 239,
      "context": "console.log('🎉 Game completed!', completionData);"
    },
    {
      "object": "this",
      "method": "emit",
      "file": "src/gameState.js",
      "line": 240,
      "context": "this.emit('gameCompleted', completionData);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/gameState.js",
      "line": 262,
      "context": "console.error('Error checking game completion:', error);"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/gameState.js",
      "line": 273,
      "context": "return Math.floor(this.score / 100); // Rough estimate based on scoring"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/gameState.js",
      "line": 280,
      "context": "const playTime = Date.now() - this.startTime;"
    },
    {
      "object": "this",
      "method": "getCorrectAnswersCount",
      "file": "src/gameState.js",
      "line": 282,
      "context": "const correctAnswers = this.getCorrectAnswersCount();"
    },
    {
      "object": "this",
      "method": "calculateDetailedBonuses",
      "file": "src/gameState.js",
      "line": 286,
      "context": "const bonusDetails = this.calculateDetailedBonuses();"
    },
    {
      "object": "dataLoader",
      "method": "getAllData",
      "file": "src/gameState.js",
      "line": 287,
      "context": "const gameData = this.dataLoader ? this.dataLoader.getAllData() : null;"
    },
    {
      "object": "this",
      "method": "calculateFinalScore",
      "file": "src/gameState.js",
      "line": 295,
      "context": "finalScore: this.calculateFinalScore(),"
    },
    {
      "object": "this",
      "method": "formatTime",
      "file": "src/gameState.js",
      "line": 299,
      "context": "playTimeFormatted: this.formatTime(playTime),"
    },
    {
      "object": "this",
      "method": "formatTime",
      "file": "src/gameState.js",
      "line": 301,
      "context": "averageAnswerTimeFormatted: this.formatTime(questionsAnsweredCount > 0 ? playTime / questionsAnsweredCount : 0),"
    },
    {
      "object": "Math",
      "method": "round",
      "file": "src/gameState.js",
      "line": 306,
      "context": "roomsExploredPercent: Math.round((this.visitedRooms.size / totalRooms) * 100),"
    },
    {
      "object": "Math",
      "method": "round",
      "file": "src/gameState.js",
      "line": 309,
      "context": "questionsAnsweredPercent: Math.round((questionsAnsweredCount / totalQuestions) * 100),"
    },
    {
      "object": "Math",
      "method": "round",
      "file": "src/gameState.js",
      "line": 312,
      "context": "accuracy: Math.round(accuracy * 10) / 10,"
    },
    {
      "object": "Math",
      "method": "round",
      "file": "src/gameState.js",
      "line": 313,
      "context": "accuracyPercent: Math.round(accuracy),"
    },
    {
      "object": "this",
      "method": "calculatePerformanceScore",
      "file": "src/gameState.js",
      "line": 326,
      "context": "performanceScore: this.calculatePerformanceScore(accuracy, this.visitedRooms.size / totalRooms * 100, questionsAnsweredCount / totalQuestions * 100)"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/gameState.js",
      "line": 334,
      "context": "const seconds = Math.floor(milliseconds / 1000);"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/gameState.js",
      "line": 335,
      "context": "const minutes = Math.floor(seconds / 60);"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/gameState.js",
      "line": 336,
      "context": "const hours = Math.floor(minutes / 60);"
    },
    {
      "object": "this",
      "method": "getCorrectAnswersCount",
      "file": "src/gameState.js",
      "line": 353,
      "context": "const correctAnswers = this.getCorrectAnswersCount();"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/gameState.js",
      "line": 355,
      "context": "const playTime = Date.now() - this.startTime;"
    },
    {
      "object": "this",
      "method": "calculateDetailedBonuses",
      "file": "src/gameState.js",
      "line": 370,
      "context": "const bonuses = this.calculateDetailedBonuses();"
    },
    {
      "object": "Math",
      "method": "round",
      "file": "src/gameState.js",
      "line": 383,
      "context": "return Math.round((accuracy * 0.5) + (exploration * 0.3) + (completion * 0.2));"
    },
    {
      "object": "dataLoader",
      "method": "getRoom",
      "file": "src/gameState.js",
      "line": 391,
      "context": "const currentRoom = await this.dataLoader.getRoom(this.currentRoomId);"
    },
    {
      "object": "connections",
      "method": "filter",
      "file": "src/gameState.js",
      "line": 396,
      "context": "return currentRoom.connections.filter(roomId =>"
    },
    {
      "object": "unlockedRooms",
      "method": "has",
      "file": "src/gameState.js",
      "line": 397,
      "context": "this.unlockedRooms.has(roomId)"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/gameState.js",
      "line": 400,
      "context": "console.error('Error getting available rooms:', error);"
    },
    {
      "object": "unlockedRooms",
      "method": "has",
      "file": "src/gameState.js",
      "line": 411,
      "context": "return this.unlockedRooms.has(roomId);"
    },
    {
      "object": "Array",
      "method": "from",
      "file": "src/gameState.js",
      "line": 422,
      "context": "visitedRooms: Array.from(this.visitedRooms),"
    },
    {
      "object": "Array",
      "method": "from",
      "file": "src/gameState.js",
      "line": 423,
      "context": "unlockedRooms: Array.from(this.unlockedRooms),"
    },
    {
      "object": "Array",
      "method": "from",
      "file": "src/gameState.js",
      "line": 424,
      "context": "answeredQuestions: Array.from(this.answeredQuestions),"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/gameState.js",
      "line": 428,
      "context": "saveTime: Date.now()"
    },
    {
      "object": "localStorage",
      "method": "setItem",
      "file": "src/gameState.js",
      "line": 431,
      "context": "localStorage.setItem('lobeLabyrinthSave', JSON.stringify(saveData));"
    },
    {
      "object": "JSON",
      "method": "stringify",
      "file": "src/gameState.js",
      "line": 431,
      "context": "localStorage.setItem('lobeLabyrinthSave', JSON.stringify(saveData));"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/gameState.js",
      "line": 432,
      "context": "console.log('Game saved successfully');"
    },
    {
      "object": "this",
      "method": "emit",
      "file": "src/gameState.js",
      "line": 433,
      "context": "this.emit('gameSaved', saveData);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/gameState.js",
      "line": 436,
      "context": "console.error('Failed to save game:', error);"
    },
    {
      "object": "this",
      "method": "emit",
      "file": "src/gameState.js",
      "line": 437,
      "context": "this.emit('error', { type: 'save', message: error.message });"
    },
    {
      "object": "localStorage",
      "method": "getItem",
      "file": "src/gameState.js",
      "line": 447,
      "context": "const saveData = localStorage.getItem('lobeLabyrinthSave');"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/gameState.js",
      "line": 449,
      "context": "console.log('No saved game found');"
    },
    {
      "object": "JSON",
      "method": "parse",
      "file": "src/gameState.js",
      "line": 453,
      "context": "const data = JSON.parse(saveData);"
    },
    {
      "object": "this",
      "method": "validateSaveData",
      "file": "src/gameState.js",
      "line": 456,
      "context": "if (!this.validateSaveData(data)) {"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/gameState.js",
      "line": 457,
      "context": "console.warn('Invalid save data detected, starting new game');"
    },
    {
      "object": "localStorage",
      "method": "removeItem",
      "file": "src/gameState.js",
      "line": 458,
      "context": "localStorage.removeItem('lobeLabyrinthSave');"
    },
    {
      "object": "dataLoader",
      "method": "getStartingRoom",
      "file": "src/gameState.js",
      "line": 463,
      "context": "const startingRoom = this.dataLoader.getStartingRoom();"
    },
    {
      "object": "this",
      "method": "sanitizeRoomId",
      "file": "src/gameState.js",
      "line": 467,
      "context": "this.currentRoomId = this.sanitizeRoomId(data.currentRoomId) || defaultRoomId;"
    },
    {
      "object": "Math",
      "method": "max",
      "file": "src/gameState.js",
      "line": 468,
      "context": "this.score = Math.max(0, parseInt(data.score) || 0);"
    },
    {
      "object": "this",
      "method": "sanitizeRoomArray",
      "file": "src/gameState.js",
      "line": 469,
      "context": "this.visitedRooms = new Set(this.sanitizeRoomArray(data.visitedRooms, defaultRoomId));"
    },
    {
      "object": "this",
      "method": "sanitizeRoomArray",
      "file": "src/gameState.js",
      "line": 470,
      "context": "this.unlockedRooms = new Set(this.sanitizeRoomArray(data.unlockedRooms, defaultRoomId));"
    },
    {
      "object": "this",
      "method": "sanitizeQuestionArray",
      "file": "src/gameState.js",
      "line": 471,
      "context": "this.answeredQuestions = new Set(this.sanitizeQuestionArray(data.answeredQuestions));"
    },
    {
      "object": "this",
      "method": "sanitizeTimestamp",
      "file": "src/gameState.js",
      "line": 472,
      "context": "this.startTime = this.sanitizeTimestamp(data.startTime) || Date.now();"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/gameState.js",
      "line": 472,
      "context": "this.startTime = this.sanitizeTimestamp(data.startTime) || Date.now();"
    },
    {
      "object": "this",
      "method": "sanitizePlayerName",
      "file": "src/gameState.js",
      "line": 474,
      "context": "this.playerName = this.sanitizePlayerName(data.playerName) || '';"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/gameState.js",
      "line": 476,
      "context": "console.log('Game loaded successfully:', this.getStateSnapshot());"
    },
    {
      "object": "this",
      "method": "getStateSnapshot",
      "file": "src/gameState.js",
      "line": 476,
      "context": "console.log('Game loaded successfully:', this.getStateSnapshot());"
    },
    {
      "object": "this",
      "method": "emit",
      "file": "src/gameState.js",
      "line": 477,
      "context": "this.emit('gameLoaded', data);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/gameState.js",
      "line": 480,
      "context": "console.error('Failed to load save game:', error);"
    },
    {
      "object": "localStorage",
      "method": "removeItem",
      "file": "src/gameState.js",
      "line": 481,
      "context": "localStorage.removeItem('lobeLabyrinthSave');"
    },
    {
      "object": "this",
      "method": "emit",
      "file": "src/gameState.js",
      "line": 482,
      "context": "this.emit('error', { type: 'load', message: 'Save data corrupted or invalid' });"
    },
    {
      "object": "Array",
      "method": "isArray",
      "file": "src/gameState.js",
      "line": 507,
      "context": "if (data.visitedRooms !== undefined && !Array.isArray(data.visitedRooms)) {"
    },
    {
      "object": "Array",
      "method": "isArray",
      "file": "src/gameState.js",
      "line": 511,
      "context": "if (data.unlockedRooms !== undefined && !Array.isArray(data.unlockedRooms)) {"
    },
    {
      "object": "Array",
      "method": "isArray",
      "file": "src/gameState.js",
      "line": 515,
      "context": "if (data.answeredQuestions !== undefined && !Array.isArray(data.answeredQuestions)) {"
    },
    {
      "object": "Array",
      "method": "isArray",
      "file": "src/gameState.js",
      "line": 551,
      "context": "if (!Array.isArray(roomArray)) {"
    },
    {
      "object": "this",
      "method": "sanitizeRoomId",
      "file": "src/gameState.js",
      "line": 557,
      "context": ".map(room => this.sanitizeRoomId(room))"
    },
    {
      "object": "sanitized",
      "method": "includes",
      "file": "src/gameState.js",
      "line": 562,
      "context": "if (defaultRoom && !sanitized.includes(defaultRoom)) {"
    },
    {
      "object": "sanitized",
      "method": "unshift",
      "file": "src/gameState.js",
      "line": 563,
      "context": "sanitized.unshift(defaultRoom);"
    },
    {
      "object": "Array",
      "method": "isArray",
      "file": "src/gameState.js",
      "line": 575,
      "context": "if (!Array.isArray(questionArray)) {"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/gameState.js",
      "line": 596,
      "context": "const now = Date.now();"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/gameState.js",
      "line": 633,
      "context": "this.startTime = Date.now();"
    },
    {
      "object": "localStorage",
      "method": "removeItem",
      "file": "src/gameState.js",
      "line": 638,
      "context": "localStorage.removeItem('lobeLabyrinthSave');"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/gameState.js",
      "line": 640,
      "context": "console.log('Game reset to initial state');"
    },
    {
      "object": "this",
      "method": "emit",
      "file": "src/gameState.js",
      "line": 641,
      "context": "this.emit('gameReset');"
    },
    {
      "object": "Array",
      "method": "from",
      "file": "src/gameState.js",
      "line": 651,
      "context": "visitedRooms: Array.from(this.visitedRooms),"
    },
    {
      "object": "Array",
      "method": "from",
      "file": "src/gameState.js",
      "line": 652,
      "context": "unlockedRooms: Array.from(this.unlockedRooms),"
    },
    {
      "object": "Array",
      "method": "from",
      "file": "src/gameState.js",
      "line": 653,
      "context": "answeredQuestions: Array.from(this.answeredQuestions),"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/gameState.js",
      "line": 656,
      "context": "playTime: Date.now() - this.startTime"
    },
    {
      "object": "this",
      "method": "getStateSnapshot",
      "file": "src/gameState.js",
      "line": 665,
      "context": "const baseSnapshot = this.getStateSnapshot();"
    },
    {
      "object": "this",
      "method": "getGameStatistics",
      "file": "src/gameState.js",
      "line": 666,
      "context": "const stats = this.getGameStatistics();"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/gameState.js",
      "line": 710,
      "context": "console.error(`Error in event listener for ${event}:`, error);"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/gameState.js",
      "line": 720,
      "context": "const playTime = Date.now() - this.startTime;"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/gameState.js",
      "line": 725,
      "context": "playTime: Math.floor(playTime / 1000), // in seconds"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/gameState.js",
      "line": 737,
      "context": "return Date.now() - this.currentRoomStartTime;"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/gameState.js",
      "line": 746,
      "context": "this.pausedTime = Date.now() - this.currentRoomStartTime;"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/gameState.js",
      "line": 756,
      "context": "this.currentRoomStartTime = Date.now() - this.pausedTime;"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/gameState.js",
      "line": 765,
      "context": "const seconds = Math.floor(milliseconds / 1000);"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/gameState.js",
      "line": 766,
      "context": "const minutes = Math.floor(seconds / 60);"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/gameState.js",
      "line": 767,
      "context": "const hours = Math.floor(minutes / 60);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/quizEngine.js",
      "line": 28,
      "context": "console.log('QuizEngine initialized - call initializeQuestionPool() after instantiation');"
    },
    {
      "object": "dataLoader",
      "method": "loadGameData",
      "file": "src/quizEngine.js",
      "line": 36,
      "context": "const gameData = await this.dataLoader.loadGameData();"
    },
    {
      "object": "this",
      "method": "categorizeQuestions",
      "file": "src/quizEngine.js",
      "line": 40,
      "context": "this.categorizeQuestions();"
    },
    {
      "object": "this",
      "method": "shuffleQuestionPool",
      "file": "src/quizEngine.js",
      "line": 43,
      "context": "this.shuffleQuestionPool();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/quizEngine.js",
      "line": 45,
      "context": "console.log(`Question pool initialized: ${this.allQuestions.length} questions across ${this.categoryQuestions.size} categories`);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/quizEngine.js",
      "line": 47,
      "context": "console.error('Failed to initialize question pool:', error);"
    },
    {
      "object": "categoryQuestions",
      "method": "clear",
      "file": "src/quizEngine.js",
      "line": 55,
      "context": "this.categoryQuestions.clear();"
    },
    {
      "object": "allQuestions",
      "method": "forEach",
      "file": "src/quizEngine.js",
      "line": 57,
      "context": "this.allQuestions.forEach(question => {"
    },
    {
      "object": "categoryQuestions",
      "method": "has",
      "file": "src/quizEngine.js",
      "line": 59,
      "context": "if (!this.categoryQuestions.has(category)) {"
    },
    {
      "object": "categoryQuestions",
      "method": "set",
      "file": "src/quizEngine.js",
      "line": 60,
      "context": "this.categoryQuestions.set(category, []);"
    },
    {
      "object": "categoryQuestions",
      "method": "get",
      "file": "src/quizEngine.js",
      "line": 62,
      "context": "this.categoryQuestions.get(category).push(question);"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/quizEngine.js",
      "line": 72,
      "context": "const j = Math.floor(Math.random() * (i + 1));"
    },
    {
      "object": "Math",
      "method": "random",
      "file": "src/quizEngine.js",
      "line": 72,
      "context": "const j = Math.floor(Math.random() * (i + 1));"
    },
    {
      "object": "shuffledQuestions",
      "method": "filter",
      "file": "src/quizEngine.js",
      "line": 84,
      "context": "const availableQuestions = this.shuffledQuestions.filter(q =>"
    },
    {
      "object": "answeredQuestions",
      "method": "has",
      "file": "src/quizEngine.js",
      "line": 85,
      "context": "!this.gameState.answeredQuestions.has(q.id)"
    },
    {
      "object": "this",
      "method": "shuffleQuestionPool",
      "file": "src/quizEngine.js",
      "line": 90,
      "context": "this.shuffleQuestionPool();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/quizEngine.js",
      "line": 91,
      "context": "console.log('All questions answered, reshuffling pool');"
    },
    {
      "object": "categoryQuestions",
      "method": "has",
      "file": "src/quizEngine.js",
      "line": 97,
      "context": "if (preferredCategory && this.categoryQuestions.has(preferredCategory)) {"
    },
    {
      "object": "categoryQuestions",
      "method": "get",
      "file": "src/quizEngine.js",
      "line": 98,
      "context": "const categoryQuestions = this.categoryQuestions.get(preferredCategory)"
    },
    {
      "object": "answeredQuestions",
      "method": "has",
      "file": "src/quizEngine.js",
      "line": 99,
      "context": ".filter(q => !this.gameState.answeredQuestions.has(q.id));"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/quizEngine.js",
      "line": 102,
      "context": "selectedQuestion = categoryQuestions[Math.floor(Math.random() * categoryQuestions.length)];"
    },
    {
      "object": "Math",
      "method": "random",
      "file": "src/quizEngine.js",
      "line": 102,
      "context": "selectedQuestion = categoryQuestions[Math.floor(Math.random() * categoryQuestions.length)];"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/quizEngine.js",
      "line": 113,
      "context": "console.error('Error selecting next question:', error);"
    },
    {
      "object": "dataLoader",
      "method": "getQuestion",
      "file": "src/quizEngine.js",
      "line": 126,
      "context": "question = await this.dataLoader.getQuestion(questionId);"
    },
    {
      "object": "this",
      "method": "getNextQuestion",
      "file": "src/quizEngine.js",
      "line": 128,
      "context": "question = await this.getNextQuestion(category);"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/quizEngine.js",
      "line": 136,
      "context": "this.questionStartTime = Date.now();"
    },
    {
      "object": "questionAnswerMap",
      "method": "set",
      "file": "src/quizEngine.js",
      "line": 140,
      "context": "this.questionAnswerMap.set(question.id, {"
    },
    {
      "object": "this",
      "method": "startQuestionTimer",
      "file": "src/quizEngine.js",
      "line": 146,
      "context": "this.startQuestionTimer();"
    },
    {
      "object": "this",
      "method": "shuffleAnswers",
      "file": "src/quizEngine.js",
      "line": 149,
      "context": "const shuffledAnswers = this.shuffleAnswers(question);"
    },
    {
      "object": "questionAnswerMap",
      "method": "get",
      "file": "src/quizEngine.js",
      "line": 152,
      "context": "this.questionAnswerMap.get(question.id).shuffledCorrectIndex = shuffledAnswers.correctIndex;"
    },
    {
      "object": "this",
      "method": "generateAnswerHash",
      "file": "src/quizEngine.js",
      "line": 155,
      "context": "const answerHash = this.generateAnswerHash(question.id, shuffledAnswers.correctIndex);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/quizEngine.js",
      "line": 168,
      "context": "console.log(`Presenting question: ${question.question}`);"
    },
    {
      "object": "this",
      "method": "emit",
      "file": "src/quizEngine.js",
      "line": 169,
      "context": "this.emit('questionPresented', questionData);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/quizEngine.js",
      "line": 173,
      "context": "console.error('Failed to present question:', error);"
    },
    {
      "object": "this",
      "method": "emit",
      "file": "src/quizEngine.js",
      "line": 174,
      "context": "this.emit('error', { type: 'presentation', message: error.message });"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/quizEngine.js",
      "line": 188,
      "context": "const j = Math.floor(Math.random() * (i + 1));"
    },
    {
      "object": "Math",
      "method": "random",
      "file": "src/quizEngine.js",
      "line": 188,
      "context": "const j = Math.floor(Math.random() * (i + 1));"
    },
    {
      "object": "answers",
      "method": "indexOf",
      "file": "src/quizEngine.js",
      "line": 193,
      "context": "const correctIndex = answers.indexOf(correctAnswer);"
    },
    {
      "object": "this",
      "method": "clearQuestionTimer",
      "file": "src/quizEngine.js",
      "line": 205,
      "context": "this.clearQuestionTimer();"
    },
    {
      "object": "performance",
      "method": "now",
      "file": "src/quizEngine.js",
      "line": 208,
      "context": "const startTime = performance.now();"
    },
    {
      "object": "Math",
      "method": "max",
      "file": "src/quizEngine.js",
      "line": 211,
      "context": "this.timeRemaining = Math.max(0, this.questionTimeLimit - elapsed);"
    },
    {
      "object": "this",
      "method": "emit",
      "file": "src/quizEngine.js",
      "line": 213,
      "context": "this.emit('timerUpdate', {"
    },
    {
      "object": "this",
      "method": "handleTimeUp",
      "file": "src/quizEngine.js",
      "line": 222,
      "context": "this.handleTimeUp();"
    },
    {
      "object": "this",
      "method": "clearQuestionTimer",
      "file": "src/quizEngine.js",
      "line": 243,
      "context": "this.clearQuestionTimer();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/quizEngine.js",
      "line": 247,
      "context": "console.log('Answer already being processed, skipping timeUp');"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/quizEngine.js",
      "line": 251,
      "context": "console.log('Time up for question:', this.currentQuestion?.id);"
    },
    {
      "object": "this",
      "method": "getOriginalCorrectAnswer",
      "file": "src/quizEngine.js",
      "line": 258,
      "context": "correctAnswer: this.getOriginalCorrectAnswer(this.currentQuestion?.id),"
    },
    {
      "object": "this",
      "method": "emit",
      "file": "src/quizEngine.js",
      "line": 263,
      "context": "this.emit('timeUp', result);"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/quizEngine.js",
      "line": 277,
      "context": "console.warn('Answer processing already in progress, ignoring duplicate submission');"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/quizEngine.js",
      "line": 284,
      "context": "const timeElapsed = Date.now() - this.questionStartTime;"
    },
    {
      "object": "this",
      "method": "validateAnswerHash",
      "file": "src/quizEngine.js",
      "line": 287,
      "context": "const isCorrect = this.validateAnswerHash(question.id, answerIndex, question.answerHash);"
    },
    {
      "object": "this",
      "method": "clearQuestionTimer",
      "file": "src/quizEngine.js",
      "line": 290,
      "context": "this.clearQuestionTimer();"
    },
    {
      "object": "this",
      "method": "calculateTimeBonus",
      "file": "src/quizEngine.js",
      "line": 293,
      "context": "const timeBonus = this.calculateTimeBonus(timeElapsed);"
    },
    {
      "object": "this",
      "method": "getOriginalCorrectAnswer",
      "file": "src/quizEngine.js",
      "line": 304,
      "context": "correctAnswer: this.getOriginalCorrectAnswer(question.id), // Only revealed after answer"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/quizEngine.js",
      "line": 312,
      "context": "console.log(`Answer validation: ${isCorrect ? 'Correct' : 'Incorrect'} (${pointsEarned} points)`);"
    },
    {
      "object": "gameState",
      "method": "startQuestionTimer",
      "file": "src/quizEngine.js",
      "line": 316,
      "context": "this.gameState.startQuestionTimer(); // Sync with gameState"
    },
    {
      "object": "gameState",
      "method": "answerQuestion",
      "file": "src/quizEngine.js",
      "line": 317,
      "context": "await this.gameState.answerQuestion(question.id, answerIndex);"
    },
    {
      "object": "this",
      "method": "emit",
      "file": "src/quizEngine.js",
      "line": 320,
      "context": "this.emit('answerValidated', result);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/quizEngine.js",
      "line": 325,
      "context": "console.error('Failed to validate answer:', error);"
    },
    {
      "object": "this",
      "method": "emit",
      "file": "src/quizEngine.js",
      "line": 326,
      "context": "this.emit('error', { type: 'validation', message: error.message });"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/quizEngine.js",
      "line": 342,
      "context": "const seed = `${questionId}_${correctIndex}_${this.questionStartTime || Date.now()}`;"
    },
    {
      "object": "seed",
      "method": "charCodeAt",
      "file": "src/quizEngine.js",
      "line": 345,
      "context": "const char = seed.charCodeAt(i);"
    },
    {
      "object": "Math",
      "method": "abs",
      "file": "src/quizEngine.js",
      "line": 349,
      "context": "return Math.abs(hash).toString(16);"
    },
    {
      "object": "this",
      "method": "generateAnswerHash",
      "file": "src/quizEngine.js",
      "line": 361,
      "context": "const submittedHash = this.generateAnswerHash(questionId, answerIndex);"
    },
    {
      "object": "questionAnswerMap",
      "method": "get",
      "file": "src/quizEngine.js",
      "line": 373,
      "context": "const storedData = this.questionAnswerMap.get(questionId);"
    },
    {
      "object": "dataLoader",
      "method": "getQuestion",
      "file": "src/quizEngine.js",
      "line": 379,
      "context": "const originalQuestion = this.dataLoader.getQuestion(questionId);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/quizEngine.js",
      "line": 382,
      "context": "console.error('Error retrieving original correct answer:', error);"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/quizEngine.js",
      "line": 396,
      "context": "return Math.floor(maxBonus * bonusMultiplier);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/quizEngine.js",
      "line": 410,
      "context": "console.log('Hint requested for current question');"
    },
    {
      "object": "this",
      "method": "emit",
      "file": "src/quizEngine.js",
      "line": 411,
      "context": "this.emit('hintRequested', {"
    },
    {
      "object": "this",
      "method": "clearQuestionTimer",
      "file": "src/quizEngine.js",
      "line": 429,
      "context": "this.clearQuestionTimer();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/quizEngine.js",
      "line": 439,
      "context": "console.log('Question skipped:', this.currentQuestion.id);"
    },
    {
      "object": "this",
      "method": "emit",
      "file": "src/quizEngine.js",
      "line": 441,
      "context": "this.emit('questionSkipped', result);"
    },
    {
      "object": "categoryQuestions",
      "method": "get",
      "file": "src/quizEngine.js",
      "line": 451,
      "context": "return this.categoryQuestions.get(category) || [];"
    },
    {
      "object": "Array",
      "method": "from",
      "file": "src/quizEngine.js",
      "line": 458,
      "context": "return Array.from(this.categoryQuestions.keys());"
    },
    {
      "object": "categoryQuestions",
      "method": "keys",
      "file": "src/quizEngine.js",
      "line": 458,
      "context": "return Array.from(this.categoryQuestions.keys());"
    },
    {
      "object": "this",
      "method": "getAvailableCategories",
      "file": "src/quizEngine.js",
      "line": 467,
      "context": "const categories = this.getAvailableCategories();"
    },
    {
      "object": "categories",
      "method": "map",
      "file": "src/quizEngine.js",
      "line": 469,
      "context": "const categoryStats = categories.map(category => {"
    },
    {
      "object": "categoryQuestions",
      "method": "get",
      "file": "src/quizEngine.js",
      "line": 470,
      "context": "const categoryQuestions = this.categoryQuestions.get(category);"
    },
    {
      "object": "categoryQuestions",
      "method": "filter",
      "file": "src/quizEngine.js",
      "line": 471,
      "context": "const answeredInCategory = categoryQuestions.filter(q =>"
    },
    {
      "object": "answeredQuestions",
      "method": "has",
      "file": "src/quizEngine.js",
      "line": 472,
      "context": "this.gameState && this.gameState.answeredQuestions.has(q.id)"
    },
    {
      "object": "Math",
      "method": "round",
      "file": "src/quizEngine.js",
      "line": 479,
      "context": "percentage: Math.round((answeredInCategory / categoryQuestions.length) * 100)"
    },
    {
      "object": "Math",
      "method": "round",
      "file": "src/quizEngine.js",
      "line": 488,
      "context": "completionPercentage: Math.round((answeredQuestions / totalQuestions) * 100)"
    },
    {
      "object": "this",
      "method": "getNextQuestion",
      "file": "src/quizEngine.js",
      "line": 497,
      "context": "return this.getNextQuestion();"
    },
    {
      "object": "gameState",
      "method": "getStatistics",
      "file": "src/quizEngine.js",
      "line": 500,
      "context": "const stats = this.gameState.getStatistics();"
    },
    {
      "object": "allQuestions",
      "method": "filter",
      "file": "src/quizEngine.js",
      "line": 514,
      "context": "const adaptiveQuestions = this.allQuestions.filter(q =>"
    },
    {
      "object": "answeredQuestions",
      "method": "has",
      "file": "src/quizEngine.js",
      "line": 516,
      "context": "!this.gameState.answeredQuestions.has(q.id)"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/quizEngine.js",
      "line": 520,
      "context": "return adaptiveQuestions[Math.floor(Math.random() * adaptiveQuestions.length)];"
    },
    {
      "object": "Math",
      "method": "random",
      "file": "src/quizEngine.js",
      "line": 520,
      "context": "return adaptiveQuestions[Math.floor(Math.random() * adaptiveQuestions.length)];"
    },
    {
      "object": "this",
      "method": "getNextQuestion",
      "file": "src/quizEngine.js",
      "line": 524,
      "context": "return this.getNextQuestion();"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/quizEngine.js",
      "line": 543,
      "context": "console.error(`Error in QuizEngine event listener for ${event}:`, error);"
    },
    {
      "object": "this",
      "method": "clearQuestionTimer",
      "file": "src/quizEngine.js",
      "line": 553,
      "context": "this.clearQuestionTimer();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/quizEngine.js",
      "line": 556,
      "context": "console.log('QuizEngine destroyed');"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/uiManager.js",
      "line": 28,
      "context": "console.log('UIManager initialized with animations:', !!this.animationManager, 'achievements:', !!this.achievementManager);"
    },
    {
      "object": "this",
      "method": "initializeElements",
      "file": "src/uiManager.js",
      "line": 29,
      "context": "this.initializeElements();"
    },
    {
      "object": "this",
      "method": "setupEventListeners",
      "file": "src/uiManager.js",
      "line": 30,
      "context": "this.setupEventListeners();"
    },
    {
      "object": "this",
      "method": "setupAriaLiveRegions",
      "file": "src/uiManager.js",
      "line": 31,
      "context": "this.setupAriaLiveRegions();"
    },
    {
      "object": "this",
      "method": "updateDisplay",
      "file": "src/uiManager.js",
      "line": 32,
      "context": "this.updateDisplay();"
    },
    {
      "object": "this",
      "method": "setupAchievementNotifications",
      "file": "src/uiManager.js",
      "line": 33,
      "context": "this.setupAchievementNotifications();"
    },
    {
      "object": "this",
      "method": "setupHapticFeedback",
      "file": "src/uiManager.js",
      "line": 39,
      "context": "this.setupHapticFeedback();"
    },
    {
      "object": "this",
      "method": "getElementsByIds",
      "file": "src/uiManager.js",
      "line": 47,
      "context": "this.elements = this.getElementsByIds(["
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/uiManager.js",
      "line": 91,
      "context": "console.log('UI elements initialized with caching');"
    },
    {
      "object": "ids",
      "method": "forEach",
      "file": "src/uiManager.js",
      "line": 101,
      "context": "ids.forEach(id => {"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/uiManager.js",
      "line": 102,
      "context": "const element = document.getElementById(id);"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/uiManager.js",
      "line": 104,
      "context": "console.warn(`UIManager: Element with ID '${id}' not found in DOM`);"
    },
    {
      "object": "id",
      "method": "replace",
      "file": "src/uiManager.js",
      "line": 107,
      "context": "const camelCaseKey = id.replace(/-([a-z])/g, (match, letter) => letter.toUpperCase());"
    },
    {
      "object": "letter",
      "method": "toUpperCase",
      "file": "src/uiManager.js",
      "line": 107,
      "context": "const camelCaseKey = id.replace(/-([a-z])/g, (match, letter) => letter.toUpperCase());"
    },
    {
      "object": "newQuestionBtn",
      "method": "addEventListener",
      "file": "src/uiManager.js",
      "line": 119,
      "context": "this.elements.newQuestionBtn.addEventListener('click', () => this.presentNewQuestion());"
    },
    {
      "object": "this",
      "method": "presentNewQuestion",
      "file": "src/uiManager.js",
      "line": 119,
      "context": "this.elements.newQuestionBtn.addEventListener('click', () => this.presentNewQuestion());"
    },
    {
      "object": "hintBtn",
      "method": "addEventListener",
      "file": "src/uiManager.js",
      "line": 123,
      "context": "this.elements.hintBtn.addEventListener('click', () => this.showHint());"
    },
    {
      "object": "this",
      "method": "showHint",
      "file": "src/uiManager.js",
      "line": 123,
      "context": "this.elements.hintBtn.addEventListener('click', () => this.showHint());"
    },
    {
      "object": "skipBtn",
      "method": "addEventListener",
      "file": "src/uiManager.js",
      "line": 127,
      "context": "this.elements.skipBtn.addEventListener('click', () => this.skipQuestion());"
    },
    {
      "object": "this",
      "method": "skipQuestion",
      "file": "src/uiManager.js",
      "line": 127,
      "context": "this.elements.skipBtn.addEventListener('click', () => this.skipQuestion());"
    },
    {
      "object": "saveBtn",
      "method": "addEventListener",
      "file": "src/uiManager.js",
      "line": 131,
      "context": "this.elements.saveBtn.addEventListener('click', () => this.saveGame());"
    },
    {
      "object": "this",
      "method": "saveGame",
      "file": "src/uiManager.js",
      "line": 131,
      "context": "this.elements.saveBtn.addEventListener('click', () => this.saveGame());"
    },
    {
      "object": "loadBtn",
      "method": "addEventListener",
      "file": "src/uiManager.js",
      "line": 135,
      "context": "this.elements.loadBtn.addEventListener('click', () => this.loadGame());"
    },
    {
      "object": "this",
      "method": "loadGame",
      "file": "src/uiManager.js",
      "line": 135,
      "context": "this.elements.loadBtn.addEventListener('click', () => this.loadGame());"
    },
    {
      "object": "resetBtn",
      "method": "addEventListener",
      "file": "src/uiManager.js",
      "line": 139,
      "context": "this.elements.resetBtn.addEventListener('click', () => this.resetGame());"
    },
    {
      "object": "this",
      "method": "resetGame",
      "file": "src/uiManager.js",
      "line": 139,
      "context": "this.elements.resetBtn.addEventListener('click', () => this.resetGame());"
    },
    {
      "object": "gameState",
      "method": "on",
      "file": "src/uiManager.js",
      "line": 144,
      "context": "this.gameState.on('roomChanged', (data) => this.handleRoomChange(data));"
    },
    {
      "object": "this",
      "method": "handleRoomChange",
      "file": "src/uiManager.js",
      "line": 144,
      "context": "this.gameState.on('roomChanged', (data) => this.handleRoomChange(data));"
    },
    {
      "object": "gameState",
      "method": "on",
      "file": "src/uiManager.js",
      "line": 145,
      "context": "this.gameState.on('questionAnswered', (data) => this.handleQuestionAnswered(data));"
    },
    {
      "object": "this",
      "method": "handleQuestionAnswered",
      "file": "src/uiManager.js",
      "line": 145,
      "context": "this.gameState.on('questionAnswered', (data) => this.handleQuestionAnswered(data));"
    },
    {
      "object": "gameState",
      "method": "on",
      "file": "src/uiManager.js",
      "line": 146,
      "context": "this.gameState.on('gameCompleted', (data) => this.handleGameCompleted(data));"
    },
    {
      "object": "this",
      "method": "handleGameCompleted",
      "file": "src/uiManager.js",
      "line": 146,
      "context": "this.gameState.on('gameCompleted', (data) => this.handleGameCompleted(data));"
    },
    {
      "object": "quizEngine",
      "method": "on",
      "file": "src/uiManager.js",
      "line": 151,
      "context": "this.quizEngine.on('questionPresented', (data) => this.displayQuestion(data));"
    },
    {
      "object": "this",
      "method": "displayQuestion",
      "file": "src/uiManager.js",
      "line": 151,
      "context": "this.quizEngine.on('questionPresented', (data) => this.displayQuestion(data));"
    },
    {
      "object": "quizEngine",
      "method": "on",
      "file": "src/uiManager.js",
      "line": 152,
      "context": "this.quizEngine.on('answerValidated', (data) => this.handleAnswerValidated(data));"
    },
    {
      "object": "this",
      "method": "handleAnswerValidated",
      "file": "src/uiManager.js",
      "line": 152,
      "context": "this.quizEngine.on('answerValidated', (data) => this.handleAnswerValidated(data));"
    },
    {
      "object": "quizEngine",
      "method": "on",
      "file": "src/uiManager.js",
      "line": 153,
      "context": "this.quizEngine.on('timerUpdate', (data) => this.updateTimer(data));"
    },
    {
      "object": "this",
      "method": "updateTimer",
      "file": "src/uiManager.js",
      "line": 153,
      "context": "this.quizEngine.on('timerUpdate', (data) => this.updateTimer(data));"
    },
    {
      "object": "quizEngine",
      "method": "on",
      "file": "src/uiManager.js",
      "line": 154,
      "context": "this.quizEngine.on('timeUp', (data) => this.handleTimeUp(data));"
    },
    {
      "object": "this",
      "method": "handleTimeUp",
      "file": "src/uiManager.js",
      "line": 154,
      "context": "this.quizEngine.on('timeUp', (data) => this.handleTimeUp(data));"
    },
    {
      "object": "playAgainBtn",
      "method": "addEventListener",
      "file": "src/uiManager.js",
      "line": 159,
      "context": "this.elements.playAgainBtn.addEventListener('click', () => this.handlePlayAgain());"
    },
    {
      "object": "this",
      "method": "handlePlayAgain",
      "file": "src/uiManager.js",
      "line": 159,
      "context": "this.elements.playAgainBtn.addEventListener('click', () => this.handlePlayAgain());"
    },
    {
      "object": "viewAchievementsBtn",
      "method": "addEventListener",
      "file": "src/uiManager.js",
      "line": 163,
      "context": "this.elements.viewAchievementsBtn.addEventListener('click', () => this.handleViewAchievements());"
    },
    {
      "object": "this",
      "method": "handleViewAchievements",
      "file": "src/uiManager.js",
      "line": 163,
      "context": "this.elements.viewAchievementsBtn.addEventListener('click', () => this.handleViewAchievements());"
    },
    {
      "object": "shareResultsBtn",
      "method": "addEventListener",
      "file": "src/uiManager.js",
      "line": 167,
      "context": "this.elements.shareResultsBtn.addEventListener('click', () => this.handleShareResults());"
    },
    {
      "object": "this",
      "method": "handleShareResults",
      "file": "src/uiManager.js",
      "line": 167,
      "context": "this.elements.shareResultsBtn.addEventListener('click', () => this.handleShareResults());"
    },
    {
      "object": "this",
      "method": "setupKeyboardNavigation",
      "file": "src/uiManager.js",
      "line": 173,
      "context": "this.setupKeyboardNavigation();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/uiManager.js",
      "line": 175,
      "context": "console.log('Event listeners setup complete');"
    },
    {
      "object": "document",
      "method": "addEventListener",
      "file": "src/uiManager.js",
      "line": 188,
      "context": "document.addEventListener('keydown', (event) => {"
    },
    {
      "object": "this",
      "method": "shouldPreventDefault",
      "file": "src/uiManager.js",
      "line": 190,
      "context": "if (this.shouldPreventDefault(event)) {"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 191,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "handleKeyboardInput",
      "file": "src/uiManager.js",
      "line": 195,
      "context": "this.handleKeyboardInput(event);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/uiManager.js",
      "line": 198,
      "context": "console.log('Keyboard navigation setup complete');"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiManager.js",
      "line": 206,
      "context": "this.politeRegion = document.createElement('div');"
    },
    {
      "object": "politeRegion",
      "method": "setAttribute",
      "file": "src/uiManager.js",
      "line": 207,
      "context": "this.politeRegion.setAttribute('aria-live', 'polite');"
    },
    {
      "object": "politeRegion",
      "method": "setAttribute",
      "file": "src/uiManager.js",
      "line": 208,
      "context": "this.politeRegion.setAttribute('aria-atomic', 'true');"
    },
    {
      "object": "body",
      "method": "appendChild",
      "file": "src/uiManager.js",
      "line": 211,
      "context": "document.body.appendChild(this.politeRegion);"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiManager.js",
      "line": 214,
      "context": "this.assertiveRegion = document.createElement('div');"
    },
    {
      "object": "assertiveRegion",
      "method": "setAttribute",
      "file": "src/uiManager.js",
      "line": 215,
      "context": "this.assertiveRegion.setAttribute('aria-live', 'assertive');"
    },
    {
      "object": "assertiveRegion",
      "method": "setAttribute",
      "file": "src/uiManager.js",
      "line": 216,
      "context": "this.assertiveRegion.setAttribute('aria-atomic', 'true');"
    },
    {
      "object": "body",
      "method": "appendChild",
      "file": "src/uiManager.js",
      "line": 219,
      "context": "document.body.appendChild(this.assertiveRegion);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/uiManager.js",
      "line": 221,
      "context": "console.log('ARIA live regions initialized for accessibility');"
    },
    {
      "object": "this",
      "method": "isVictoryScreenVisible",
      "file": "src/uiManager.js",
      "line": 262,
      "context": "if (this.isVictoryScreenVisible()) {"
    },
    {
      "object": "this",
      "method": "handleVictoryScreenKeys",
      "file": "src/uiManager.js",
      "line": 263,
      "context": "this.handleVictoryScreenKeys(event);"
    },
    {
      "object": "this",
      "method": "checkQuestionActive",
      "file": "src/uiManager.js",
      "line": 267,
      "context": "if (this.checkQuestionActive()) {"
    },
    {
      "object": "this",
      "method": "handleQuestionKeys",
      "file": "src/uiManager.js",
      "line": 268,
      "context": "this.handleQuestionKeys(event);"
    },
    {
      "object": "this",
      "method": "isMapFocused",
      "file": "src/uiManager.js",
      "line": 272,
      "context": "if (this.isMapFocused()) {"
    },
    {
      "object": "this",
      "method": "handleMapNavigationKeys",
      "file": "src/uiManager.js",
      "line": 273,
      "context": "this.handleMapNavigationKeys(event);"
    },
    {
      "object": "this",
      "method": "handleGlobalShortcuts",
      "file": "src/uiManager.js",
      "line": 278,
      "context": "this.handleGlobalShortcuts(event);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/uiManager.js",
      "line": 281,
      "context": "console.error('Error handling keyboard input:', error);"
    },
    {
      "object": "this",
      "method": "handlePlayAgain",
      "file": "src/uiManager.js",
      "line": 296,
      "context": "this.handlePlayAgain();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 297,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "hideVictoryScreen",
      "file": "src/uiManager.js",
      "line": 300,
      "context": "this.hideVictoryScreen();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 301,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "handlePlayAgain",
      "file": "src/uiManager.js",
      "line": 304,
      "context": "this.handlePlayAgain();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 305,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "handleViewAchievements",
      "file": "src/uiManager.js",
      "line": 308,
      "context": "this.handleViewAchievements();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 309,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "handleShareResults",
      "file": "src/uiManager.js",
      "line": 312,
      "context": "this.handleShareResults();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 313,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "selectAnswerByIndex",
      "file": "src/uiManager.js",
      "line": 328,
      "context": "this.selectAnswerByIndex(answerIndex);"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 329,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "submitCurrentAnswer",
      "file": "src/uiManager.js",
      "line": 338,
      "context": "this.submitCurrentAnswer();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 339,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "showHint",
      "file": "src/uiManager.js",
      "line": 344,
      "context": "this.showHint();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 345,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "skipQuestion",
      "file": "src/uiManager.js",
      "line": 350,
      "context": "this.skipQuestion();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 351,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "presentNewQuestion",
      "file": "src/uiManager.js",
      "line": 357,
      "context": "this.presentNewQuestion();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 358,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "clearAnswerSelection",
      "file": "src/uiManager.js",
      "line": 363,
      "context": "this.clearAnswerSelection();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 364,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "navigateMapDirection",
      "file": "src/uiManager.js",
      "line": 380,
      "context": "this.navigateMapDirection('up');"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 381,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "navigateMapDirection",
      "file": "src/uiManager.js",
      "line": 386,
      "context": "this.navigateMapDirection('down');"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 387,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "navigateMapDirection",
      "file": "src/uiManager.js",
      "line": 392,
      "context": "this.navigateMapDirection('left');"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 393,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "navigateMapDirection",
      "file": "src/uiManager.js",
      "line": 398,
      "context": "this.navigateMapDirection('right');"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 399,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "enterCurrentRoom",
      "file": "src/uiManager.js",
      "line": 404,
      "context": "this.enterCurrentRoom();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 405,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "saveGame",
      "file": "src/uiManager.js",
      "line": 424,
      "context": "this.saveGame();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 425,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "loadGame",
      "file": "src/uiManager.js",
      "line": 428,
      "context": "this.loadGame();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 429,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "resetGame",
      "file": "src/uiManager.js",
      "line": 432,
      "context": "this.resetGame();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 433,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "showKeyboardHelp",
      "file": "src/uiManager.js",
      "line": 436,
      "context": "this.showKeyboardHelp();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 437,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "presentNewQuestion",
      "file": "src/uiManager.js",
      "line": 441,
      "context": "this.presentNewQuestion();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 442,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "toggleTimer",
      "file": "src/uiManager.js",
      "line": 446,
      "context": "this.toggleTimer();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 447,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "handleViewAchievements",
      "file": "src/uiManager.js",
      "line": 456,
      "context": "this.handleViewAchievements();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 457,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "focusMap",
      "file": "src/uiManager.js",
      "line": 460,
      "context": "this.focusMap();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 461,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "focusQuestion",
      "file": "src/uiManager.js",
      "line": 464,
      "context": "this.focusQuestion();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 465,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "showQuickStats",
      "file": "src/uiManager.js",
      "line": 469,
      "context": "this.showQuickStats();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 470,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "showHint",
      "file": "src/uiManager.js",
      "line": 474,
      "context": "this.showHint();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 475,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "confirmAndResetGame",
      "file": "src/uiManager.js",
      "line": 485,
      "context": "this.confirmAndResetGame();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 486,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "toggleDebugMode",
      "file": "src/uiManager.js",
      "line": 490,
      "context": "this.toggleDebugMode();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 491,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "exportSaveData",
      "file": "src/uiManager.js",
      "line": 495,
      "context": "this.exportSaveData();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 496,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "showKeyboardHelp",
      "file": "src/uiManager.js",
      "line": 504,
      "context": "this.showKeyboardHelp();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 505,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "showQuickStats",
      "file": "src/uiManager.js",
      "line": 508,
      "context": "this.showQuickStats();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 509,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "refreshCurrentRoom",
      "file": "src/uiManager.js",
      "line": 513,
      "context": "this.refreshCurrentRoom();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 514,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "isInInputField",
      "file": "src/uiManager.js",
      "line": 519,
      "context": "if (!this.isInInputField(event.target)) {"
    },
    {
      "object": "this",
      "method": "showKeyboardHelp",
      "file": "src/uiManager.js",
      "line": 522,
      "context": "this.showKeyboardHelp();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 523,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "cycleFocus",
      "file": "src/uiManager.js",
      "line": 527,
      "context": "this.cycleFocus();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 528,
      "context": "event.preventDefault();"
    },
    {
      "object": "classList",
      "method": "contains",
      "file": "src/uiManager.js",
      "line": 563,
      "context": "this.elements.victoryScreen.classList.contains('show');"
    },
    {
      "object": "this",
      "method": "checkQuestionActive",
      "file": "src/uiManager.js",
      "line": 587,
      "context": "return !this.checkQuestionActive() && !this.isVictoryScreenVisible();"
    },
    {
      "object": "this",
      "method": "isVictoryScreenVisible",
      "file": "src/uiManager.js",
      "line": 587,
      "context": "return !this.checkQuestionActive() && !this.isVictoryScreenVisible();"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 600,
      "context": "const answerButtons = document.querySelectorAll('.answer-btn');"
    },
    {
      "object": "this",
      "method": "highlightSelectedAnswer",
      "file": "src/uiManager.js",
      "line": 606,
      "context": "this.highlightSelectedAnswer(index);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/uiManager.js",
      "line": 609,
      "context": "console.error('Error selecting answer by index:', error);"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 620,
      "context": "document.querySelectorAll('.answer-btn').forEach((btn, i) => {"
    },
    {
      "object": "classList",
      "method": "remove",
      "file": "src/uiManager.js",
      "line": 621,
      "context": "btn.classList.remove('keyboard-selected');"
    },
    {
      "object": "btn",
      "method": "setAttribute",
      "file": "src/uiManager.js",
      "line": 622,
      "context": "btn.setAttribute('aria-checked', 'false');"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 626,
      "context": "const answerButtons = document.querySelectorAll('.answer-btn');"
    },
    {
      "object": "classList",
      "method": "add",
      "file": "src/uiManager.js",
      "line": 628,
      "context": "answerButtons[index].classList.add('keyboard-selected');"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/uiManager.js",
      "line": 633,
      "context": "console.error('Error highlighting answer:', error);"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 642,
      "context": "const answerButtons = document.querySelectorAll('.answer-btn');"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 653,
      "context": "document.querySelectorAll('.answer-btn').forEach(btn => {"
    },
    {
      "object": "classList",
      "method": "remove",
      "file": "src/uiManager.js",
      "line": 654,
      "context": "btn.classList.remove('keyboard-selected');"
    },
    {
      "object": "btn",
      "method": "setAttribute",
      "file": "src/uiManager.js",
      "line": 655,
      "context": "btn.setAttribute('aria-checked', 'false');"
    },
    {
      "object": "mapRenderer",
      "method": "navigateDirection",
      "file": "src/uiManager.js",
      "line": 666,
      "context": "this.mapRenderer.navigateDirection(direction);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/uiManager.js",
      "line": 668,
      "context": "console.log(`Map navigation: ${direction} (map renderer not available)`);"
    },
    {
      "object": "mapRenderer",
      "method": "enterCurrentRoom",
      "file": "src/uiManager.js",
      "line": 677,
      "context": "this.mapRenderer.enterCurrentRoom();"
    },
    {
      "object": "this",
      "method": "presentNewQuestion",
      "file": "src/uiManager.js",
      "line": 680,
      "context": "this.presentNewQuestion();"
    },
    {
      "object": "mapCanvas",
      "method": "focus",
      "file": "src/uiManager.js",
      "line": 689,
      "context": "this.elements.mapCanvas.focus();"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 690,
      "context": "this.showFeedback('🗺️ Map focused - Use arrow keys to navigate', 'info');"
    },
    {
      "object": "questionText",
      "method": "focus",
      "file": "src/uiManager.js",
      "line": 699,
      "context": "this.elements.questionText.focus();"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 700,
      "context": "this.showFeedback('❓ Question focused - Use number keys to select answers', 'info');"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 754,
      "context": "this.showFeedback(helpText.trim(), 'info', 8000);"
    },
    {
      "object": "helpText",
      "method": "trim",
      "file": "src/uiManager.js",
      "line": 754,
      "context": "this.showFeedback(helpText.trim(), 'info', 8000);"
    },
    {
      "object": "gameState",
      "method": "getGameStatistics",
      "file": "src/uiManager.js",
      "line": 762,
      "context": "const stats = this.gameState.getGameStatistics();"
    },
    {
      "object": "finalScore",
      "method": "toLocaleString",
      "file": "src/uiManager.js",
      "line": 766,
      "context": "🏆 Score: ${stats.finalScore.toLocaleString()}"
    },
    {
      "object": "gameState",
      "method": "formatTime",
      "file": "src/uiManager.js",
      "line": 769,
      "context": "⏱️ Time: ${this.gameState.formatTime(stats.totalTime)}"
    },
    {
      "object": "this",
      "method": "showTooltip",
      "file": "src/uiManager.js",
      "line": 773,
      "context": "this.showTooltip(quickStatsText.trim(), 4000);"
    },
    {
      "object": "quickStatsText",
      "method": "trim",
      "file": "src/uiManager.js",
      "line": 773,
      "context": "this.showTooltip(quickStatsText.trim(), 4000);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/uiManager.js",
      "line": 775,
      "context": "console.error('Error showing quick stats:', error);"
    },
    {
      "object": "this",
      "method": "showTooltip",
      "file": "src/uiManager.js",
      "line": 776,
      "context": "this.showTooltip('Stats not available', 2000);"
    },
    {
      "object": "gameState",
      "method": "resumeTimer",
      "file": "src/uiManager.js",
      "line": 785,
      "context": "this.gameState.resumeTimer();"
    },
    {
      "object": "this",
      "method": "showTooltip",
      "file": "src/uiManager.js",
      "line": 786,
      "context": "this.showTooltip('⏱️ Timer resumed', 1500);"
    },
    {
      "object": "gameState",
      "method": "pauseTimer",
      "file": "src/uiManager.js",
      "line": 788,
      "context": "this.gameState.pauseTimer();"
    },
    {
      "object": "this",
      "method": "showTooltip",
      "file": "src/uiManager.js",
      "line": 789,
      "context": "this.showTooltip('⏸️ Timer paused', 1500);"
    },
    {
      "object": "this",
      "method": "resetGame",
      "file": "src/uiManager.js",
      "line": 799,
      "context": "this.resetGame();"
    },
    {
      "object": "this",
      "method": "showTooltip",
      "file": "src/uiManager.js",
      "line": 800,
      "context": "this.showTooltip('🔄 Game completely reset', 2000);"
    },
    {
      "object": "this",
      "method": "showTooltip",
      "file": "src/uiManager.js",
      "line": 815,
      "context": "this.showTooltip('🔧 Debug mode enabled', 2000);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/uiManager.js",
      "line": 816,
      "context": "console.log('Debug mode enabled - Game state:', this.gameState);"
    },
    {
      "object": "this",
      "method": "showTooltip",
      "file": "src/uiManager.js",
      "line": 818,
      "context": "this.showTooltip('🔧 Debug mode disabled', 2000);"
    },
    {
      "object": "gameState",
      "method": "exportSaveData",
      "file": "src/uiManager.js",
      "line": 832,
      "context": "const saveData = this.gameState.exportSaveData();"
    },
    {
      "object": "JSON",
      "method": "stringify",
      "file": "src/uiManager.js",
      "line": 833,
      "context": "const blob = new Blob([JSON.stringify(saveData, null, 2)], { type: 'application/json' });"
    },
    {
      "object": "URL",
      "method": "createObjectURL",
      "file": "src/uiManager.js",
      "line": 834,
      "context": "const url = URL.createObjectURL(blob);"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiManager.js",
      "line": 836,
      "context": "const a = document.createElement('a');"
    },
    {
      "object": "a",
      "method": "click",
      "file": "src/uiManager.js",
      "line": 839,
      "context": "a.click();"
    },
    {
      "object": "URL",
      "method": "revokeObjectURL",
      "file": "src/uiManager.js",
      "line": 841,
      "context": "URL.revokeObjectURL(url);"
    },
    {
      "object": "this",
      "method": "showTooltip",
      "file": "src/uiManager.js",
      "line": 842,
      "context": "this.showTooltip('💾 Save data exported successfully', 2000);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/uiManager.js",
      "line": 843,
      "context": "console.log('✅ Game data exported successfully');"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/uiManager.js",
      "line": 845,
      "context": "console.error('❌ Error exporting save data:', error);"
    },
    {
      "object": "this",
      "method": "showTooltip",
      "file": "src/uiManager.js",
      "line": 846,
      "context": "this.showTooltip('❌ Export failed: ' + error.message, 3000);"
    },
    {
      "object": "this",
      "method": "updateDisplay",
      "file": "src/uiManager.js",
      "line": 855,
      "context": "this.updateDisplay();"
    },
    {
      "object": "this",
      "method": "clearQuestion",
      "file": "src/uiManager.js",
      "line": 857,
      "context": "this.clearQuestion();"
    },
    {
      "object": "this",
      "method": "showTooltip",
      "file": "src/uiManager.js",
      "line": 859,
      "context": "this.showTooltip('🔄 Room refreshed', 1500);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/uiManager.js",
      "line": 861,
      "context": "console.error('Error refreshing room:', error);"
    },
    {
      "object": "this",
      "method": "showTooltip",
      "file": "src/uiManager.js",
      "line": 862,
      "context": "this.showTooltip('❌ Refresh failed', 2000);"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/uiManager.js",
      "line": 870,
      "context": "const mapCanvas = document.getElementById('map-canvas');"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 872,
      "context": "...document.querySelectorAll('.answer-btn'),"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 873,
      "context": "...document.querySelectorAll('button'),"
    },
    {
      "object": "focusableElements",
      "method": "indexOf",
      "file": "src/uiManager.js",
      "line": 879,
      "context": "const currentIndex = focusableElements.indexOf(document.activeElement);"
    },
    {
      "object": "this",
      "method": "showTooltip",
      "file": "src/uiManager.js",
      "line": 883,
      "context": "this.showTooltip(`Focus: ${focusableElements[nextIndex].tagName}`, 1000);"
    },
    {
      "object": "achievementManager",
      "method": "addEventListener",
      "file": "src/uiManager.js",
      "line": 899,
      "context": "this.achievementManager.addEventListener('achievementUnlocked', (event) => {"
    },
    {
      "object": "this",
      "method": "queueAchievementNotification",
      "file": "src/uiManager.js",
      "line": 900,
      "context": "this.queueAchievementNotification(event.detail);"
    },
    {
      "object": "achievementToggle",
      "method": "addEventListener",
      "file": "src/uiManager.js",
      "line": 905,
      "context": "this.elements.achievementToggle.addEventListener('click', () => {"
    },
    {
      "object": "this",
      "method": "toggleAchievementGallery",
      "file": "src/uiManager.js",
      "line": 906,
      "context": "this.toggleAchievementGallery();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/uiManager.js",
      "line": 910,
      "context": "console.log('Achievement notifications setup complete');"
    },
    {
      "object": "achievementQueue",
      "method": "push",
      "file": "src/uiManager.js",
      "line": 918,
      "context": "this.achievementQueue.push(achievementData);"
    },
    {
      "object": "this",
      "method": "processAchievementQueue",
      "file": "src/uiManager.js",
      "line": 922,
      "context": "this.processAchievementQueue();"
    },
    {
      "object": "achievementQueue",
      "method": "shift",
      "file": "src/uiManager.js",
      "line": 936,
      "context": "const achievementData = this.achievementQueue.shift();"
    },
    {
      "object": "this",
      "method": "showAchievementNotification",
      "file": "src/uiManager.js",
      "line": 938,
      "context": "await this.showAchievementNotification(achievementData);"
    },
    {
      "object": "this",
      "method": "processAchievementQueue",
      "file": "src/uiManager.js",
      "line": 942,
      "context": "this.processAchievementQueue();"
    },
    {
      "object": "this",
      "method": "createAchievementNotificationElement",
      "file": "src/uiManager.js",
      "line": 955,
      "context": "notification = this.createAchievementNotificationElement();"
    },
    {
      "object": "this",
      "method": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 961,
      "context": "<div class=\"achievement-icon\">${this.escapeHtml(achievement.icon)}</div>"
    },
    {
      "object": "this",
      "method": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 964,
      "context": "<div class=\"achievement-name\">${this.escapeHtml(achievement.name)}</div>"
    },
    {
      "object": "this",
      "method": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 965,
      "context": "<div class=\"achievement-description\">${this.escapeHtml(achievement.description)}</div>"
    },
    {
      "object": "this",
      "method": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 968,
      "context": "<div class=\"achievement-rarity achievement-rarity-${this.escapeHtml(achievement.rarity)}\">"
    },
    {
      "object": "this",
      "method": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 969,
      "context": "${this.escapeHtml(achievement.rarity).toUpperCase()}"
    },
    {
      "object": "animationManager",
      "method": "animateAchievementUnlock",
      "file": "src/uiManager.js",
      "line": 980,
      "context": "await this.animationManager.animateAchievementUnlock(achievement, notification);"
    },
    {
      "object": "this",
      "method": "hideAchievementNotification",
      "file": "src/uiManager.js",
      "line": 994,
      "context": "this.hideAchievementNotification(notification);"
    },
    {
      "object": "this",
      "method": "updateAchievementStats",
      "file": "src/uiManager.js",
      "line": 998,
      "context": "this.updateAchievementStats();"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/uiManager.js",
      "line": 1017,
      "context": "let notification = document.getElementById('achievement-notification');"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiManager.js",
      "line": 1020,
      "context": "notification = document.createElement('div');"
    },
    {
      "object": "body",
      "method": "appendChild",
      "file": "src/uiManager.js",
      "line": 1025,
      "context": "document.body.appendChild(notification);"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/uiManager.js",
      "line": 1038,
      "context": "console.warn('Achievement gallery element not found');"
    },
    {
      "object": "classList",
      "method": "contains",
      "file": "src/uiManager.js",
      "line": 1042,
      "context": "const isVisible = gallery.classList.contains('visible');"
    },
    {
      "object": "classList",
      "method": "remove",
      "file": "src/uiManager.js",
      "line": 1045,
      "context": "gallery.classList.remove('visible');"
    },
    {
      "object": "this",
      "method": "populateAchievementGallery",
      "file": "src/uiManager.js",
      "line": 1047,
      "context": "this.populateAchievementGallery();"
    },
    {
      "object": "classList",
      "method": "add",
      "file": "src/uiManager.js",
      "line": 1048,
      "context": "gallery.classList.add('visible');"
    },
    {
      "object": "achievementManager",
      "method": "getAllAchievements",
      "file": "src/uiManager.js",
      "line": 1060,
      "context": "const achievements = this.achievementManager.getAllAchievements();"
    },
    {
      "object": "achievementManager",
      "method": "getAchievementStats",
      "file": "src/uiManager.js",
      "line": 1061,
      "context": "const stats = this.achievementManager.getAchievementStats();"
    },
    {
      "object": "achievements",
      "method": "forEach",
      "file": "src/uiManager.js",
      "line": 1065,
      "context": "achievements.forEach(achievement => {"
    },
    {
      "object": "this",
      "method": "closest",
      "file": "src/uiManager.js",
      "line": 1081,
      "context": "<button class=\"achievement-close-btn\" onclick=\"this.closest('.achievement-gallery').classList.remove('visible')\">×</button>"
    },
    {
      "object": "classList",
      "method": "remove",
      "file": "src/uiManager.js",
      "line": 1081,
      "context": "<button class=\"achievement-close-btn\" onclick=\"this.closest('.achievement-gallery').classList.remove('visible')\">×</button>"
    },
    {
      "object": "Object",
      "method": "keys",
      "file": "src/uiManager.js",
      "line": 1087,
      "context": "Object.keys(categories).forEach(categoryName => {"
    },
    {
      "object": "categoryName",
      "method": "charAt",
      "file": "src/uiManager.js",
      "line": 1094,
      "context": "${categoryName.charAt(0).toUpperCase() + categoryName.slice(1)}"
    },
    {
      "object": "categoryName",
      "method": "slice",
      "file": "src/uiManager.js",
      "line": 1094,
      "context": "${categoryName.charAt(0).toUpperCase() + categoryName.slice(1)}"
    },
    {
      "object": "categoryAchievements",
      "method": "forEach",
      "file": "src/uiManager.js",
      "line": 1100,
      "context": "categoryAchievements.forEach(achievement => {"
    },
    {
      "object": "Math",
      "method": "max",
      "file": "src/uiManager.js",
      "line": 1101,
      "context": "const progressWidth = Math.max(achievement.progressPercentage, achievement.unlocked ? 100 : 0);"
    },
    {
      "object": "this",
      "method": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 1105,
      "context": "<div class=\"achievement-card ${unlockClass} achievement-rarity-${this.escapeHtml(achievement.rarity)}\">"
    },
    {
      "object": "this",
      "method": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 1106,
      "context": "<div class=\"achievement-icon\">${this.escapeHtml(achievement.icon)}</div>"
    },
    {
      "object": "this",
      "method": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 1108,
      "context": "<div class=\"achievement-name\">${this.escapeHtml(achievement.name)}</div>"
    },
    {
      "object": "this",
      "method": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 1109,
      "context": "<div class=\"achievement-description\">${this.escapeHtml(achievement.description)}</div>"
    },
    {
      "object": "this",
      "method": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 1115,
      "context": "<span class=\"achievement-rarity\">${this.escapeHtml(achievement.rarity)}</span>"
    },
    {
      "object": "achievementManager",
      "method": "getAchievementStats",
      "file": "src/uiManager.js",
      "line": 1141,
      "context": "const stats = this.achievementManager.getAchievementStats();"
    },
    {
      "object": "gameState",
      "method": "getStatistics",
      "file": "src/uiManager.js",
      "line": 1158,
      "context": "const stats = this.gameState.getStatistics();"
    },
    {
      "object": "this",
      "method": "updateRoomInfo",
      "file": "src/uiManager.js",
      "line": 1162,
      "context": "await this.updateRoomInfo();"
    },
    {
      "object": "this",
      "method": "updateScoreDisplay",
      "file": "src/uiManager.js",
      "line": 1163,
      "context": "await this.updateScoreDisplay();"
    },
    {
      "object": "this",
      "method": "updateNavigationOptions",
      "file": "src/uiManager.js",
      "line": 1164,
      "context": "await this.updateNavigationOptions();"
    },
    {
      "object": "this",
      "method": "updateGameControls",
      "file": "src/uiManager.js",
      "line": 1165,
      "context": "this.updateGameControls();"
    },
    {
      "object": "dataLoader",
      "method": "getRoom",
      "file": "src/uiManager.js",
      "line": 1171,
      "context": "const currentRoom = await this.dataLoader.getRoom(this.gameState.currentRoomId);"
    },
    {
      "object": "unlockedRooms",
      "method": "has",
      "file": "src/uiManager.js",
      "line": 1186,
      "context": "const isUnlocked = this.gameState.unlockedRooms.has(roomId);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/uiManager.js",
      "line": 1197,
      "context": "console.error('Failed to update room info:', error);"
    },
    {
      "object": "gameState",
      "method": "getStatistics",
      "file": "src/uiManager.js",
      "line": 1205,
      "context": "const stats = this.gameState.getStatistics();"
    },
    {
      "object": "Math",
      "method": "abs",
      "file": "src/uiManager.js",
      "line": 1212,
      "context": "if (Math.abs(scoreChange) > 0 && this.previousScore !== 0) {"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/uiManager.js",
      "line": 1213,
      "context": "console.log(`Animating score: ${this.previousScore} → ${stats.score}`);"
    },
    {
      "object": "animationManager",
      "method": "animateScoreIncrease",
      "file": "src/uiManager.js",
      "line": 1214,
      "context": "await this.animationManager.animateScoreIncrease("
    },
    {
      "object": "this",
      "method": "announceToScreenReader",
      "file": "src/uiManager.js",
      "line": 1222,
      "context": "this.announceToScreenReader(`Great! Score increased by ${scoreChange} points. Total score: ${stats.score}`);"
    },
    {
      "object": "this",
      "method": "announceToScreenReader",
      "file": "src/uiManager.js",
      "line": 1224,
      "context": "this.announceToScreenReader(`Score increased by ${scoreChange} points. Total score: ${stats.score}`);"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/uiManager.js",
      "line": 1231,
      "context": "console.warn('Score animation failed, using direct update:', error);"
    },
    {
      "object": "Math",
      "method": "abs",
      "file": "src/uiManager.js",
      "line": 1239,
      "context": "if (Math.abs(scoreChange) >= 50 && this.previousScore !== 0) {"
    },
    {
      "object": "this",
      "method": "announceToScreenReader",
      "file": "src/uiManager.js",
      "line": 1240,
      "context": "this.announceToScreenReader(`Score updated: ${stats.score} points`);"
    },
    {
      "object": "this",
      "method": "updateProgressIndicators",
      "file": "src/uiManager.js",
      "line": 1255,
      "context": "this.updateProgressIndicators();"
    },
    {
      "object": "gameState",
      "method": "getGameStatistics",
      "file": "src/uiManager.js",
      "line": 1263,
      "context": "const stats = this.gameState.getGameStatistics();"
    },
    {
      "object": "Math",
      "method": "round",
      "file": "src/uiManager.js",
      "line": 1266,
      "context": "const overallProgress = Math.round((stats.roomsExploredPercent + stats.accuracyPercent) / 2);"
    },
    {
      "object": "this",
      "method": "updateProgressBar",
      "file": "src/uiManager.js",
      "line": 1267,
      "context": "this.updateProgressBar('overall', overallProgress);"
    },
    {
      "object": "this",
      "method": "updateProgressBar",
      "file": "src/uiManager.js",
      "line": 1270,
      "context": "this.updateProgressBar('rooms', stats.roomsExploredPercent);"
    },
    {
      "object": "this",
      "method": "updateProgressBar",
      "file": "src/uiManager.js",
      "line": 1273,
      "context": "this.updateProgressBar('accuracy', stats.accuracyPercent);"
    },
    {
      "object": "gameState",
      "method": "getTimeInCurrentRoom",
      "file": "src/uiManager.js",
      "line": 1277,
      "context": "const timeInCurrentRoom = this.gameState.getTimeInCurrentRoom();"
    },
    {
      "object": "gameState",
      "method": "formatTime",
      "file": "src/uiManager.js",
      "line": 1278,
      "context": "this.elements.playTimeDisplay.textContent = this.gameState.formatTime(timeInCurrentRoom);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/uiManager.js",
      "line": 1282,
      "context": "console.error('Error updating progress indicators:', error);"
    },
    {
      "object": "Math",
      "method": "max",
      "file": "src/uiManager.js",
      "line": 1297,
      "context": "const clampedPercentage = Math.max(0, Math.min(100, percentage || 0));"
    },
    {
      "object": "Math",
      "method": "min",
      "file": "src/uiManager.js",
      "line": 1297,
      "context": "const clampedPercentage = Math.max(0, Math.min(100, percentage || 0));"
    },
    {
      "object": "classList",
      "method": "add",
      "file": "src/uiManager.js",
      "line": 1304,
      "context": "fillElement.classList.add('completed');"
    },
    {
      "object": "classList",
      "method": "remove",
      "file": "src/uiManager.js",
      "line": 1306,
      "context": "fillElement.classList.remove('completed');"
    },
    {
      "object": "gameState",
      "method": "getAvailableRooms",
      "file": "src/uiManager.js",
      "line": 1318,
      "context": "const availableRooms = await this.gameState.getAvailableRooms();"
    },
    {
      "object": "Promise",
      "method": "all",
      "file": "src/uiManager.js",
      "line": 1325,
      "context": "const roomButtons = await Promise.all("
    },
    {
      "object": "availableRooms",
      "method": "map",
      "file": "src/uiManager.js",
      "line": 1326,
      "context": "availableRooms.map(async (roomId) => {"
    },
    {
      "object": "dataLoader",
      "method": "getRoom",
      "file": "src/uiManager.js",
      "line": 1327,
      "context": "const room = await this.dataLoader.getRoom(roomId);"
    },
    {
      "object": "uiManager",
      "method": "moveToRoom",
      "file": "src/uiManager.js",
      "line": 1329,
      "context": "return `<button class=\"room-nav-btn\" onclick=\"uiManager.moveToRoom('${roomId}')\">${roomName}</button>`;"
    },
    {
      "object": "roomButtons",
      "method": "join",
      "file": "src/uiManager.js",
      "line": 1335,
      "context": "<div class=\"room-nav-buttons\">${roomButtons.join('')}</div>"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/uiManager.js",
      "line": 1339,
      "context": "console.error('Failed to update navigation options:', error);"
    },
    {
      "object": "dataLoader",
      "method": "getRoom",
      "file": "src/uiManager.js",
      "line": 1367,
      "context": "const currentRoom = await this.dataLoader.getRoom(this.gameState.currentRoomId);"
    },
    {
      "object": "quizEngine",
      "method": "presentQuestion",
      "file": "src/uiManager.js",
      "line": 1370,
      "context": "await this.quizEngine.presentQuestion(null, category);"
    },
    {
      "object": "this",
      "method": "updateGameControls",
      "file": "src/uiManager.js",
      "line": 1371,
      "context": "this.updateGameControls();"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1374,
      "context": "this.showFeedback(`Failed to present question: ${error.message}`, 'error');"
    },
    {
      "object": "this",
      "method": "displayAnswerOptions",
      "file": "src/uiManager.js",
      "line": 1406,
      "context": "this.displayAnswerOptions(questionData);"
    },
    {
      "object": "this",
      "method": "updateGameControls",
      "file": "src/uiManager.js",
      "line": 1417,
      "context": "this.updateGameControls();"
    },
    {
      "object": "this",
      "method": "clearFeedback",
      "file": "src/uiManager.js",
      "line": 1418,
      "context": "this.clearFeedback();"
    },
    {
      "object": "this",
      "method": "clearAnswerButtonListeners",
      "file": "src/uiManager.js",
      "line": 1428,
      "context": "this.clearAnswerButtonListeners();"
    },
    {
      "object": "answerButtons",
      "method": "setAttribute",
      "file": "src/uiManager.js",
      "line": 1431,
      "context": "this.elements.answerButtons.setAttribute('role', 'radiogroup');"
    },
    {
      "object": "answerButtons",
      "method": "setAttribute",
      "file": "src/uiManager.js",
      "line": 1432,
      "context": "this.elements.answerButtons.setAttribute('aria-label', 'Answer options');"
    },
    {
      "object": "answers",
      "method": "map",
      "file": "src/uiManager.js",
      "line": 1434,
      "context": "const buttonsHtml = questionData.answers.map((answer, index) =>"
    },
    {
      "object": "String",
      "method": "fromCharCode",
      "file": "src/uiManager.js",
      "line": 1441,
      "context": "aria-label=\"Option ${String.fromCharCode(65 + index)}: ${this.escapeHtml(answer)}\""
    },
    {
      "object": "this",
      "method": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 1441,
      "context": "aria-label=\"Option ${String.fromCharCode(65 + index)}: ${this.escapeHtml(answer)}\""
    },
    {
      "object": "String",
      "method": "fromCharCode",
      "file": "src/uiManager.js",
      "line": 1443,
      "context": "<span class=\"answer-letter\" aria-hidden=\"true\">${String.fromCharCode(65 + index)}.</span>"
    },
    {
      "object": "this",
      "method": "escapeHtml",
      "file": "src/uiManager.js",
      "line": 1444,
      "context": "<span class=\"answer-text\">${this.escapeHtml(answer)}</span>"
    },
    {
      "object": "this",
      "method": "setupAnswerButtonListeners",
      "file": "src/uiManager.js",
      "line": 1455,
      "context": "this.setupAnswerButtonListeners();"
    },
    {
      "object": "answerButtonListeners",
      "method": "forEach",
      "file": "src/uiManager.js",
      "line": 1463,
      "context": "this.answerButtonListeners.forEach(listener => {"
    },
    {
      "object": "element",
      "method": "removeEventListener",
      "file": "src/uiManager.js",
      "line": 1464,
      "context": "listener.element.removeEventListener(listener.event, listener.handler);"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 1474,
      "context": "const buttons = document.querySelectorAll('.answer-btn');"
    },
    {
      "object": "buttons",
      "method": "forEach",
      "file": "src/uiManager.js",
      "line": 1476,
      "context": "buttons.forEach((button, index) => {"
    },
    {
      "object": "this",
      "method": "selectAnswer",
      "file": "src/uiManager.js",
      "line": 1478,
      "context": "const clickHandler = () => this.selectAnswer(index);"
    },
    {
      "object": "button",
      "method": "addEventListener",
      "file": "src/uiManager.js",
      "line": 1479,
      "context": "button.addEventListener('click', clickHandler);"
    },
    {
      "object": "answerButtonListeners",
      "method": "push",
      "file": "src/uiManager.js",
      "line": 1480,
      "context": "this.answerButtonListeners.push({"
    },
    {
      "object": "e",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 1491,
      "context": "e.preventDefault();"
    },
    {
      "object": "this",
      "method": "focusAnswerButton",
      "file": "src/uiManager.js",
      "line": 1493,
      "context": "this.focusAnswerButton(nextIndex);"
    },
    {
      "object": "e",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 1497,
      "context": "e.preventDefault();"
    },
    {
      "object": "this",
      "method": "focusAnswerButton",
      "file": "src/uiManager.js",
      "line": 1499,
      "context": "this.focusAnswerButton(prevIndex);"
    },
    {
      "object": "e",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 1503,
      "context": "e.preventDefault();"
    },
    {
      "object": "this",
      "method": "selectAnswer",
      "file": "src/uiManager.js",
      "line": 1504,
      "context": "this.selectAnswer(index);"
    },
    {
      "object": "button",
      "method": "addEventListener",
      "file": "src/uiManager.js",
      "line": 1508,
      "context": "button.addEventListener('keydown', keyHandler);"
    },
    {
      "object": "answerButtonListeners",
      "method": "push",
      "file": "src/uiManager.js",
      "line": 1509,
      "context": "this.answerButtonListeners.push({"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiManager.js",
      "line": 1521,
      "context": "const div = document.createElement('div');"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/uiManager.js",
      "line": 1531,
      "context": "console.warn('setupAnswerButtonKeyNavigation is deprecated. Use setupAnswerButtonListeners instead.');"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 1540,
      "context": "const buttons = document.querySelectorAll('.answer-btn');"
    },
    {
      "object": "buttons",
      "method": "forEach",
      "file": "src/uiManager.js",
      "line": 1542,
      "context": "buttons.forEach((btn, i) => {"
    },
    {
      "object": "btn",
      "method": "setAttribute",
      "file": "src/uiManager.js",
      "line": 1544,
      "context": "btn.setAttribute('aria-checked', i === index ? 'true' : 'false');"
    },
    {
      "object": "btn",
      "method": "focus",
      "file": "src/uiManager.js",
      "line": 1546,
      "context": "btn.focus();"
    },
    {
      "object": "this",
      "method": "checkQuestionActive",
      "file": "src/uiManager.js",
      "line": 1555,
      "context": "if (!this.checkQuestionActive() || !this.currentQuestion) return;"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/uiManager.js",
      "line": 1559,
      "context": "console.warn('Answer already being processed, ignoring click');"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 1565,
      "context": "const answerButtons = document.querySelectorAll('.answer-btn');"
    },
    {
      "object": "this",
      "method": "disableAnswerButtons",
      "file": "src/uiManager.js",
      "line": 1569,
      "context": "this.disableAnswerButtons();"
    },
    {
      "object": "quizEngine",
      "method": "validateAnswer",
      "file": "src/uiManager.js",
      "line": 1572,
      "context": "const result = await this.quizEngine.validateAnswer(answerIndex);"
    },
    {
      "object": "animationManager",
      "method": "animateAnswerFeedback",
      "file": "src/uiManager.js",
      "line": 1576,
      "context": "await this.animationManager.animateAnswerFeedback(clickedButton, result.isCorrect);"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1580,
      "context": "this.showFeedback(`Error validating answer: ${error.message}`, 'error');"
    },
    {
      "object": "this",
      "method": "enableAnswerButtons",
      "file": "src/uiManager.js",
      "line": 1581,
      "context": "this.enableAnswerButtons();"
    },
    {
      "object": "this",
      "method": "checkQuestionActive",
      "file": "src/uiManager.js",
      "line": 1590,
      "context": "if (this.checkQuestionActive() && this.quizEngine && this.currentQuestion) {"
    },
    {
      "object": "this",
      "method": "showQuestionHint",
      "file": "src/uiManager.js",
      "line": 1591,
      "context": "this.showQuestionHint();"
    },
    {
      "object": "this",
      "method": "showSmartHint",
      "file": "src/uiManager.js",
      "line": 1596,
      "context": "this.showSmartHint();"
    },
    {
      "object": "quizEngine",
      "method": "getHint",
      "file": "src/uiManager.js",
      "line": 1603,
      "context": "const hint = this.quizEngine.getHint();"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1605,
      "context": "this.showFeedback(`💡 Hint: ${hint}`, 'info');"
    },
    {
      "object": "this",
      "method": "generateQuestionSmartHint",
      "file": "src/uiManager.js",
      "line": 1608,
      "context": "const smartHint = this.generateQuestionSmartHint();"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1609,
      "context": "this.showFeedback(`💡 Smart Hint: ${smartHint}`, 'info');"
    },
    {
      "object": "category",
      "method": "toLowerCase",
      "file": "src/uiManager.js",
      "line": 1652,
      "context": "const categoryHint = categoryHints[category.toLowerCase()] || categoryHints['general'];"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/uiManager.js",
      "line": 1654,
      "context": "const randomDifficultyHint = difficultyHints[Math.floor(Math.random() * difficultyHints.length)];"
    },
    {
      "object": "Math",
      "method": "random",
      "file": "src/uiManager.js",
      "line": 1654,
      "context": "const randomDifficultyHint = difficultyHints[Math.floor(Math.random() * difficultyHints.length)];"
    },
    {
      "object": "gameState",
      "method": "getGameStatistics",
      "file": "src/uiManager.js",
      "line": 1663,
      "context": "const stats = this.gameState.getGameStatistics();"
    },
    {
      "object": "gameState",
      "method": "getTimeInCurrentRoom",
      "file": "src/uiManager.js",
      "line": 1667,
      "context": "const isStuck = this.gameState.getTimeInCurrentRoom() > 120000; // 2 minutes"
    },
    {
      "object": "this",
      "method": "getNewPlayerHints",
      "file": "src/uiManager.js",
      "line": 1672,
      "context": "hint = this.getNewPlayerHints();"
    },
    {
      "object": "this",
      "method": "getLowAccuracyHints",
      "file": "src/uiManager.js",
      "line": 1674,
      "context": "hint = this.getLowAccuracyHints();"
    },
    {
      "object": "this",
      "method": "getStuckPlayerHints",
      "file": "src/uiManager.js",
      "line": 1676,
      "context": "hint = this.getStuckPlayerHints();"
    },
    {
      "object": "this",
      "method": "getNavigationHints",
      "file": "src/uiManager.js",
      "line": 1678,
      "context": "hint = this.getNavigationHints();"
    },
    {
      "object": "this",
      "method": "getGeneralGameplayHints",
      "file": "src/uiManager.js",
      "line": 1680,
      "context": "hint = this.getGeneralGameplayHints();"
    },
    {
      "object": "this",
      "method": "showTooltip",
      "file": "src/uiManager.js",
      "line": 1683,
      "context": "this.showTooltip(`💡 Smart Tip: ${hint}`, 4000);"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/uiManager.js",
      "line": 1700,
      "context": "return hints[Math.floor(Math.random() * hints.length)];"
    },
    {
      "object": "Math",
      "method": "random",
      "file": "src/uiManager.js",
      "line": 1700,
      "context": "return hints[Math.floor(Math.random() * hints.length)];"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/uiManager.js",
      "line": 1717,
      "context": "return hints[Math.floor(Math.random() * hints.length)];"
    },
    {
      "object": "Math",
      "method": "random",
      "file": "src/uiManager.js",
      "line": 1717,
      "context": "return hints[Math.floor(Math.random() * hints.length)];"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/uiManager.js",
      "line": 1734,
      "context": "return hints[Math.floor(Math.random() * hints.length)];"
    },
    {
      "object": "Math",
      "method": "random",
      "file": "src/uiManager.js",
      "line": 1734,
      "context": "return hints[Math.floor(Math.random() * hints.length)];"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/uiManager.js",
      "line": 1751,
      "context": "return hints[Math.floor(Math.random() * hints.length)];"
    },
    {
      "object": "Math",
      "method": "random",
      "file": "src/uiManager.js",
      "line": 1751,
      "context": "return hints[Math.floor(Math.random() * hints.length)];"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/uiManager.js",
      "line": 1768,
      "context": "return hints[Math.floor(Math.random() * hints.length)];"
    },
    {
      "object": "Math",
      "method": "random",
      "file": "src/uiManager.js",
      "line": 1768,
      "context": "return hints[Math.floor(Math.random() * hints.length)];"
    },
    {
      "object": "this",
      "method": "checkQuestionActive",
      "file": "src/uiManager.js",
      "line": 1775,
      "context": "if (!this.checkQuestionActive() || !this.quizEngine) return;"
    },
    {
      "object": "quizEngine",
      "method": "skipQuestion",
      "file": "src/uiManager.js",
      "line": 1777,
      "context": "const result = this.quizEngine.skipQuestion();"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1779,
      "context": "this.showFeedback(`Question skipped. Penalty: ${Math.abs(result.pointsEarned)} points`, 'warning');"
    },
    {
      "object": "Math",
      "method": "abs",
      "file": "src/uiManager.js",
      "line": 1779,
      "context": "this.showFeedback(`Question skipped. Penalty: ${Math.abs(result.pointsEarned)} points`, 'warning');"
    },
    {
      "object": "this",
      "method": "clearQuestion",
      "file": "src/uiManager.js",
      "line": 1780,
      "context": "this.clearQuestion();"
    },
    {
      "object": "gameState",
      "method": "moveToRoom",
      "file": "src/uiManager.js",
      "line": 1789,
      "context": "await this.gameState.moveToRoom(roomId);"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1792,
      "context": "this.showFeedback(`Cannot move to ${roomId}: ${error.message}`, 'error');"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/uiManager.js",
      "line": 1800,
      "context": "console.log(`Room changed: ${data.from} -> ${data.to}`);"
    },
    {
      "object": "this",
      "method": "updateRoomInfo",
      "file": "src/uiManager.js",
      "line": 1801,
      "context": "await this.updateRoomInfo();"
    },
    {
      "object": "this",
      "method": "updateNavigationOptions",
      "file": "src/uiManager.js",
      "line": 1802,
      "context": "await this.updateNavigationOptions();"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1803,
      "context": "this.showFeedback(`Moved to ${data.room.name}`, 'success');"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 1810,
      "context": "const answerButtons = document.querySelectorAll('.answer-btn');"
    },
    {
      "object": "answerButtons",
      "method": "forEach",
      "file": "src/uiManager.js",
      "line": 1813,
      "context": "answerButtons.forEach((btn, index) => {"
    },
    {
      "object": "classList",
      "method": "remove",
      "file": "src/uiManager.js",
      "line": 1814,
      "context": "btn.classList.remove('answer-correct', 'answer-incorrect');"
    },
    {
      "object": "classList",
      "method": "add",
      "file": "src/uiManager.js",
      "line": 1817,
      "context": "btn.classList.add('answer-correct');"
    },
    {
      "object": "classList",
      "method": "add",
      "file": "src/uiManager.js",
      "line": 1819,
      "context": "btn.classList.add('answer-incorrect');"
    },
    {
      "object": "String",
      "method": "fromCharCode",
      "file": "src/uiManager.js",
      "line": 1826,
      "context": ": `Incorrect. The correct answer was ${String.fromCharCode(65 + data.correctAnswer)}.`;"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1828,
      "context": "this.showFeedback(feedback, data.isCorrect ? 'success' : 'error');"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1832,
      "context": "this.showFeedback(`💡 ${data.explanation}`, 'info');"
    },
    {
      "object": "this",
      "method": "updateScoreDisplay",
      "file": "src/uiManager.js",
      "line": 1837,
      "context": "this.updateScoreDisplay();"
    },
    {
      "object": "this",
      "method": "clearQuestion",
      "file": "src/uiManager.js",
      "line": 1841,
      "context": "this.clearQuestion();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/uiManager.js",
      "line": 1852,
      "context": "console.log('Question answered in GameState:', data);"
    },
    {
      "object": "this",
      "method": "updateScoreDisplay",
      "file": "src/uiManager.js",
      "line": 1855,
      "context": "this.updateScoreDisplay();"
    },
    {
      "object": "this",
      "method": "updateNavigationOptions",
      "file": "src/uiManager.js",
      "line": 1860,
      "context": "this.updateNavigationOptions();"
    },
    {
      "object": "Math",
      "method": "ceil",
      "file": "src/uiManager.js",
      "line": 1884,
      "context": "const seconds = Math.ceil(data.timeRemaining / 1000);"
    },
    {
      "object": "this",
      "method": "announceToScreenReader",
      "file": "src/uiManager.js",
      "line": 1903,
      "context": "this.announceToScreenReader('10 seconds remaining', 'assertive');"
    },
    {
      "object": "this",
      "method": "announceToScreenReader",
      "file": "src/uiManager.js",
      "line": 1906,
      "context": "this.announceToScreenReader('5 seconds remaining', 'assertive');"
    },
    {
      "object": "this",
      "method": "announceToScreenReader",
      "file": "src/uiManager.js",
      "line": 1909,
      "context": "this.announceToScreenReader('1 second remaining', 'assertive');"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1921,
      "context": "this.showFeedback('⏰ Time\\'s up! No points awarded.', 'warning');"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1925,
      "context": "this.showFeedback(`💡 ${data.explanation}`, 'info');"
    },
    {
      "object": "this",
      "method": "clearQuestion",
      "file": "src/uiManager.js",
      "line": 1930,
      "context": "this.clearQuestion();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/uiManager.js",
      "line": 1938,
      "context": "console.log('Game completed:', data);"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1941,
      "context": "this.showFeedback(`🎉 Congratulations! Game completed!`, 'success');"
    },
    {
      "object": "this",
      "method": "showVictoryScreen",
      "file": "src/uiManager.js",
      "line": 1945,
      "context": "this.showVictoryScreen(data);"
    },
    {
      "object": "gameState",
      "method": "saveGame",
      "file": "src/uiManager.js",
      "line": 1953,
      "context": "const success = this.gameState.saveGame();"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1955,
      "context": "this.showFeedback('Game saved successfully!', 'success');"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1957,
      "context": "this.showFeedback('Failed to save game.', 'error');"
    },
    {
      "object": "gameState",
      "method": "loadGame",
      "file": "src/uiManager.js",
      "line": 1965,
      "context": "const success = this.gameState.loadGame();"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1967,
      "context": "this.showFeedback('Game loaded successfully!', 'success');"
    },
    {
      "object": "this",
      "method": "updateDisplay",
      "file": "src/uiManager.js",
      "line": 1968,
      "context": "this.updateDisplay();"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1970,
      "context": "this.showFeedback('No saved game found.', 'info');"
    },
    {
      "object": "gameState",
      "method": "resetGame",
      "file": "src/uiManager.js",
      "line": 1979,
      "context": "this.gameState.resetGame();"
    },
    {
      "object": "this",
      "method": "clearQuestion",
      "file": "src/uiManager.js",
      "line": 1980,
      "context": "this.clearQuestion();"
    },
    {
      "object": "this",
      "method": "updateDisplay",
      "file": "src/uiManager.js",
      "line": 1981,
      "context": "this.updateDisplay();"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 1982,
      "context": "this.showFeedback('Game reset successfully!', 'info');"
    },
    {
      "object": "this",
      "method": "updateGameControls",
      "file": "src/uiManager.js",
      "line": 2005,
      "context": "this.updateGameControls();"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 2012,
      "context": "const buttons = document.querySelectorAll('.answer-btn');"
    },
    {
      "object": "buttons",
      "method": "forEach",
      "file": "src/uiManager.js",
      "line": 2013,
      "context": "buttons.forEach(btn => btn.disabled = true);"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 2020,
      "context": "const buttons = document.querySelectorAll('.answer-btn');"
    },
    {
      "object": "buttons",
      "method": "forEach",
      "file": "src/uiManager.js",
      "line": 2021,
      "context": "buttons.forEach(btn => btn.disabled = false);"
    },
    {
      "object": "this",
      "method": "clearFeedback",
      "file": "src/uiManager.js",
      "line": 2041,
      "context": "this.clearFeedback();"
    },
    {
      "object": "Object",
      "method": "keys",
      "file": "src/uiManager.js",
      "line": 2062,
      "context": "elementsFound: Object.keys(this.elements).filter(key => this.elements[key] !== null)"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/uiManager.js",
      "line": 2071,
      "context": "console.error('Victory screen element not found');"
    },
    {
      "object": "gameState",
      "method": "getGameStatistics",
      "file": "src/uiManager.js",
      "line": 2077,
      "context": "const stats = this.gameState.getGameStatistics();"
    },
    {
      "object": "this",
      "method": "updateVictoryScreenContent",
      "file": "src/uiManager.js",
      "line": 2080,
      "context": "this.updateVictoryScreenContent(stats, data);"
    },
    {
      "object": "classList",
      "method": "add",
      "file": "src/uiManager.js",
      "line": 2084,
      "context": "this.elements.victoryScreen.classList.add('show');"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/uiManager.js",
      "line": 2086,
      "context": "console.log('Victory screen displayed');"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/uiManager.js",
      "line": 2088,
      "context": "console.error('Error showing victory screen:', error);"
    },
    {
      "object": "gameState",
      "method": "getGameStatistics",
      "file": "src/uiManager.js",
      "line": 2097,
      "context": "* @param {Object} stats - Game statistics from gameState.getGameStatistics()"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/uiManager.js",
      "line": 2102,
      "context": "console.log('Updating victory screen with stats:', stats);"
    },
    {
      "object": "finalScore",
      "method": "toLocaleString",
      "file": "src/uiManager.js",
      "line": 2106,
      "context": "this.elements.victoryFinalScore.textContent = stats.finalScore.toLocaleString();"
    },
    {
      "object": "baseScore",
      "method": "toLocaleString",
      "file": "src/uiManager.js",
      "line": 2123,
      "context": "this.elements.victoryBaseScore.textContent = stats.baseScore.toLocaleString();"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/uiManager.js",
      "line": 2135,
      "context": "const perfectBonusItem = document.getElementById('victory-perfect-bonus-item');"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/uiManager.js",
      "line": 2147,
      "context": "const speedBonusItem = document.getElementById('victory-speed-bonus-item');"
    },
    {
      "object": "achievementManager",
      "method": "getTotalPoints",
      "file": "src/uiManager.js",
      "line": 2161,
      "context": "const achievementPoints = this.achievementManager ? this.achievementManager.getTotalPoints() : 0;"
    },
    {
      "object": "this",
      "method": "updateAchievementIcons",
      "file": "src/uiManager.js",
      "line": 2166,
      "context": "this.updateAchievementIcons();"
    },
    {
      "object": "this",
      "method": "updatePerformanceGrade",
      "file": "src/uiManager.js",
      "line": 2169,
      "context": "this.updatePerformanceGrade(stats);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/uiManager.js",
      "line": 2172,
      "context": "console.error('Error updating victory screen content:', error);"
    },
    {
      "object": "achievementManager",
      "method": "getUnlockedAchievements",
      "file": "src/uiManager.js",
      "line": 2185,
      "context": "const unlockedAchievements = this.achievementManager.getUnlockedAchievements();"
    },
    {
      "object": "unlockedAchievements",
      "method": "slice",
      "file": "src/uiManager.js",
      "line": 2193,
      "context": "unlockedAchievements.slice(0, 6).forEach(achievement => {"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiManager.js",
      "line": 2194,
      "context": "const iconElement = document.createElement('div');"
    },
    {
      "object": "victoryAchievementIcons",
      "method": "appendChild",
      "file": "src/uiManager.js",
      "line": 2201,
      "context": "this.elements.victoryAchievementIcons.appendChild(iconElement);"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiManager.js",
      "line": 2205,
      "context": "const moreElement = document.createElement('div');"
    },
    {
      "object": "victoryAchievementIcons",
      "method": "appendChild",
      "file": "src/uiManager.js",
      "line": 2209,
      "context": "this.elements.victoryAchievementIcons.appendChild(moreElement);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/uiManager.js",
      "line": 2213,
      "context": "console.error('Error updating achievement icons:', error);"
    },
    {
      "object": "this",
      "method": "calculatePerformanceGrade",
      "file": "src/uiManager.js",
      "line": 2226,
      "context": "const grade = this.calculatePerformanceGrade(stats);"
    },
    {
      "object": "this",
      "method": "getGradeInfo",
      "file": "src/uiManager.js",
      "line": 2227,
      "context": "const gradeInfo = this.getGradeInfo(grade, stats);"
    },
    {
      "object": "grade",
      "method": "toLowerCase",
      "file": "src/uiManager.js",
      "line": 2230,
      "context": "this.elements.victoryGrade.className = `completion-grade grade-${grade.toLowerCase()}`;"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/uiManager.js",
      "line": 2233,
      "context": "console.error('Error updating performance grade:', error);"
    },
    {
      "object": "classList",
      "method": "remove",
      "file": "src/uiManager.js",
      "line": 2284,
      "context": "this.elements.victoryScreen.classList.remove('show');"
    },
    {
      "object": "this",
      "method": "hideVictoryScreen",
      "file": "src/uiManager.js",
      "line": 2295,
      "context": "this.hideVictoryScreen();"
    },
    {
      "object": "this",
      "method": "resetGame",
      "file": "src/uiManager.js",
      "line": 2297,
      "context": "this.resetGame();"
    },
    {
      "object": "achievementManager",
      "method": "getAllAchievements",
      "file": "src/uiManager.js",
      "line": 2308,
      "context": "const achievements = this.achievementManager.getAllAchievements();"
    },
    {
      "object": "achievementManager",
      "method": "getAchievementStats",
      "file": "src/uiManager.js",
      "line": 2309,
      "context": "const stats = this.achievementManager.getAchievementStats();"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2313,
      "context": "this.showFeedback(message, 'info', 4000);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/uiManager.js",
      "line": 2315,
      "context": "console.log('Available achievements:', achievements);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/uiManager.js",
      "line": 2317,
      "context": "console.log('Achievement display not fully implemented yet');"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2318,
      "context": "this.showFeedback('🏆 Achievement display coming soon!', 'info');"
    },
    {
      "object": "gameState",
      "method": "getGameStatistics",
      "file": "src/uiManager.js",
      "line": 2328,
      "context": "const stats = this.gameState.getGameStatistics();"
    },
    {
      "object": "finalScore",
      "method": "toLocaleString",
      "file": "src/uiManager.js",
      "line": 2330,
      "context": "`🏆 Final Score: ${stats.finalScore.toLocaleString()}\\n` +"
    },
    {
      "object": "gameState",
      "method": "formatTime",
      "file": "src/uiManager.js",
      "line": 2333,
      "context": "`⏱️ Time: ${this.gameState.formatTime(stats.totalTime)}\\n\\n` +"
    },
    {
      "object": "navigator",
      "method": "share",
      "file": "src/uiManager.js",
      "line": 2337,
      "context": "navigator.share({"
    },
    {
      "object": "clipboard",
      "method": "writeText",
      "file": "src/uiManager.js",
      "line": 2342,
      "context": "navigator.clipboard.writeText(shareText).then(() => {"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2343,
      "context": "this.showFeedback('Results copied to clipboard!', 'success');"
    },
    {
      "object": "this",
      "method": "fallbackShare",
      "file": "src/uiManager.js",
      "line": 2345,
      "context": "this.fallbackShare(shareText);"
    },
    {
      "object": "this",
      "method": "fallbackShare",
      "file": "src/uiManager.js",
      "line": 2348,
      "context": "this.fallbackShare(shareText);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/uiManager.js",
      "line": 2351,
      "context": "console.error('Error sharing results:', error);"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2352,
      "context": "this.showFeedback('Unable to share results', 'error');"
    },
    {
      "object": "classList",
      "method": "remove",
      "file": "src/uiManager.js",
      "line": 2365,
      "context": "this.elements.victoryScreen.classList.remove('show');"
    },
    {
      "object": "classList",
      "method": "add",
      "file": "src/uiManager.js",
      "line": 2366,
      "context": "this.elements.victoryScreen.classList.add('hide');"
    },
    {
      "object": "classList",
      "method": "remove",
      "file": "src/uiManager.js",
      "line": 2370,
      "context": "this.elements.victoryScreen.classList.remove('hide');"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/uiManager.js",
      "line": 2373,
      "context": "console.log('Victory screen hidden');"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/uiManager.js",
      "line": 2375,
      "context": "console.error('Error hiding victory screen:', error);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/uiManager.js",
      "line": 2384,
      "context": "console.log('Play again requested');"
    },
    {
      "object": "this",
      "method": "hideVictoryScreen",
      "file": "src/uiManager.js",
      "line": 2387,
      "context": "this.hideVictoryScreen();"
    },
    {
      "object": "this",
      "method": "resetGame",
      "file": "src/uiManager.js",
      "line": 2391,
      "context": "this.resetGame();"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2392,
      "context": "this.showFeedback('🎮 Starting new game...', 'info');"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/uiManager.js",
      "line": 2396,
      "context": "console.error('Error handling play again:', error);"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2397,
      "context": "this.showFeedback('❌ Error starting new game', 'error');"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/uiManager.js",
      "line": 2406,
      "context": "console.log('View achievements requested');"
    },
    {
      "object": "achievementManager",
      "method": "showAchievementGallery",
      "file": "src/uiManager.js",
      "line": 2409,
      "context": "this.achievementManager.showAchievementGallery();"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2411,
      "context": "this.showFeedback('🏆 Achievement gallery coming soon!', 'info');"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/uiManager.js",
      "line": 2415,
      "context": "console.error('Error viewing achievements:', error);"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2416,
      "context": "this.showFeedback('❌ Error loading achievements', 'error');"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/uiManager.js",
      "line": 2425,
      "context": "console.log('Share results requested');"
    },
    {
      "object": "gameState",
      "method": "getGameStatistics",
      "file": "src/uiManager.js",
      "line": 2427,
      "context": "const stats = this.gameState.getGameStatistics();"
    },
    {
      "object": "this",
      "method": "calculatePerformanceGrade",
      "file": "src/uiManager.js",
      "line": 2428,
      "context": "const grade = this.calculatePerformanceGrade(stats);"
    },
    {
      "object": "finalScore",
      "method": "toLocaleString",
      "file": "src/uiManager.js",
      "line": 2431,
      "context": "`🏆 Final Score: ${stats.finalScore.toLocaleString()}\\n` +"
    },
    {
      "object": "navigator",
      "method": "share",
      "file": "src/uiManager.js",
      "line": 2440,
      "context": "navigator.share({"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2444,
      "context": "this.showFeedback('✅ Results shared successfully!', 'success');"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/uiManager.js",
      "line": 2446,
      "context": "console.log('Share failed, falling back to clipboard');"
    },
    {
      "object": "this",
      "method": "copyToClipboard",
      "file": "src/uiManager.js",
      "line": 2447,
      "context": "this.copyToClipboard(shareText);"
    },
    {
      "object": "this",
      "method": "copyToClipboard",
      "file": "src/uiManager.js",
      "line": 2451,
      "context": "this.copyToClipboard(shareText);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/uiManager.js",
      "line": 2455,
      "context": "console.error('Error sharing results:', error);"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2456,
      "context": "this.showFeedback('❌ Error sharing results', 'error');"
    },
    {
      "object": "clipboard",
      "method": "writeText",
      "file": "src/uiManager.js",
      "line": 2466,
      "context": "navigator.clipboard.writeText(text).then(() => {"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2467,
      "context": "this.showFeedback('📋 Results copied to clipboard!', 'success');"
    },
    {
      "object": "this",
      "method": "fallbackCopyToClipboard",
      "file": "src/uiManager.js",
      "line": 2469,
      "context": "this.fallbackCopyToClipboard(text);"
    },
    {
      "object": "this",
      "method": "fallbackCopyToClipboard",
      "file": "src/uiManager.js",
      "line": 2472,
      "context": "this.fallbackCopyToClipboard(text);"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiManager.js",
      "line": 2482,
      "context": "const textArea = document.createElement('textarea');"
    },
    {
      "object": "body",
      "method": "appendChild",
      "file": "src/uiManager.js",
      "line": 2487,
      "context": "document.body.appendChild(textArea);"
    },
    {
      "object": "textArea",
      "method": "focus",
      "file": "src/uiManager.js",
      "line": 2488,
      "context": "textArea.focus();"
    },
    {
      "object": "textArea",
      "method": "select",
      "file": "src/uiManager.js",
      "line": 2489,
      "context": "textArea.select();"
    },
    {
      "object": "document",
      "method": "execCommand",
      "file": "src/uiManager.js",
      "line": 2491,
      "context": "const successful = document.execCommand('copy');"
    },
    {
      "object": "body",
      "method": "removeChild",
      "file": "src/uiManager.js",
      "line": 2492,
      "context": "document.body.removeChild(textArea);"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2495,
      "context": "this.showFeedback('📋 Results copied to clipboard!', 'success');"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2497,
      "context": "this.showFeedback('❌ Could not copy results', 'error');"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/uiManager.js",
      "line": 2500,
      "context": "console.error('Fallback copy failed:', error);"
    },
    {
      "object": "this",
      "method": "showFeedback",
      "file": "src/uiManager.js",
      "line": 2501,
      "context": "this.showFeedback('❌ Copy not supported in this browser', 'error');"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/uiManager.js",
      "line": 2512,
      "context": "const existingTooltip = document.getElementById('game-tooltip');"
    },
    {
      "object": "existingTooltip",
      "method": "remove",
      "file": "src/uiManager.js",
      "line": 2514,
      "context": "existingTooltip.remove();"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiManager.js",
      "line": 2518,
      "context": "const tooltip = document.createElement('div');"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/uiManager.js",
      "line": 2538,
      "context": "if (!document.getElementById('tooltip-styles')) {"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiManager.js",
      "line": 2540,
      "context": "const style = document.createElement('style');"
    },
    {
      "object": "head",
      "method": "appendChild",
      "file": "src/uiManager.js",
      "line": 2550,
      "context": "document.head.appendChild(style);"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/uiManager.js",
      "line": 2552,
      "context": "console.warn('UIManager: Failed to inject tooltip styles:', error);"
    },
    {
      "object": "body",
      "method": "appendChild",
      "file": "src/uiManager.js",
      "line": 2555,
      "context": "document.body.appendChild(tooltip);"
    },
    {
      "object": "tooltip",
      "method": "remove",
      "file": "src/uiManager.js",
      "line": 2560,
      "context": "tooltip.remove();"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/uiManager.js",
      "line": 2573,
      "context": "const loadingId = `skeleton-${Date.now()}`;"
    },
    {
      "object": "loadingStates",
      "method": "set",
      "file": "src/uiManager.js",
      "line": 2574,
      "context": "this.loadingStates.set(container, loadingId);"
    },
    {
      "object": "container",
      "method": "setAttribute",
      "file": "src/uiManager.js",
      "line": 2578,
      "context": "container.setAttribute('data-original-content', originalContent);"
    },
    {
      "object": "container",
      "method": "setAttribute",
      "file": "src/uiManager.js",
      "line": 2629,
      "context": "container.setAttribute('aria-busy', 'true');"
    },
    {
      "object": "loadingStates",
      "method": "get",
      "file": "src/uiManager.js",
      "line": 2639,
      "context": "const loadingId = this.loadingStates.get(container);"
    },
    {
      "object": "container",
      "method": "getAttribute",
      "file": "src/uiManager.js",
      "line": 2642,
      "context": "const originalContent = container.getAttribute('data-original-content');"
    },
    {
      "object": "container",
      "method": "removeAttribute",
      "file": "src/uiManager.js",
      "line": 2645,
      "context": "container.removeAttribute('data-original-content');"
    },
    {
      "object": "container",
      "method": "removeAttribute",
      "file": "src/uiManager.js",
      "line": 2648,
      "context": "container.removeAttribute('aria-busy');"
    },
    {
      "object": "loadingStates",
      "method": "delete",
      "file": "src/uiManager.js",
      "line": 2649,
      "context": "this.loadingStates.delete(container);"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/uiManager.js",
      "line": 2658,
      "context": "const element = document.getElementById(elementId);"
    },
    {
      "object": "this",
      "method": "showSkeletonLoading",
      "file": "src/uiManager.js",
      "line": 2660,
      "context": "this.showSkeletonLoading(element, type);"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/uiManager.js",
      "line": 2669,
      "context": "const element = document.getElementById(elementId);"
    },
    {
      "object": "this",
      "method": "hideSkeletonLoading",
      "file": "src/uiManager.js",
      "line": 2671,
      "context": "this.hideSkeletonLoading(element);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/uiManager.js",
      "line": 2682,
      "context": "console.log('🎮 Haptic feedback:', this.hapticSupported ? 'supported' : 'not supported');"
    },
    {
      "object": "navigator",
      "method": "vibrate",
      "file": "src/uiManager.js",
      "line": 2708,
      "context": "navigator.vibrate(pattern);"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/uiManager.js",
      "line": 2710,
      "context": "console.warn('Haptic feedback failed:', error);"
    },
    {
      "object": "classList",
      "method": "add",
      "file": "src/uiManager.js",
      "line": 2723,
      "context": "element.classList.add('micro-interaction');"
    },
    {
      "object": "this",
      "method": "addSwordGleam",
      "file": "src/uiManager.js",
      "line": 2726,
      "context": "sword: () => this.addSwordGleam(element),"
    },
    {
      "object": "this",
      "method": "addShieldPulse",
      "file": "src/uiManager.js",
      "line": 2727,
      "context": "shield: () => this.addShieldPulse(element),"
    },
    {
      "object": "this",
      "method": "addCrownFloat",
      "file": "src/uiManager.js",
      "line": 2728,
      "context": "crown: () => this.addCrownFloat(element),"
    },
    {
      "object": "this",
      "method": "addGemSparkle",
      "file": "src/uiManager.js",
      "line": 2729,
      "context": "gem: () => this.addGemSparkle(element),"
    },
    {
      "object": "this",
      "method": "addSparkleEffect",
      "file": "src/uiManager.js",
      "line": 2730,
      "context": "sparkle: () => this.addSparkleEffect(element)"
    },
    {
      "object": "element",
      "method": "addEventListener",
      "file": "src/uiManager.js",
      "line": 2744,
      "context": "element.addEventListener('mouseenter', () => {"
    },
    {
      "object": "element",
      "method": "querySelector",
      "file": "src/uiManager.js",
      "line": 2745,
      "context": "if (!element.querySelector('.sword-gleam')) {"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiManager.js",
      "line": 2746,
      "context": "const gleam = document.createElement('span');"
    },
    {
      "object": "element",
      "method": "appendChild",
      "file": "src/uiManager.js",
      "line": 2760,
      "context": "element.appendChild(gleam);"
    },
    {
      "object": "gleam",
      "method": "remove",
      "file": "src/uiManager.js",
      "line": 2762,
      "context": "setTimeout(() => gleam.remove(), 600);"
    },
    {
      "object": "element",
      "method": "addEventListener",
      "file": "src/uiManager.js",
      "line": 2772,
      "context": "element.addEventListener('click', () => {"
    },
    {
      "object": "classList",
      "method": "add",
      "file": "src/uiManager.js",
      "line": 2785,
      "context": "element.classList.add('score-increase');"
    },
    {
      "object": "classList",
      "method": "remove",
      "file": "src/uiManager.js",
      "line": 2787,
      "context": "element.classList.remove('score-increase');"
    },
    {
      "object": "element",
      "method": "querySelector",
      "file": "src/uiManager.js",
      "line": 2796,
      "context": "if (!element.querySelector('.gem-sparkle')) {"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiManager.js",
      "line": 2797,
      "context": "const gem = document.createElement('span');"
    },
    {
      "object": "element",
      "method": "appendChild",
      "file": "src/uiManager.js",
      "line": 2807,
      "context": "element.appendChild(gem);"
    },
    {
      "object": "gem",
      "method": "remove",
      "file": "src/uiManager.js",
      "line": 2809,
      "context": "setTimeout(() => gem.remove(), 1000);"
    },
    {
      "object": "classList",
      "method": "add",
      "file": "src/uiManager.js",
      "line": 2818,
      "context": "element.classList.add('achievement-sparkle');"
    },
    {
      "object": "classList",
      "method": "remove",
      "file": "src/uiManager.js",
      "line": 2820,
      "context": "element.classList.remove('achievement-sparkle');"
    },
    {
      "object": "classList",
      "method": "add",
      "file": "src/uiManager.js",
      "line": 2834,
      "context": "button.classList.add('interactive-element');"
    },
    {
      "object": "button",
      "method": "addEventListener",
      "file": "src/uiManager.js",
      "line": 2837,
      "context": "button.addEventListener('click', (event) => {"
    },
    {
      "object": "this",
      "method": "triggerHapticFeedback",
      "file": "src/uiManager.js",
      "line": 2839,
      "context": "this.triggerHapticFeedback(feedbackType);"
    },
    {
      "object": "button",
      "method": "addEventListener",
      "file": "src/uiManager.js",
      "line": 2854,
      "context": "button.addEventListener('mouseenter', () => {"
    },
    {
      "object": "classList",
      "method": "contains",
      "file": "src/uiManager.js",
      "line": 2855,
      "context": "if (button.classList.contains('answer-btn')) {"
    },
    {
      "object": "this",
      "method": "addSwordGleam",
      "file": "src/uiManager.js",
      "line": 2856,
      "context": "this.addSwordGleam(button);"
    },
    {
      "object": "this",
      "method": "triggerHapticFeedback",
      "file": "src/uiManager.js",
      "line": 2872,
      "context": "this.triggerHapticFeedback('achievement');"
    },
    {
      "object": "this",
      "method": "triggerHapticFeedback",
      "file": "src/uiManager.js",
      "line": 2874,
      "context": "this.triggerHapticFeedback('success');"
    },
    {
      "object": "this",
      "method": "addCrownFloat",
      "file": "src/uiManager.js",
      "line": 2878,
      "context": "this.addCrownFloat(scoreElement);"
    },
    {
      "object": "this",
      "method": "addGemSparkle",
      "file": "src/uiManager.js",
      "line": 2880,
      "context": "this.addGemSparkle(scoreElement);"
    },
    {
      "object": "animationManager",
      "method": "animateScoreIncrease",
      "file": "src/uiManager.js",
      "line": 2885,
      "context": "this.animationManager.animateScoreIncrease(scoreElement, this.previousScore, newScore);"
    },
    {
      "object": "classList",
      "method": "add",
      "file": "src/uiManager.js",
      "line": 2901,
      "context": "roomInfoElement.classList.add('room-transition');"
    },
    {
      "object": "classList",
      "method": "remove",
      "file": "src/uiManager.js",
      "line": 2903,
      "context": "roomInfoElement.classList.remove('room-transition');"
    },
    {
      "object": "this",
      "method": "triggerHapticFeedback",
      "file": "src/uiManager.js",
      "line": 2908,
      "context": "this.triggerHapticFeedback('roomEnter');"
    },
    {
      "object": "this",
      "method": "announceToScreenReader",
      "file": "src/uiManager.js",
      "line": 2911,
      "context": "this.announceToScreenReader(`Entered ${roomData.name}`);"
    },
    {
      "object": "classList",
      "method": "add",
      "file": "src/uiManager.js",
      "line": 2922,
      "context": "questionElement.classList.add('question-reveal');"
    },
    {
      "object": "classList",
      "method": "remove",
      "file": "src/uiManager.js",
      "line": 2924,
      "context": "questionElement.classList.remove('question-reveal');"
    },
    {
      "object": "this",
      "method": "triggerHapticFeedback",
      "file": "src/uiManager.js",
      "line": 2929,
      "context": "this.triggerHapticFeedback('tap');"
    },
    {
      "object": "document",
      "method": "addEventListener",
      "file": "src/uiManager.js",
      "line": 2940,
      "context": "document.addEventListener('accessibility-map-announce', (event) => {"
    },
    {
      "object": "accessibilityManager",
      "method": "announce",
      "file": "src/uiManager.js",
      "line": 2945,
      "context": "this.accessibilityManager.announce(message, priority);"
    },
    {
      "object": "this",
      "method": "enhanceAnswerButtonAccessibility",
      "file": "src/uiManager.js",
      "line": 2949,
      "context": "this.enhanceAnswerButtonAccessibility();"
    },
    {
      "object": "document",
      "method": "addEventListener",
      "file": "src/uiManager.js",
      "line": 2952,
      "context": "document.addEventListener('keydown', (event) => {"
    },
    {
      "object": "this",
      "method": "checkQuestionActive",
      "file": "src/uiManager.js",
      "line": 2953,
      "context": "if (this.checkQuestionActive() && event.key >= '1' && event.key <= '4') {"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 2955,
      "context": "const buttons = document.querySelectorAll('#answer-buttons button:not([disabled])');"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/uiManager.js",
      "line": 2957,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "enhanceTimerAccessibility",
      "file": "src/uiManager.js",
      "line": 2964,
      "context": "this.enhanceTimerAccessibility();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/uiManager.js",
      "line": 2966,
      "context": "console.log('♿ UI accessibility hooks added');"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/uiManager.js",
      "line": 2973,
      "context": "const answerContainer = document.getElementById('answer-buttons');"
    },
    {
      "object": "answerContainer",
      "method": "setAttribute",
      "file": "src/uiManager.js",
      "line": 2976,
      "context": "answerContainer.setAttribute('role', 'radiogroup');"
    },
    {
      "object": "answerContainer",
      "method": "setAttribute",
      "file": "src/uiManager.js",
      "line": 2977,
      "context": "answerContainer.setAttribute('aria-label', 'Answer options');"
    },
    {
      "object": "answerContainer",
      "method": "setAttribute",
      "file": "src/uiManager.js",
      "line": 2980,
      "context": "answerContainer.setAttribute('aria-describedby', 'answer-instructions');"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/uiManager.js",
      "line": 2982,
      "context": "if (!document.getElementById('answer-instructions')) {"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiManager.js",
      "line": 2983,
      "context": "const instructions = document.createElement('div');"
    },
    {
      "object": "answerContainer",
      "method": "appendChild",
      "file": "src/uiManager.js",
      "line": 2987,
      "context": "answerContainer.appendChild(instructions);"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/uiManager.js",
      "line": 2996,
      "context": "const timerElement = document.getElementById('timer-text');"
    },
    {
      "object": "timerElement",
      "method": "setAttribute",
      "file": "src/uiManager.js",
      "line": 2999,
      "context": "timerElement.setAttribute('aria-live', 'off');"
    },
    {
      "object": "quizEngine",
      "method": "on",
      "file": "src/uiManager.js",
      "line": 3002,
      "context": "this.quizEngine.on('timerUpdate', (data) => {"
    },
    {
      "object": "accessibilityManager",
      "method": "announce",
      "file": "src/uiManager.js",
      "line": 3007,
      "context": "this.accessibilityManager.announce('10 seconds remaining', 'polite');"
    },
    {
      "object": "accessibilityManager",
      "method": "announce",
      "file": "src/uiManager.js",
      "line": 3009,
      "context": "this.accessibilityManager.announce('5 seconds remaining', 'assertive');"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 3020,
      "context": "const buttons = document.querySelectorAll('#answer-buttons button');"
    },
    {
      "object": "accessibilityManager",
      "method": "announce",
      "file": "src/uiManager.js",
      "line": 3023,
      "context": "this.accessibilityManager.announce(`Selected: ${answerText}`, 'polite');"
    },
    {
      "object": "accessibilityManager",
      "method": "announce",
      "file": "src/uiManager.js",
      "line": 3034,
      "context": "this.accessibilityManager.announce(message, priority);"
    },
    {
      "object": "this",
      "method": "checkReducedMotion",
      "file": "src/animationManager.js",
      "line": 14,
      "context": "this.reducedMotion = this.checkReducedMotion();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/animationManager.js",
      "line": 27,
      "context": "console.log('AnimationManager initialized with reduced motion:', this.reducedMotion);"
    },
    {
      "object": "window",
      "method": "matchMedia",
      "file": "src/animationManager.js",
      "line": 36,
      "context": "return window.matchMedia('(prefers-reduced-motion: reduce)').matches;"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/animationManager.js",
      "line": 38,
      "context": "console.warn('Could not check reduced motion preference:', error);"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/animationManager.js",
      "line": 48,
      "context": "return `anim_${++this.animationCounter}_${Date.now()}`;"
    },
    {
      "object": "this",
      "method": "generateAnimationId",
      "file": "src/animationManager.js",
      "line": 64,
      "context": "const animationId = this.generateAnimationId();"
    },
    {
      "object": "toValue",
      "method": "toString",
      "file": "src/animationManager.js",
      "line": 69,
      "context": "element.textContent = toValue.toString();"
    },
    {
      "object": "Promise",
      "method": "resolve",
      "file": "src/animationManager.js",
      "line": 70,
      "context": "return Promise.resolve();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/animationManager.js",
      "line": 73,
      "context": "console.log(`Starting score animation from ${fromValue} to ${toValue}`);"
    },
    {
      "object": "performance",
      "method": "now",
      "file": "src/animationManager.js",
      "line": 76,
      "context": "const startTime = performance.now();"
    },
    {
      "object": "Math",
      "method": "min",
      "file": "src/animationManager.js",
      "line": 82,
      "context": "const progress = Math.min(elapsed / duration, 1);"
    },
    {
      "object": "Math",
      "method": "pow",
      "file": "src/animationManager.js",
      "line": 85,
      "context": "const easedProgress = 1 - Math.pow(1 - progress, 3);"
    },
    {
      "object": "Math",
      "method": "round",
      "file": "src/animationManager.js",
      "line": 86,
      "context": "const currentValue = Math.round(fromValue + (difference * easedProgress));"
    },
    {
      "object": "currentValue",
      "method": "toString",
      "file": "src/animationManager.js",
      "line": 88,
      "context": "element.textContent = currentValue.toString();"
    },
    {
      "object": "activeAnimations",
      "method": "set",
      "file": "src/animationManager.js",
      "line": 102,
      "context": "this.activeAnimations.set(animationId, frameId);"
    },
    {
      "object": "activeAnimations",
      "method": "delete",
      "file": "src/animationManager.js",
      "line": 107,
      "context": "this.activeAnimations.delete(animationId);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/animationManager.js",
      "line": 110,
      "context": "console.log(`Score animation completed in ${elapsed.toFixed(2)}ms`);"
    },
    {
      "object": "elapsed",
      "method": "toFixed",
      "file": "src/animationManager.js",
      "line": 110,
      "context": "console.log(`Score animation completed in ${elapsed.toFixed(2)}ms`);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/animationManager.js",
      "line": 119,
      "context": "console.error('Score animation failed:', error);"
    },
    {
      "object": "toValue",
      "method": "toString",
      "file": "src/animationManager.js",
      "line": 120,
      "context": "element.textContent = toValue.toString();"
    },
    {
      "object": "activeAnimations",
      "method": "delete",
      "file": "src/animationManager.js",
      "line": 121,
      "context": "this.activeAnimations.delete(animationId);"
    },
    {
      "object": "this",
      "method": "generateAnimationId",
      "file": "src/animationManager.js",
      "line": 138,
      "context": "const animationId = this.generateAnimationId();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/animationManager.js",
      "line": 146,
      "context": "console.log(`Starting answer feedback animation: ${isCorrect ? 'correct' : 'incorrect'}`);"
    },
    {
      "object": "Object",
      "method": "assign",
      "file": "src/animationManager.js",
      "line": 162,
      "context": "Object.assign(element.style, {"
    },
    {
      "object": "this",
      "method": "restoreStyles",
      "file": "src/animationManager.js",
      "line": 169,
      "context": "this.restoreStyles(element, originalStyles);"
    },
    {
      "object": "Promise",
      "method": "resolve",
      "file": "src/animationManager.js",
      "line": 172,
      "context": "return Promise.resolve();"
    },
    {
      "object": "this",
      "method": "restoreStyles",
      "file": "src/animationManager.js",
      "line": 191,
      "context": "this.restoreStyles(element, originalStyles);"
    },
    {
      "object": "activeAnimations",
      "method": "delete",
      "file": "src/animationManager.js",
      "line": 194,
      "context": "this.activeAnimations.delete(animationId);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/animationManager.js",
      "line": 196,
      "context": "console.log('Answer feedback animation completed');"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/animationManager.js",
      "line": 205,
      "context": "console.error('Answer feedback animation failed:', error);"
    },
    {
      "object": "activeAnimations",
      "method": "delete",
      "file": "src/animationManager.js",
      "line": 206,
      "context": "this.activeAnimations.delete(animationId);"
    },
    {
      "object": "this",
      "method": "generateAnimationId",
      "file": "src/animationManager.js",
      "line": 223,
      "context": "const animationId = this.generateAnimationId();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/animationManager.js",
      "line": 227,
      "context": "console.log(`Starting room transition: ${transition.from} → ${transition.to}`);"
    },
    {
      "object": "Promise",
      "method": "resolve",
      "file": "src/animationManager.js",
      "line": 232,
      "context": "return Promise.resolve();"
    },
    {
      "object": "activeAnimations",
      "method": "delete",
      "file": "src/animationManager.js",
      "line": 254,
      "context": "this.activeAnimations.delete(animationId);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/animationManager.js",
      "line": 256,
      "context": "console.log('Room transition animation completed');"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/animationManager.js",
      "line": 263,
      "context": "console.error('Room transition animation failed:', error);"
    },
    {
      "object": "activeAnimations",
      "method": "delete",
      "file": "src/animationManager.js",
      "line": 264,
      "context": "this.activeAnimations.delete(animationId);"
    },
    {
      "object": "this",
      "method": "generateAnimationId",
      "file": "src/animationManager.js",
      "line": 281,
      "context": "const animationId = this.generateAnimationId();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/animationManager.js",
      "line": 285,
      "context": "console.log(`Starting achievement unlock animation: ${achievement.name}`);"
    },
    {
      "object": "this",
      "method": "createAchievementNotification",
      "file": "src/animationManager.js",
      "line": 289,
      "context": "const notification = this.createAchievementNotification(achievement);"
    },
    {
      "object": "container",
      "method": "appendChild",
      "file": "src/animationManager.js",
      "line": 290,
      "context": "container.appendChild(notification);"
    },
    {
      "object": "parentNode",
      "method": "removeChild",
      "file": "src/animationManager.js",
      "line": 297,
      "context": "notification.parentNode.removeChild(notification);"
    },
    {
      "object": "Promise",
      "method": "resolve",
      "file": "src/animationManager.js",
      "line": 300,
      "context": "return Promise.resolve();"
    },
    {
      "object": "parentNode",
      "method": "removeChild",
      "file": "src/animationManager.js",
      "line": 320,
      "context": "notification.parentNode.removeChild(notification);"
    },
    {
      "object": "activeAnimations",
      "method": "delete",
      "file": "src/animationManager.js",
      "line": 322,
      "context": "this.activeAnimations.delete(animationId);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/animationManager.js",
      "line": 324,
      "context": "console.log('Achievement unlock animation completed');"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/animationManager.js",
      "line": 331,
      "context": "console.error('Achievement unlock animation failed:', error);"
    },
    {
      "object": "activeAnimations",
      "method": "delete",
      "file": "src/animationManager.js",
      "line": 332,
      "context": "this.activeAnimations.delete(animationId);"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/animationManager.js",
      "line": 343,
      "context": "const notification = document.createElement('div');"
    },
    {
      "object": "classList",
      "method": "add",
      "file": "src/animationManager.js",
      "line": 395,
      "context": "element.classList.add('loading-state');"
    },
    {
      "object": "classList",
      "method": "remove",
      "file": "src/animationManager.js",
      "line": 401,
      "context": "element.classList.remove('loading-state');"
    },
    {
      "object": "Promise",
      "method": "resolve",
      "file": "src/animationManager.js",
      "line": 406,
      "context": "return Promise.resolve();"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/animationManager.js",
      "line": 409,
      "context": "console.error('Loading state animation failed:', error);"
    },
    {
      "object": "Object",
      "method": "keys",
      "file": "src/animationManager.js",
      "line": 421,
      "context": "Object.keys(originalStyles).forEach(property => {"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/animationManager.js",
      "line": 425,
      "context": "console.warn('Failed to restore styles:', error);"
    },
    {
      "object": "activeAnimations",
      "method": "get",
      "file": "src/animationManager.js",
      "line": 435,
      "context": "const frameId = this.activeAnimations.get(animationId);"
    },
    {
      "object": "activeAnimations",
      "method": "delete",
      "file": "src/animationManager.js",
      "line": 438,
      "context": "this.activeAnimations.delete(animationId);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/animationManager.js",
      "line": 439,
      "context": "console.log(`Animation ${animationId} cancelled`);"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/animationManager.js",
      "line": 442,
      "context": "console.warn('Failed to cancel animation:', error);"
    },
    {
      "object": "activeAnimations",
      "method": "forEach",
      "file": "src/animationManager.js",
      "line": 451,
      "context": "this.activeAnimations.forEach((frameId, animationId) => {"
    },
    {
      "object": "activeAnimations",
      "method": "clear",
      "file": "src/animationManager.js",
      "line": 454,
      "context": "this.activeAnimations.clear();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/animationManager.js",
      "line": 455,
      "context": "console.log('All animations cancelled');"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/animationManager.js",
      "line": 457,
      "context": "console.warn('Failed to cancel all animations:', error);"
    },
    {
      "object": "Math",
      "method": "round",
      "file": "src/animationManager.js",
      "line": 473,
      "context": "averageDuration: Math.round(avgDuration * 100) / 100,"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/animationManager.js",
      "line": 484,
      "context": "console.log(`Starting animation performance test with ${iterations} iterations`);"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/animationManager.js",
      "line": 486,
      "context": "const testElement = document.createElement('div');"
    },
    {
      "object": "body",
      "method": "appendChild",
      "file": "src/animationManager.js",
      "line": 488,
      "context": "document.body.appendChild(testElement);"
    },
    {
      "object": "performance",
      "method": "now",
      "file": "src/animationManager.js",
      "line": 490,
      "context": "const startTime = performance.now();"
    },
    {
      "object": "this",
      "method": "animateScoreIncrease",
      "file": "src/animationManager.js",
      "line": 494,
      "context": "await this.animateScoreIncrease(testElement, i * 10, (i + 1) * 10, 100);"
    },
    {
      "object": "performance",
      "method": "now",
      "file": "src/animationManager.js",
      "line": 497,
      "context": "const endTime = performance.now();"
    },
    {
      "object": "Math",
      "method": "round",
      "file": "src/animationManager.js",
      "line": 502,
      "context": "totalTime: Math.round(totalTime),"
    },
    {
      "object": "Math",
      "method": "round",
      "file": "src/animationManager.js",
      "line": 503,
      "context": "averageTime: Math.round(totalTime / iterations),"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/animationManager.js",
      "line": 507,
      "context": "console.log('Animation performance test results:', results);"
    },
    {
      "object": "body",
      "method": "removeChild",
      "file": "src/animationManager.js",
      "line": 511,
      "context": "document.body.removeChild(testElement);"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/animationManager.js",
      "line": 555,
      "context": "const styleElement = document.createElement('style');"
    },
    {
      "object": "head",
      "method": "appendChild",
      "file": "src/animationManager.js",
      "line": 557,
      "context": "document.head.appendChild(styleElement);"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/achievementManager.js",
      "line": 25,
      "context": "startTime: Date.now(),"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/achievementManager.js",
      "line": 32,
      "context": "console.log('AchievementManager initialized');"
    },
    {
      "object": "this",
      "method": "initialize",
      "file": "src/achievementManager.js",
      "line": 33,
      "context": "this.initialize();"
    },
    {
      "object": "this",
      "method": "loadAchievements",
      "file": "src/achievementManager.js",
      "line": 41,
      "context": "await this.loadAchievements();"
    },
    {
      "object": "this",
      "method": "loadAchievementProgress",
      "file": "src/achievementManager.js",
      "line": 42,
      "context": "this.loadAchievementProgress();"
    },
    {
      "object": "this",
      "method": "setupEventListeners",
      "file": "src/achievementManager.js",
      "line": 43,
      "context": "this.setupEventListeners();"
    },
    {
      "object": "this",
      "method": "updateSessionStats",
      "file": "src/achievementManager.js",
      "line": 44,
      "context": "this.updateSessionStats();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/achievementManager.js",
      "line": 45,
      "context": "console.log(`Loaded ${this.achievements.size} achievements`);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/achievementManager.js",
      "line": 47,
      "context": "console.error('Failed to initialize AchievementManager:', error);"
    },
    {
      "object": "dataLoader",
      "method": "getAllData",
      "file": "src/achievementManager.js",
      "line": 56,
      "context": "const gameData = this.dataLoader.getAllData();"
    },
    {
      "object": "DataLoader",
      "method": "loadGameData",
      "file": "src/achievementManager.js",
      "line": 59,
      "context": "throw new Error('Achievement data not available. Ensure DataLoader.loadGameData() was called first.');"
    },
    {
      "object": "achievements",
      "method": "forEach",
      "file": "src/achievementManager.js",
      "line": 63,
      "context": "gameData.achievements.forEach(achievement => {"
    },
    {
      "object": "achievements",
      "method": "set",
      "file": "src/achievementManager.js",
      "line": 64,
      "context": "this.achievements.set(achievement.id, {"
    },
    {
      "object": "this",
      "method": "getMaxProgress",
      "file": "src/achievementManager.js",
      "line": 68,
      "context": "maxProgress: this.getMaxProgress(achievement) // Maximum progress needed"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/achievementManager.js",
      "line": 72,
      "context": "console.log('Achievement definitions loaded:', this.achievements.size);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/achievementManager.js",
      "line": 74,
      "context": "console.error('Failed to load achievements:', error);"
    },
    {
      "object": "localStorage",
      "method": "getItem",
      "file": "src/achievementManager.js",
      "line": 118,
      "context": "const saved = localStorage.getItem('lobeLabyrinth_achievements');"
    },
    {
      "object": "JSON",
      "method": "parse",
      "file": "src/achievementManager.js",
      "line": 120,
      "context": "const data = JSON.parse(saved);"
    },
    {
      "object": "unlockedAchievements",
      "method": "forEach",
      "file": "src/achievementManager.js",
      "line": 127,
      "context": "this.unlockedAchievements.forEach(achievementId => {"
    },
    {
      "object": "achievements",
      "method": "get",
      "file": "src/achievementManager.js",
      "line": 128,
      "context": "const achievement = this.achievements.get(achievementId);"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/achievementManager.js",
      "line": 131,
      "context": "achievement.unlockedAt = data.unlockTimes?.[achievementId] || Date.now();"
    },
    {
      "object": "Object",
      "method": "entries",
      "file": "src/achievementManager.js",
      "line": 138,
      "context": "this.achievementProgress = new Map(Object.entries(data.achievementProgress));"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/achievementManager.js",
      "line": 144,
      "context": "console.log(`Loaded ${this.unlockedAchievements.size} unlocked achievements`);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/achievementManager.js",
      "line": 147,
      "context": "console.error('Failed to load achievement progress:', error);"
    },
    {
      "object": "achievements",
      "method": "forEach",
      "file": "src/achievementManager.js",
      "line": 157,
      "context": "this.achievements.forEach((achievement, id) => {"
    },
    {
      "object": "Array",
      "method": "from",
      "file": "src/achievementManager.js",
      "line": 164,
      "context": "unlockedAchievements: Array.from(this.unlockedAchievements),"
    },
    {
      "object": "Object",
      "method": "fromEntries",
      "file": "src/achievementManager.js",
      "line": 165,
      "context": "achievementProgress: Object.fromEntries(this.achievementProgress),"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/achievementManager.js",
      "line": 168,
      "context": "lastSaved: Date.now()"
    },
    {
      "object": "localStorage",
      "method": "setItem",
      "file": "src/achievementManager.js",
      "line": 171,
      "context": "localStorage.setItem('lobeLabyrinth_achievements', JSON.stringify(data));"
    },
    {
      "object": "JSON",
      "method": "stringify",
      "file": "src/achievementManager.js",
      "line": 171,
      "context": "localStorage.setItem('lobeLabyrinth_achievements', JSON.stringify(data));"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/achievementManager.js",
      "line": 173,
      "context": "console.error('Failed to save achievement progress:', error);"
    },
    {
      "object": "gameState",
      "method": "on",
      "file": "src/achievementManager.js",
      "line": 182,
      "context": "this.gameState.on('questionAnswered', (eventData) => {"
    },
    {
      "object": "this",
      "method": "handleQuestionAnswered",
      "file": "src/achievementManager.js",
      "line": 183,
      "context": "this.handleQuestionAnswered(eventData);"
    },
    {
      "object": "gameState",
      "method": "on",
      "file": "src/achievementManager.js",
      "line": 187,
      "context": "this.gameState.on('roomChanged', (eventData) => {"
    },
    {
      "object": "this",
      "method": "handleRoomChanged",
      "file": "src/achievementManager.js",
      "line": 188,
      "context": "this.handleRoomChanged(eventData);"
    },
    {
      "object": "gameState",
      "method": "on",
      "file": "src/achievementManager.js",
      "line": 192,
      "context": "this.gameState.on('gameCompleted', (eventData) => {"
    },
    {
      "object": "this",
      "method": "handleGameCompleted",
      "file": "src/achievementManager.js",
      "line": 193,
      "context": "this.handleGameCompleted(eventData);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/achievementManager.js",
      "line": 196,
      "context": "console.log('Achievement event listeners set up');"
    },
    {
      "object": "gameState",
      "method": "getStateSnapshot",
      "file": "src/achievementManager.js",
      "line": 203,
      "context": "const gameSnapshot = this.gameState.getStateSnapshot();"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/achievementManager.js",
      "line": 211,
      "context": "this.sessionStats.correctAnswers = Math.floor(gameSnapshot.score / 50); // Rough estimate"
    },
    {
      "object": "Math",
      "method": "max",
      "file": "src/achievementManager.js",
      "line": 227,
      "context": "this.sessionStats.maxConsecutiveCorrect = Math.max("
    },
    {
      "object": "quickAnswers",
      "method": "push",
      "file": "src/achievementManager.js",
      "line": 234,
      "context": "this.sessionStats.quickAnswers.push(timeElapsed);"
    },
    {
      "object": "lastAnswerTimes",
      "method": "push",
      "file": "src/achievementManager.js",
      "line": 242,
      "context": "this.sessionStats.lastAnswerTimes.push({"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/achievementManager.js",
      "line": 243,
      "context": "time: Date.now(),"
    },
    {
      "object": "lastAnswerTimes",
      "method": "shift",
      "file": "src/achievementManager.js",
      "line": 250,
      "context": "this.sessionStats.lastAnswerTimes.shift();"
    },
    {
      "object": "this",
      "method": "checkAchievementUnlocks",
      "file": "src/achievementManager.js",
      "line": 254,
      "context": "this.checkAchievementUnlocks();"
    },
    {
      "object": "roomsVisited",
      "method": "add",
      "file": "src/achievementManager.js",
      "line": 263,
      "context": "this.sessionStats.roomsVisited.add(roomId);"
    },
    {
      "object": "this",
      "method": "checkAchievementUnlocks",
      "file": "src/achievementManager.js",
      "line": 266,
      "context": "this.checkAchievementUnlocks();"
    },
    {
      "object": "this",
      "method": "checkAchievementUnlocks",
      "file": "src/achievementManager.js",
      "line": 274,
      "context": "this.checkAchievementUnlocks();"
    },
    {
      "object": "achievements",
      "method": "forEach",
      "file": "src/achievementManager.js",
      "line": 281,
      "context": "this.achievements.forEach((achievement, achievementId) => {"
    },
    {
      "object": "this",
      "method": "checkAchievementCondition",
      "file": "src/achievementManager.js",
      "line": 283,
      "context": "const shouldUnlock = this.checkAchievementCondition(achievement);"
    },
    {
      "object": "this",
      "method": "unlockAchievement",
      "file": "src/achievementManager.js",
      "line": 285,
      "context": "this.unlockAchievement(achievementId);"
    },
    {
      "object": "this",
      "method": "updateAchievementProgress",
      "file": "src/achievementManager.js",
      "line": 288,
      "context": "this.updateAchievementProgress(achievementId, achievement);"
    },
    {
      "object": "gameState",
      "method": "getStateSnapshot",
      "file": "src/achievementManager.js",
      "line": 299,
      "context": "const gameSnapshot = this.gameState.getStateSnapshot();"
    },
    {
      "object": "quickAnswers",
      "method": "filter",
      "file": "src/achievementManager.js",
      "line": 312,
      "context": "const quickCount = this.sessionStats.quickAnswers.filter("
    },
    {
      "object": "lastAnswerTimes",
      "method": "slice",
      "file": "src/achievementManager.js",
      "line": 323,
      "context": "const recent = this.sessionStats.lastAnswerTimes.slice(-(condition.value + 1));"
    },
    {
      "object": "recent",
      "method": "slice",
      "file": "src/achievementManager.js",
      "line": 324,
      "context": "const wrongAnswers = recent.slice(0, -1).every(answer => !answer.correct);"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/achievementManager.js",
      "line": 339,
      "context": "const playTime = Date.now() - this.sessionStats.startTime;"
    },
    {
      "object": "roomsVisited",
      "method": "has",
      "file": "src/achievementManager.js",
      "line": 349,
      "context": "return this.sessionStats.roomsVisited.has(condition.value);"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/achievementManager.js",
      "line": 358,
      "context": "console.warn('Unknown achievement condition type:', condition.type);"
    },
    {
      "object": "quickAnswers",
      "method": "filter",
      "file": "src/achievementManager.js",
      "line": 381,
      "context": "currentProgress = this.sessionStats.quickAnswers.filter("
    },
    {
      "object": "achievementProgress",
      "method": "set",
      "file": "src/achievementManager.js",
      "line": 395,
      "context": "this.achievementProgress.set(achievementId, Math.min(currentProgress, achievement.maxProgress));"
    },
    {
      "object": "Math",
      "method": "min",
      "file": "src/achievementManager.js",
      "line": 395,
      "context": "this.achievementProgress.set(achievementId, Math.min(currentProgress, achievement.maxProgress));"
    },
    {
      "object": "achievementProgress",
      "method": "get",
      "file": "src/achievementManager.js",
      "line": 396,
      "context": "achievement.progress = this.achievementProgress.get(achievementId);"
    },
    {
      "object": "achievements",
      "method": "get",
      "file": "src/achievementManager.js",
      "line": 403,
      "context": "const achievement = this.achievements.get(achievementId);"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/achievementManager.js",
      "line": 410,
      "context": "achievement.unlockedAt = Date.now();"
    },
    {
      "object": "unlockedAchievements",
      "method": "add",
      "file": "src/achievementManager.js",
      "line": 411,
      "context": "this.unlockedAchievements.add(achievementId);"
    },
    {
      "object": "this",
      "method": "saveAchievementProgress",
      "file": "src/achievementManager.js",
      "line": 417,
      "context": "this.saveAchievementProgress();"
    },
    {
      "object": "this",
      "method": "emit",
      "file": "src/achievementManager.js",
      "line": 420,
      "context": "this.emit('achievementUnlocked', {"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/achievementManager.js",
      "line": 426,
      "context": "console.log(`🏆 Achievement unlocked: ${achievement.name} (+${achievement.points} points)`);"
    },
    {
      "object": "Array",
      "method": "from",
      "file": "src/achievementManager.js",
      "line": 433,
      "context": "return Array.from(this.achievements.values()).map(achievement => ({"
    },
    {
      "object": "achievements",
      "method": "values",
      "file": "src/achievementManager.js",
      "line": 433,
      "context": "return Array.from(this.achievements.values()).map(achievement => ({"
    },
    {
      "object": "this",
      "method": "getAllAchievements",
      "file": "src/achievementManager.js",
      "line": 443,
      "context": "return this.getAllAchievements().filter(achievement =>"
    },
    {
      "object": "this",
      "method": "getAllAchievements",
      "file": "src/achievementManager.js",
      "line": 452,
      "context": "return this.getAllAchievements().filter(achievement => achievement.unlocked);"
    },
    {
      "object": "this",
      "method": "getAllAchievements",
      "file": "src/achievementManager.js",
      "line": 459,
      "context": "return this.getAllAchievements().filter(achievement =>"
    },
    {
      "object": "Math",
      "method": "round",
      "file": "src/achievementManager.js",
      "line": 475,
      "context": "percentage: Math.round(percentage * 10) / 10,"
    },
    {
      "object": "this",
      "method": "getCategoryStats",
      "file": "src/achievementManager.js",
      "line": 477,
      "context": "categories: this.getCategoryStats()"
    },
    {
      "object": "achievements",
      "method": "forEach",
      "file": "src/achievementManager.js",
      "line": 487,
      "context": "this.achievements.forEach(achievement => {"
    },
    {
      "object": "Object",
      "method": "keys",
      "file": "src/achievementManager.js",
      "line": 500,
      "context": "Object.keys(categories).forEach(category => {"
    },
    {
      "object": "unlockedAchievements",
      "method": "clear",
      "file": "src/achievementManager.js",
      "line": 512,
      "context": "this.unlockedAchievements.clear();"
    },
    {
      "object": "achievementProgress",
      "method": "clear",
      "file": "src/achievementManager.js",
      "line": 513,
      "context": "this.achievementProgress.clear();"
    },
    {
      "object": "achievements",
      "method": "forEach",
      "file": "src/achievementManager.js",
      "line": 517,
      "context": "this.achievements.forEach(achievement => {"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/achievementManager.js",
      "line": 532,
      "context": "startTime: Date.now(),"
    },
    {
      "object": "localStorage",
      "method": "removeItem",
      "file": "src/achievementManager.js",
      "line": 537,
      "context": "localStorage.removeItem('lobeLabyrinth_achievements');"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/achievementManager.js",
      "line": 539,
      "context": "console.log('Achievement progress reset');"
    },
    {
      "object": "this",
      "method": "emit",
      "file": "src/achievementManager.js",
      "line": 540,
      "context": "this.emit('achievementsReset', {});"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/achievementManager.js",
      "line": 568,
      "context": "console.error(`Error in ${eventType} event listener:`, error);"
    },
    {
      "object": "Object",
      "method": "fromEntries",
      "file": "src/achievementManager.js",
      "line": 582,
      "context": "achievementProgress: Object.fromEntries(this.achievementProgress),"
    },
    {
      "object": "canvas",
      "method": "getContext",
      "file": "src/mapRenderer.js",
      "line": 15,
      "context": "this.ctx = canvas.getContext('2d');"
    },
    {
      "object": "this",
      "method": "setupRoomPositions",
      "file": "src/mapRenderer.js",
      "line": 50,
      "context": "this.setupRoomPositions();"
    },
    {
      "object": "this",
      "method": "setupEventListeners",
      "file": "src/mapRenderer.js",
      "line": 53,
      "context": "this.setupEventListeners();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/mapRenderer.js",
      "line": 55,
      "context": "console.log('MapRenderer initialized with canvas size:', this.mapWidth, 'x', this.mapHeight);"
    },
    {
      "object": "roomPositions",
      "method": "set",
      "file": "src/mapRenderer.js",
      "line": 75,
      "context": "this.roomPositions.set('entrance_hall', {"
    },
    {
      "object": "roomPositions",
      "method": "set",
      "file": "src/mapRenderer.js",
      "line": 80,
      "context": "this.roomPositions.set('library', {"
    },
    {
      "object": "roomPositions",
      "method": "set",
      "file": "src/mapRenderer.js",
      "line": 85,
      "context": "this.roomPositions.set('armory', {"
    },
    {
      "object": "roomPositions",
      "method": "set",
      "file": "src/mapRenderer.js",
      "line": 90,
      "context": "this.roomPositions.set('observatory', {"
    },
    {
      "object": "roomPositions",
      "method": "set",
      "file": "src/mapRenderer.js",
      "line": 95,
      "context": "this.roomPositions.set('throne_room', {"
    },
    {
      "object": "roomPositions",
      "method": "set",
      "file": "src/mapRenderer.js",
      "line": 100,
      "context": "this.roomPositions.set('secret_chamber', {"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/mapRenderer.js",
      "line": 105,
      "context": "console.log('Room positions configured:', this.roomPositions);"
    },
    {
      "object": "canvas",
      "method": "addEventListener",
      "file": "src/mapRenderer.js",
      "line": 113,
      "context": "this.canvas.addEventListener('click', (event) => {"
    },
    {
      "object": "this",
      "method": "handleCanvasClick",
      "file": "src/mapRenderer.js",
      "line": 114,
      "context": "this.handleCanvasClick(event);"
    },
    {
      "object": "canvas",
      "method": "addEventListener",
      "file": "src/mapRenderer.js",
      "line": 118,
      "context": "this.canvas.addEventListener('dblclick', (event) => {"
    },
    {
      "object": "this",
      "method": "handleCanvasDoubleClick",
      "file": "src/mapRenderer.js",
      "line": 119,
      "context": "this.handleCanvasDoubleClick(event);"
    },
    {
      "object": "canvas",
      "method": "addEventListener",
      "file": "src/mapRenderer.js",
      "line": 123,
      "context": "this.canvas.addEventListener('mousemove', (event) => {"
    },
    {
      "object": "this",
      "method": "handleCanvasHover",
      "file": "src/mapRenderer.js",
      "line": 124,
      "context": "this.handleCanvasHover(event);"
    },
    {
      "object": "canvas",
      "method": "addEventListener",
      "file": "src/mapRenderer.js",
      "line": 128,
      "context": "this.canvas.addEventListener('keydown', (event) => {"
    },
    {
      "object": "this",
      "method": "handleKeyboardNavigation",
      "file": "src/mapRenderer.js",
      "line": 129,
      "context": "this.handleKeyboardNavigation(event);"
    },
    {
      "object": "canvas",
      "method": "setAttribute",
      "file": "src/mapRenderer.js",
      "line": 133,
      "context": "this.canvas.setAttribute('tabindex', '0');"
    },
    {
      "object": "canvas",
      "method": "setAttribute",
      "file": "src/mapRenderer.js",
      "line": 134,
      "context": "this.canvas.setAttribute('role', 'application');"
    },
    {
      "object": "canvas",
      "method": "setAttribute",
      "file": "src/mapRenderer.js",
      "line": 135,
      "context": "this.canvas.setAttribute('aria-label', 'Castle map - Use arrow keys to navigate between rooms');"
    },
    {
      "object": "gameState",
      "method": "on",
      "file": "src/mapRenderer.js",
      "line": 138,
      "context": "this.gameState.on('roomChanged', () => {"
    },
    {
      "object": "this",
      "method": "render",
      "file": "src/mapRenderer.js",
      "line": 139,
      "context": "this.render();"
    },
    {
      "object": "gameState",
      "method": "on",
      "file": "src/mapRenderer.js",
      "line": 142,
      "context": "this.gameState.on('scoreChanged', () => {"
    },
    {
      "object": "this",
      "method": "render",
      "file": "src/mapRenderer.js",
      "line": 143,
      "context": "this.render();"
    },
    {
      "object": "window",
      "method": "addEventListener",
      "file": "src/mapRenderer.js",
      "line": 147,
      "context": "window.addEventListener('resize', () => {"
    },
    {
      "object": "this",
      "method": "handleResize",
      "file": "src/mapRenderer.js",
      "line": 148,
      "context": "this.handleResize();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/mapRenderer.js",
      "line": 157,
      "context": "console.log('Rendering map...');"
    },
    {
      "object": "this",
      "method": "clearCanvas",
      "file": "src/mapRenderer.js",
      "line": 160,
      "context": "this.clearCanvas();"
    },
    {
      "object": "dataLoader",
      "method": "getAllData",
      "file": "src/mapRenderer.js",
      "line": 163,
      "context": "const gameData = this.dataLoader.getAllData();"
    },
    {
      "object": "this",
      "method": "renderConnections",
      "file": "src/mapRenderer.js",
      "line": 167,
      "context": "await this.renderConnections(rooms);"
    },
    {
      "object": "this",
      "method": "renderRooms",
      "file": "src/mapRenderer.js",
      "line": 170,
      "context": "await this.renderRooms(rooms);"
    },
    {
      "object": "this",
      "method": "renderUI",
      "file": "src/mapRenderer.js",
      "line": 173,
      "context": "this.renderUI();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/mapRenderer.js",
      "line": 175,
      "context": "console.log('Map rendering complete');"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/mapRenderer.js",
      "line": 177,
      "context": "console.error('Error rendering map:', error);"
    },
    {
      "object": "this",
      "method": "renderError",
      "file": "src/mapRenderer.js",
      "line": 178,
      "context": "this.renderError(error.message);"
    },
    {
      "object": "ctx",
      "method": "fillRect",
      "file": "src/mapRenderer.js",
      "line": 187,
      "context": "this.ctx.fillRect(0, 0, this.mapWidth, this.mapHeight);"
    },
    {
      "object": "this",
      "method": "renderRoom",
      "file": "src/mapRenderer.js",
      "line": 196,
      "context": "await this.renderRoom(room);"
    },
    {
      "object": "roomPositions",
      "method": "get",
      "file": "src/mapRenderer.js",
      "line": 205,
      "context": "const position = this.roomPositions.get(room.id);"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/mapRenderer.js",
      "line": 207,
      "context": "console.warn(`No position defined for room: ${room.id}`);"
    },
    {
      "object": "this",
      "method": "getRoomState",
      "file": "src/mapRenderer.js",
      "line": 212,
      "context": "const roomState = this.getRoomState(room.id);"
    },
    {
      "object": "this",
      "method": "drawRoomShape",
      "file": "src/mapRenderer.js",
      "line": 216,
      "context": "this.drawRoomShape(position.x, position.y, color, roomState === 'current');"
    },
    {
      "object": "this",
      "method": "drawRoomIcon",
      "file": "src/mapRenderer.js",
      "line": 219,
      "context": "this.drawRoomIcon(room, position.x, position.y);"
    },
    {
      "object": "this",
      "method": "drawRoomLabel",
      "file": "src/mapRenderer.js",
      "line": 222,
      "context": "this.drawRoomLabel(room.name, position.x, position.y);"
    },
    {
      "object": "ctx",
      "method": "beginPath",
      "file": "src/mapRenderer.js",
      "line": 242,
      "context": "ctx.beginPath();"
    },
    {
      "object": "ctx",
      "method": "roundRect",
      "file": "src/mapRenderer.js",
      "line": 243,
      "context": "ctx.roundRect(left, top, size, size, radius);"
    },
    {
      "object": "ctx",
      "method": "fill",
      "file": "src/mapRenderer.js",
      "line": 247,
      "context": "ctx.fill();"
    },
    {
      "object": "ctx",
      "method": "stroke",
      "file": "src/mapRenderer.js",
      "line": 252,
      "context": "ctx.stroke();"
    },
    {
      "object": "ctx",
      "method": "fillText",
      "file": "src/mapRenderer.js",
      "line": 268,
      "context": "this.ctx.fillText(icon, x, y - 10);"
    },
    {
      "object": "ctx",
      "method": "fillText",
      "file": "src/mapRenderer.js",
      "line": 282,
      "context": "this.ctx.fillText(name, x, y + 25);"
    },
    {
      "object": "this",
      "method": "renderRoomConnections",
      "file": "src/mapRenderer.js",
      "line": 291,
      "context": "await this.renderRoomConnections(room);"
    },
    {
      "object": "roomPositions",
      "method": "get",
      "file": "src/mapRenderer.js",
      "line": 300,
      "context": "const roomPos = this.roomPositions.get(room.id);"
    },
    {
      "object": "roomPositions",
      "method": "get",
      "file": "src/mapRenderer.js",
      "line": 304,
      "context": "const connectionPos = this.roomPositions.get(connectionId);"
    },
    {
      "object": "this",
      "method": "drawConnection",
      "file": "src/mapRenderer.js",
      "line": 306,
      "context": "this.drawConnection(roomPos, connectionPos);"
    },
    {
      "object": "ctx",
      "method": "beginPath",
      "file": "src/mapRenderer.js",
      "line": 317,
      "context": "this.ctx.beginPath();"
    },
    {
      "object": "ctx",
      "method": "moveTo",
      "file": "src/mapRenderer.js",
      "line": 318,
      "context": "this.ctx.moveTo(fromPos.x, fromPos.y);"
    },
    {
      "object": "ctx",
      "method": "lineTo",
      "file": "src/mapRenderer.js",
      "line": 319,
      "context": "this.ctx.lineTo(toPos.x, toPos.y);"
    },
    {
      "object": "ctx",
      "method": "stroke",
      "file": "src/mapRenderer.js",
      "line": 322,
      "context": "this.ctx.stroke();"
    },
    {
      "object": "visitedRooms",
      "method": "has",
      "file": "src/mapRenderer.js",
      "line": 333,
      "context": "} else if (this.gameState.visitedRooms.has(roomId)) {"
    },
    {
      "object": "unlockedRooms",
      "method": "has",
      "file": "src/mapRenderer.js",
      "line": 335,
      "context": "} else if (this.gameState.unlockedRooms.has(roomId)) {"
    },
    {
      "object": "canvas",
      "method": "getBoundingClientRect",
      "file": "src/mapRenderer.js",
      "line": 347,
      "context": "const rect = this.canvas.getBoundingClientRect();"
    },
    {
      "object": "this",
      "method": "getRoomAtPosition",
      "file": "src/mapRenderer.js",
      "line": 351,
      "context": "const clickedRoom = this.getRoomAtPosition(x, y);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/mapRenderer.js",
      "line": 353,
      "context": "console.log('Clicked room:', clickedRoom);"
    },
    {
      "object": "this",
      "method": "attemptRoomNavigation",
      "file": "src/mapRenderer.js",
      "line": 354,
      "context": "this.attemptRoomNavigation(clickedRoom);"
    },
    {
      "object": "canvas",
      "method": "getBoundingClientRect",
      "file": "src/mapRenderer.js",
      "line": 363,
      "context": "const rect = this.canvas.getBoundingClientRect();"
    },
    {
      "object": "this",
      "method": "getRoomAtPosition",
      "file": "src/mapRenderer.js",
      "line": 367,
      "context": "const clickedRoom = this.getRoomAtPosition(x, y);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/mapRenderer.js",
      "line": 369,
      "context": "console.log('Double-clicked room:', clickedRoom);"
    },
    {
      "object": "this",
      "method": "getRoomStatus",
      "file": "src/mapRenderer.js",
      "line": 372,
      "context": "const roomStatus = this.getRoomStatus(clickedRoom);"
    },
    {
      "object": "this",
      "method": "showFastMovementFeedback",
      "file": "src/mapRenderer.js",
      "line": 375,
      "context": "this.showFastMovementFeedback(clickedRoom);"
    },
    {
      "object": "gameState",
      "method": "moveToRoom",
      "file": "src/mapRenderer.js",
      "line": 378,
      "context": "this.gameState.moveToRoom(clickedRoom);"
    },
    {
      "object": "quizEngine",
      "method": "handleRoomEntry",
      "file": "src/mapRenderer.js",
      "line": 382,
      "context": "window.quizEngine.handleRoomEntry(clickedRoom);"
    },
    {
      "object": "this",
      "method": "showInaccessibleRoomFeedback",
      "file": "src/mapRenderer.js",
      "line": 386,
      "context": "this.showInaccessibleRoomFeedback(clickedRoom);"
    },
    {
      "object": "canvas",
      "method": "getBoundingClientRect",
      "file": "src/mapRenderer.js",
      "line": 396,
      "context": "const rect = this.canvas.getBoundingClientRect();"
    },
    {
      "object": "this",
      "method": "getRoomAtPosition",
      "file": "src/mapRenderer.js",
      "line": 400,
      "context": "const hoveredRoom = this.getRoomAtPosition(x, y);"
    },
    {
      "object": "Math",
      "method": "sqrt",
      "file": "src/mapRenderer.js",
      "line": 416,
      "context": "const distance = Math.sqrt("
    },
    {
      "object": "Math",
      "method": "pow",
      "file": "src/mapRenderer.js",
      "line": 417,
      "context": "Math.pow(x - position.x, 2) +"
    },
    {
      "object": "Math",
      "method": "pow",
      "file": "src/mapRenderer.js",
      "line": 418,
      "context": "Math.pow(y - position.y, 2)"
    },
    {
      "object": "gameState",
      "method": "moveToRoom",
      "file": "src/mapRenderer.js",
      "line": 434,
      "context": "await this.gameState.moveToRoom(roomId);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/mapRenderer.js",
      "line": 435,
      "context": "console.log('Successfully moved to room:', roomId);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/mapRenderer.js",
      "line": 437,
      "context": "console.log('Room navigation failed:', error.message);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/mapRenderer.js",
      "line": 448,
      "context": "console.log('Window resized, map renderer handling resize');"
    },
    {
      "object": "this",
      "method": "drawMapTitle",
      "file": "src/mapRenderer.js",
      "line": 456,
      "context": "this.drawMapTitle();"
    },
    {
      "object": "ctx",
      "method": "fillText",
      "file": "src/mapRenderer.js",
      "line": 467,
      "context": "this.ctx.fillText('Castle Map', this.mapWidth / 2, 10);"
    },
    {
      "object": "roomPositions",
      "method": "get",
      "file": "src/mapRenderer.js",
      "line": 475,
      "context": "const position = this.roomPositions.get(roomId);"
    },
    {
      "object": "this",
      "method": "drawRoom",
      "file": "src/mapRenderer.js",
      "line": 483,
      "context": "this.drawRoom(roomId, position.x, position.y, '#FFD700'); // Gold flash"
    },
    {
      "object": "this",
      "method": "render",
      "file": "src/mapRenderer.js",
      "line": 485,
      "context": "this.render(); // Return to normal"
    },
    {
      "object": "roomPositions",
      "method": "get",
      "file": "src/mapRenderer.js",
      "line": 495,
      "context": "const position = this.roomPositions.get(roomId);"
    },
    {
      "object": "this",
      "method": "drawRoom",
      "file": "src/mapRenderer.js",
      "line": 500,
      "context": "this.drawRoom(roomId, position.x, position.y, '#E53E3E'); // Red flash"
    },
    {
      "object": "this",
      "method": "render",
      "file": "src/mapRenderer.js",
      "line": 502,
      "context": "this.render(); // Return to normal"
    },
    {
      "object": "uiManager",
      "method": "showTooltip",
      "file": "src/mapRenderer.js",
      "line": 508,
      "context": "this.uiManager.showTooltip('This room is not accessible yet!', 2000);"
    },
    {
      "object": "this",
      "method": "clearCanvas",
      "file": "src/mapRenderer.js",
      "line": 517,
      "context": "this.clearCanvas();"
    },
    {
      "object": "ctx",
      "method": "fillText",
      "file": "src/mapRenderer.js",
      "line": 523,
      "context": "this.ctx.fillText("
    },
    {
      "object": "Object",
      "method": "fromEntries",
      "file": "src/mapRenderer.js",
      "line": 537,
      "context": "roomPositions: Object.fromEntries(this.roomPositions),"
    },
    {
      "object": "Array",
      "method": "from",
      "file": "src/mapRenderer.js",
      "line": 539,
      "context": "visitedRooms: Array.from(this.gameState.visitedRooms),"
    },
    {
      "object": "Array",
      "method": "from",
      "file": "src/mapRenderer.js",
      "line": 540,
      "context": "unlockedRooms: Array.from(this.gameState.unlockedRooms)"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/mapRenderer.js",
      "line": 558,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "navigateWithKeyboard",
      "file": "src/mapRenderer.js",
      "line": 559,
      "context": "this.navigateWithKeyboard(direction);"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/mapRenderer.js",
      "line": 561,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "activateCurrentRoom",
      "file": "src/mapRenderer.js",
      "line": 562,
      "context": "this.activateCurrentRoom();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/mapRenderer.js",
      "line": 564,
      "context": "event.preventDefault();"
    },
    {
      "object": "canvas",
      "method": "blur",
      "file": "src/mapRenderer.js",
      "line": 565,
      "context": "this.canvas.blur();"
    },
    {
      "object": "dataLoader",
      "method": "getRoom",
      "file": "src/mapRenderer.js",
      "line": 575,
      "context": "const currentRoom = this.dataLoader.getRoom(currentRoomId);"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/mapRenderer.js",
      "line": 578,
      "context": "console.warn('No current room for keyboard navigation');"
    },
    {
      "object": "this",
      "method": "findRoomInDirection",
      "file": "src/mapRenderer.js",
      "line": 583,
      "context": "const targetRoomId = this.findRoomInDirection(currentRoomId, direction);"
    },
    {
      "object": "dataLoader",
      "method": "getRoom",
      "file": "src/mapRenderer.js",
      "line": 586,
      "context": "const targetRoom = this.dataLoader.getRoom(targetRoomId);"
    },
    {
      "object": "gameState",
      "method": "isRoomAccessible",
      "file": "src/mapRenderer.js",
      "line": 587,
      "context": "if (targetRoom && this.gameState.isRoomAccessible(targetRoomId)) {"
    },
    {
      "object": "this",
      "method": "announceRoomNavigation",
      "file": "src/mapRenderer.js",
      "line": 589,
      "context": "this.announceRoomNavigation(targetRoom, direction);"
    },
    {
      "object": "this",
      "method": "attemptRoomNavigation",
      "file": "src/mapRenderer.js",
      "line": 592,
      "context": "this.attemptRoomNavigation(targetRoomId);"
    },
    {
      "object": "this",
      "method": "announceNavigationBlocked",
      "file": "src/mapRenderer.js",
      "line": 595,
      "context": "this.announceNavigationBlocked(direction);"
    },
    {
      "object": "this",
      "method": "announceNoRoom",
      "file": "src/mapRenderer.js",
      "line": 599,
      "context": "this.announceNoRoom(direction);"
    },
    {
      "object": "roomPositions",
      "method": "get",
      "file": "src/mapRenderer.js",
      "line": 610,
      "context": "const currentPos = this.roomPositions.get(fromRoomId);"
    },
    {
      "object": "roomPositions",
      "method": "entries",
      "file": "src/mapRenderer.js",
      "line": 629,
      "context": "for (const [roomId, position] of this.roomPositions.entries()) {"
    },
    {
      "object": "Math",
      "method": "sqrt",
      "file": "src/mapRenderer.js",
      "line": 640,
      "context": "const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);"
    },
    {
      "object": "gameState",
      "method": "isRoomAccessible",
      "file": "src/mapRenderer.js",
      "line": 658,
      "context": "if (this.gameState.isRoomAccessible(currentRoomId)) {"
    },
    {
      "object": "this",
      "method": "attemptRoomNavigation",
      "file": "src/mapRenderer.js",
      "line": 660,
      "context": "this.attemptRoomNavigation(currentRoomId);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/mapRenderer.js",
      "line": 671,
      "context": "console.log(`♿ Map navigation: ${message}`);"
    },
    {
      "object": "document",
      "method": "dispatchEvent",
      "file": "src/mapRenderer.js",
      "line": 677,
      "context": "document.dispatchEvent(event);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/mapRenderer.js",
      "line": 686,
      "context": "console.log(`♿ Map navigation blocked: ${message}`);"
    },
    {
      "object": "document",
      "method": "dispatchEvent",
      "file": "src/mapRenderer.js",
      "line": 691,
      "context": "document.dispatchEvent(event);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/mapRenderer.js",
      "line": 700,
      "context": "console.log(`♿ Map navigation: ${message}`);"
    },
    {
      "object": "document",
      "method": "dispatchEvent",
      "file": "src/mapRenderer.js",
      "line": 705,
      "context": "document.dispatchEvent(event);"
    },
    {
      "object": "dataLoader",
      "method": "getRoom",
      "file": "src/mapRenderer.js",
      "line": 712,
      "context": "const currentRoom = this.dataLoader.getRoom(this.gameState.currentRoomId);"
    },
    {
      "object": "Array",
      "method": "from",
      "file": "src/mapRenderer.js",
      "line": 715,
      "context": "const accessibleRooms = Array.from(this.gameState.unlockedRooms)"
    },
    {
      "object": "dataLoader",
      "method": "getRoom",
      "file": "src/mapRenderer.js",
      "line": 717,
      "context": ".map(roomId => this.dataLoader.getRoom(roomId))"
    },
    {
      "object": "accessibleRooms",
      "method": "join",
      "file": "src/mapRenderer.js",
      "line": 722,
      "context": "`Accessible rooms: ${accessibleRooms.length > 0 ? accessibleRooms.join(', ') : 'none'}. ` +"
    },
    {
      "object": "document",
      "method": "dispatchEvent",
      "file": "src/mapRenderer.js",
      "line": 728,
      "context": "document.dispatchEvent(event);"
    },
    {
      "object": "this",
      "method": "setupGlobalErrorHandler",
      "file": "src/errorBoundary.js",
      "line": 14,
      "context": "this.setupGlobalErrorHandler();"
    },
    {
      "object": "this",
      "method": "injectErrorStyles",
      "file": "src/errorBoundary.js",
      "line": 15,
      "context": "this.injectErrorStyles();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/errorBoundary.js",
      "line": 17,
      "context": "console.log('🛡️ ErrorBoundary initialized - Enhanced error recovery system active');"
    },
    {
      "object": "window",
      "method": "addEventListener",
      "file": "src/errorBoundary.js",
      "line": 25,
      "context": "window.addEventListener('error', (event) => {"
    },
    {
      "object": "this",
      "method": "handleError",
      "file": "src/errorBoundary.js",
      "line": 26,
      "context": "this.handleError({"
    },
    {
      "object": "window",
      "method": "addEventListener",
      "file": "src/errorBoundary.js",
      "line": 38,
      "context": "window.addEventListener('unhandledrejection', (event) => {"
    },
    {
      "object": "this",
      "method": "handleError",
      "file": "src/errorBoundary.js",
      "line": 39,
      "context": "this.handleError({"
    },
    {
      "object": "window",
      "method": "addEventListener",
      "file": "src/errorBoundary.js",
      "line": 48,
      "context": "window.addEventListener('error', (event) => {"
    },
    {
      "object": "this",
      "method": "handleError",
      "file": "src/errorBoundary.js",
      "line": 50,
      "context": "this.handleError({"
    },
    {
      "object": "errorLog",
      "method": "push",
      "file": "src/errorBoundary.js",
      "line": 74,
      "context": "this.errorLog.push(logEntry);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/errorBoundary.js",
      "line": 75,
      "context": "console.error(`🚨 Error #${this.errorCount}:`, errorInfo);"
    },
    {
      "object": "this",
      "method": "attemptAutoSave",
      "file": "src/errorBoundary.js",
      "line": 78,
      "context": "this.attemptAutoSave();"
    },
    {
      "object": "this",
      "method": "showRecoveryDialog",
      "file": "src/errorBoundary.js",
      "line": 82,
      "context": "this.showRecoveryDialog(errorInfo);"
    },
    {
      "object": "this",
      "method": "showCriticalErrorScreen",
      "file": "src/errorBoundary.js",
      "line": 84,
      "context": "this.showCriticalErrorScreen();"
    },
    {
      "object": "gameState",
      "method": "saveGame",
      "file": "src/errorBoundary.js",
      "line": 94,
      "context": "this.gameState.saveGame();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/errorBoundary.js",
      "line": 95,
      "context": "console.log('💾 Auto-saved game state due to error');"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/errorBoundary.js",
      "line": 98,
      "context": "console.warn('⚠️ Failed to auto-save game state:', saveError);"
    },
    {
      "object": "document",
      "method": "querySelector",
      "file": "src/errorBoundary.js",
      "line": 108,
      "context": "if (document.querySelector('.error-recovery-dialog')) {"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/errorBoundary.js",
      "line": 112,
      "context": "const dialog = document.createElement('div');"
    },
    {
      "object": "dialog",
      "method": "setAttribute",
      "file": "src/errorBoundary.js",
      "line": 114,
      "context": "dialog.setAttribute('role', 'dialog');"
    },
    {
      "object": "dialog",
      "method": "setAttribute",
      "file": "src/errorBoundary.js",
      "line": 115,
      "context": "dialog.setAttribute('aria-labelledby', 'error-title');"
    },
    {
      "object": "dialog",
      "method": "setAttribute",
      "file": "src/errorBoundary.js",
      "line": 116,
      "context": "dialog.setAttribute('aria-describedby', 'error-description');"
    },
    {
      "object": "this",
      "method": "escapeHtml",
      "file": "src/errorBoundary.js",
      "line": 136,
      "context": "<code>${this.escapeHtml(errorInfo.message || 'Unknown error')}</code>"
    },
    {
      "object": "this",
      "method": "handleRefresh",
      "file": "src/errorBoundary.js",
      "line": 141,
      "context": "<button class=\"error-btn error-btn-primary\" onclick=\"this.handleRefresh()\">"
    },
    {
      "object": "this",
      "method": "handleContinue",
      "file": "src/errorBoundary.js",
      "line": 144,
      "context": "<button class=\"error-btn error-btn-secondary\" onclick=\"this.handleContinue()\">"
    },
    {
      "object": "this",
      "method": "handleSaveExit",
      "file": "src/errorBoundary.js",
      "line": 147,
      "context": "<button class=\"error-btn error-btn-secondary\" onclick=\"this.handleSaveExit()\">"
    },
    {
      "object": "this",
      "method": "handleToggleDetails",
      "file": "src/errorBoundary.js",
      "line": 150,
      "context": "<button class=\"error-btn error-btn-tertiary\" onclick=\"this.handleToggleDetails()\">"
    },
    {
      "object": "this",
      "method": "setupDialogHandlers",
      "file": "src/errorBoundary.js",
      "line": 162,
      "context": "this.setupDialogHandlers(dialog);"
    },
    {
      "object": "body",
      "method": "appendChild",
      "file": "src/errorBoundary.js",
      "line": 164,
      "context": "document.body.appendChild(dialog);"
    },
    {
      "object": "dialog",
      "method": "querySelector",
      "file": "src/errorBoundary.js",
      "line": 168,
      "context": "const primaryButton = dialog.querySelector('.error-btn-primary');"
    },
    {
      "object": "primaryButton",
      "method": "focus",
      "file": "src/errorBoundary.js",
      "line": 169,
      "context": "if (primaryButton) primaryButton.focus();"
    },
    {
      "object": "dialog",
      "method": "querySelector",
      "file": "src/errorBoundary.js",
      "line": 178,
      "context": "const refreshBtn = dialog.querySelector('button[onclick*=\"handleRefresh\"]');"
    },
    {
      "object": "dialog",
      "method": "querySelector",
      "file": "src/errorBoundary.js",
      "line": 179,
      "context": "const continueBtn = dialog.querySelector('button[onclick*=\"handleContinue\"]');"
    },
    {
      "object": "dialog",
      "method": "querySelector",
      "file": "src/errorBoundary.js",
      "line": 180,
      "context": "const saveExitBtn = dialog.querySelector('button[onclick*=\"handleSaveExit\"]');"
    },
    {
      "object": "dialog",
      "method": "querySelector",
      "file": "src/errorBoundary.js",
      "line": 181,
      "context": "const detailsBtn = dialog.querySelector('button[onclick*=\"handleToggleDetails\"]');"
    },
    {
      "object": "this",
      "method": "handleRefresh",
      "file": "src/errorBoundary.js",
      "line": 184,
      "context": "refreshBtn.onclick = () => this.handleRefresh();"
    },
    {
      "object": "this",
      "method": "handleContinue",
      "file": "src/errorBoundary.js",
      "line": 188,
      "context": "continueBtn.onclick = () => this.handleContinue(dialog);"
    },
    {
      "object": "this",
      "method": "handleSaveExit",
      "file": "src/errorBoundary.js",
      "line": 192,
      "context": "saveExitBtn.onclick = () => this.handleSaveExit();"
    },
    {
      "object": "this",
      "method": "handleToggleDetails",
      "file": "src/errorBoundary.js",
      "line": 196,
      "context": "detailsBtn.onclick = () => this.handleToggleDetails(dialog);"
    },
    {
      "object": "dialog",
      "method": "addEventListener",
      "file": "src/errorBoundary.js",
      "line": 200,
      "context": "dialog.addEventListener('keydown', (event) => {"
    },
    {
      "object": "this",
      "method": "handleContinue",
      "file": "src/errorBoundary.js",
      "line": 202,
      "context": "this.handleContinue(dialog);"
    },
    {
      "object": "location",
      "method": "reload",
      "file": "src/errorBoundary.js",
      "line": 212,
      "context": "window.location.reload();"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/errorBoundary.js",
      "line": 214,
      "context": "console.error('Failed to refresh:', error);"
    },
    {
      "object": "dialog",
      "method": "remove",
      "file": "src/errorBoundary.js",
      "line": 225,
      "context": "dialog.remove();"
    },
    {
      "object": "uiManager",
      "method": "announceToScreenReader",
      "file": "src/errorBoundary.js",
      "line": 230,
      "context": "this.uiManager.announceToScreenReader('Continuing game after error recovery');"
    },
    {
      "object": "gameState",
      "method": "saveGame",
      "file": "src/errorBoundary.js",
      "line": 240,
      "context": "this.gameState.saveGame();"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/errorBoundary.js",
      "line": 244,
      "context": "const confirmDialog = document.createElement('div');"
    },
    {
      "object": "parentElement",
      "method": "remove",
      "file": "src/errorBoundary.js",
      "line": 250,
      "context": "<button class=\"error-btn error-btn-primary\" onclick=\"this.parentElement.parentElement.remove()\">"
    },
    {
      "object": "body",
      "method": "appendChild",
      "file": "src/errorBoundary.js",
      "line": 256,
      "context": "document.body.appendChild(confirmDialog);"
    },
    {
      "object": "confirmDialog",
      "method": "remove",
      "file": "src/errorBoundary.js",
      "line": 261,
      "context": "confirmDialog.remove();"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/errorBoundary.js",
      "line": 266,
      "context": "console.error('Failed to save game:', error);"
    },
    {
      "object": "dialog",
      "method": "querySelector",
      "file": "src/errorBoundary.js",
      "line": 276,
      "context": "const details = dialog.querySelector('.error-details');"
    },
    {
      "object": "dialog",
      "method": "querySelector",
      "file": "src/errorBoundary.js",
      "line": 277,
      "context": "const button = dialog.querySelector('button[onclick*=\"handleToggleDetails\"]');"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/errorBoundary.js",
      "line": 293,
      "context": "const criticalScreen = document.createElement('div');"
    },
    {
      "object": "criticalScreen",
      "method": "setAttribute",
      "file": "src/errorBoundary.js",
      "line": 295,
      "context": "criticalScreen.setAttribute('role', 'dialog');"
    },
    {
      "object": "criticalScreen",
      "method": "setAttribute",
      "file": "src/errorBoundary.js",
      "line": 296,
      "context": "criticalScreen.setAttribute('aria-labelledby', 'critical-error-title');"
    },
    {
      "object": "location",
      "method": "reload",
      "file": "src/errorBoundary.js",
      "line": 319,
      "context": "<button class=\"error-btn error-btn-primary\" onclick=\"window.location.reload()\">"
    },
    {
      "object": "this",
      "method": "showErrorLog",
      "file": "src/errorBoundary.js",
      "line": 322,
      "context": "<button class=\"error-btn error-btn-secondary\" onclick=\"this.showErrorLog()\">"
    },
    {
      "object": "body",
      "method": "appendChild",
      "file": "src/errorBoundary.js",
      "line": 329,
      "context": "document.body.appendChild(criticalScreen);"
    },
    {
      "object": "window",
      "method": "open",
      "file": "src/errorBoundary.js",
      "line": 336,
      "context": "const logWindow = window.open('', '_blank', 'width=800,height=600');"
    },
    {
      "object": "document",
      "method": "write",
      "file": "src/errorBoundary.js",
      "line": 337,
      "context": "logWindow.document.write(`"
    },
    {
      "object": "JSON",
      "method": "stringify",
      "file": "src/errorBoundary.js",
      "line": 342,
      "context": "<pre>${JSON.stringify(this.errorLog, null, 2)}</pre>"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/errorBoundary.js",
      "line": 354,
      "context": "const div = document.createElement('div');"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/errorBoundary.js",
      "line": 522,
      "context": "const styleSheet = document.createElement('style');"
    },
    {
      "object": "head",
      "method": "appendChild",
      "file": "src/errorBoundary.js",
      "line": 524,
      "context": "document.head.appendChild(styleSheet);"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/errorBoundary.js",
      "line": 549,
      "context": "document.querySelectorAll('.error-recovery-dialog, .critical-error-screen').forEach(dialog => {"
    },
    {
      "object": "dialog",
      "method": "remove",
      "file": "src/errorBoundary.js",
      "line": 550,
      "context": "dialog.remove();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/accessibilityManager.js",
      "line": 28,
      "context": "console.log('♿ AccessibilityManager initialized');"
    },
    {
      "object": "this",
      "method": "initialize",
      "file": "src/accessibilityManager.js",
      "line": 29,
      "context": "this.initialize();"
    },
    {
      "object": "this",
      "method": "loadPreferences",
      "file": "src/accessibilityManager.js",
      "line": 36,
      "context": "this.loadPreferences();"
    },
    {
      "object": "this",
      "method": "setupKeyboardNavigation",
      "file": "src/accessibilityManager.js",
      "line": 37,
      "context": "this.setupKeyboardNavigation();"
    },
    {
      "object": "this",
      "method": "enhanceARIA",
      "file": "src/accessibilityManager.js",
      "line": 38,
      "context": "this.enhanceARIA();"
    },
    {
      "object": "this",
      "method": "createLiveRegions",
      "file": "src/accessibilityManager.js",
      "line": 39,
      "context": "this.createLiveRegions();"
    },
    {
      "object": "this",
      "method": "setupHighContrastMode",
      "file": "src/accessibilityManager.js",
      "line": 40,
      "context": "this.setupHighContrastMode();"
    },
    {
      "object": "this",
      "method": "detectAccessibilityFeatures",
      "file": "src/accessibilityManager.js",
      "line": 41,
      "context": "this.detectAccessibilityFeatures();"
    },
    {
      "object": "this",
      "method": "setupFocusManagement",
      "file": "src/accessibilityManager.js",
      "line": 42,
      "context": "this.setupFocusManagement();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/accessibilityManager.js",
      "line": 44,
      "context": "console.log('♿ Accessibility features initialized');"
    },
    {
      "object": "localStorage",
      "method": "getItem",
      "file": "src/accessibilityManager.js",
      "line": 52,
      "context": "const saved = localStorage.getItem('accessibility-preferences');"
    },
    {
      "object": "JSON",
      "method": "parse",
      "file": "src/accessibilityManager.js",
      "line": 54,
      "context": "this.preferences = { ...this.preferences, ...JSON.parse(saved) };"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/accessibilityManager.js",
      "line": 55,
      "context": "console.log('♿ Loaded accessibility preferences');"
    },
    {
      "object": "this",
      "method": "applyPreferences",
      "file": "src/accessibilityManager.js",
      "line": 59,
      "context": "this.applyPreferences();"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/accessibilityManager.js",
      "line": 61,
      "context": "console.warn('⚠️ Could not load accessibility preferences:', error);"
    },
    {
      "object": "localStorage",
      "method": "setItem",
      "file": "src/accessibilityManager.js",
      "line": 70,
      "context": "localStorage.setItem('accessibility-preferences', JSON.stringify(this.preferences));"
    },
    {
      "object": "JSON",
      "method": "stringify",
      "file": "src/accessibilityManager.js",
      "line": 70,
      "context": "localStorage.setItem('accessibility-preferences', JSON.stringify(this.preferences));"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/accessibilityManager.js",
      "line": 71,
      "context": "console.log('♿ Saved accessibility preferences');"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/accessibilityManager.js",
      "line": 73,
      "context": "console.warn('⚠️ Could not save accessibility preferences:', error);"
    },
    {
      "object": "this",
      "method": "enableHighContrastMode",
      "file": "src/accessibilityManager.js",
      "line": 82,
      "context": "this.enableHighContrastMode();"
    },
    {
      "object": "this",
      "method": "enableReducedMotion",
      "file": "src/accessibilityManager.js",
      "line": 86,
      "context": "this.enableReducedMotion();"
    },
    {
      "object": "this",
      "method": "enableLargeText",
      "file": "src/accessibilityManager.js",
      "line": 90,
      "context": "this.enableLargeText();"
    },
    {
      "object": "this",
      "method": "enableScreenReaderMode",
      "file": "src/accessibilityManager.js",
      "line": 94,
      "context": "this.enableScreenReaderMode();"
    },
    {
      "object": "window",
      "method": "matchMedia",
      "file": "src/accessibilityManager.js",
      "line": 104,
      "context": "const reducedMotionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');"
    },
    {
      "object": "reducedMotionQuery",
      "method": "addEventListener",
      "file": "src/accessibilityManager.js",
      "line": 108,
      "context": "reducedMotionQuery.addEventListener('change', (e) => {"
    },
    {
      "object": "this",
      "method": "applyPreferences",
      "file": "src/accessibilityManager.js",
      "line": 110,
      "context": "this.applyPreferences();"
    },
    {
      "object": "this",
      "method": "announce",
      "file": "src/accessibilityManager.js",
      "line": 111,
      "context": "this.announce('Motion preferences updated');"
    },
    {
      "object": "window",
      "method": "matchMedia",
      "file": "src/accessibilityManager.js",
      "line": 117,
      "context": "const highContrastQuery = window.matchMedia('(prefers-contrast: high)');"
    },
    {
      "object": "this",
      "method": "enableHighContrastMode",
      "file": "src/accessibilityManager.js",
      "line": 120,
      "context": "this.enableHighContrastMode();"
    },
    {
      "object": "this",
      "method": "detectScreenReader",
      "file": "src/accessibilityManager.js",
      "line": 125,
      "context": "this.detectScreenReader();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/accessibilityManager.js",
      "line": 127,
      "context": "console.log('♿ Accessibility features detected:', this.preferences);"
    },
    {
      "object": "userAgent",
      "method": "includes",
      "file": "src/accessibilityManager.js",
      "line": 137,
      "context": "navigator.userAgent.includes('NVDA') ||"
    },
    {
      "object": "userAgent",
      "method": "includes",
      "file": "src/accessibilityManager.js",
      "line": 138,
      "context": "navigator.userAgent.includes('JAWS') ||"
    },
    {
      "object": "userAgent",
      "method": "includes",
      "file": "src/accessibilityManager.js",
      "line": 139,
      "context": "navigator.userAgent.includes('Orca'),"
    },
    {
      "object": "window",
      "method": "matchMedia",
      "file": "src/accessibilityManager.js",
      "line": 145,
      "context": "window.matchMedia && window.matchMedia('(forced-colors: active)').matches"
    },
    {
      "object": "indicators",
      "method": "some",
      "file": "src/accessibilityManager.js",
      "line": 148,
      "context": "if (indicators.some(indicator => indicator)) {"
    },
    {
      "object": "this",
      "method": "enableScreenReaderMode",
      "file": "src/accessibilityManager.js",
      "line": 150,
      "context": "this.enableScreenReaderMode();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/accessibilityManager.js",
      "line": 151,
      "context": "console.log('♿ Screen reader detected');"
    },
    {
      "object": "document",
      "method": "addEventListener",
      "file": "src/accessibilityManager.js",
      "line": 160,
      "context": "document.addEventListener('keydown', (event) => {"
    },
    {
      "object": "this",
      "method": "handleGlobalKeyPress",
      "file": "src/accessibilityManager.js",
      "line": 161,
      "context": "this.handleGlobalKeyPress(event);"
    },
    {
      "object": "keyboardShortcuts",
      "method": "set",
      "file": "src/accessibilityManager.js",
      "line": 165,
      "context": "this.keyboardShortcuts.set('Alt+1', () => this.focusOnSection('map-area'));"
    },
    {
      "object": "this",
      "method": "focusOnSection",
      "file": "src/accessibilityManager.js",
      "line": 165,
      "context": "this.keyboardShortcuts.set('Alt+1', () => this.focusOnSection('map-area'));"
    },
    {
      "object": "keyboardShortcuts",
      "method": "set",
      "file": "src/accessibilityManager.js",
      "line": 166,
      "context": "this.keyboardShortcuts.set('Alt+2', () => this.focusOnSection('room-info'));"
    },
    {
      "object": "this",
      "method": "focusOnSection",
      "file": "src/accessibilityManager.js",
      "line": 166,
      "context": "this.keyboardShortcuts.set('Alt+2', () => this.focusOnSection('room-info'));"
    },
    {
      "object": "keyboardShortcuts",
      "method": "set",
      "file": "src/accessibilityManager.js",
      "line": 167,
      "context": "this.keyboardShortcuts.set('Alt+3', () => this.focusOnSection('question-area'));"
    },
    {
      "object": "this",
      "method": "focusOnSection",
      "file": "src/accessibilityManager.js",
      "line": 167,
      "context": "this.keyboardShortcuts.set('Alt+3', () => this.focusOnSection('question-area'));"
    },
    {
      "object": "keyboardShortcuts",
      "method": "set",
      "file": "src/accessibilityManager.js",
      "line": 168,
      "context": "this.keyboardShortcuts.set('Alt+4', () => this.focusOnSection('answer-buttons'));"
    },
    {
      "object": "this",
      "method": "focusOnSection",
      "file": "src/accessibilityManager.js",
      "line": 168,
      "context": "this.keyboardShortcuts.set('Alt+4', () => this.focusOnSection('answer-buttons'));"
    },
    {
      "object": "keyboardShortcuts",
      "method": "set",
      "file": "src/accessibilityManager.js",
      "line": 169,
      "context": "this.keyboardShortcuts.set('Alt+5', () => this.focusOnSection('game-controls'));"
    },
    {
      "object": "this",
      "method": "focusOnSection",
      "file": "src/accessibilityManager.js",
      "line": 169,
      "context": "this.keyboardShortcuts.set('Alt+5', () => this.focusOnSection('game-controls'));"
    },
    {
      "object": "keyboardShortcuts",
      "method": "set",
      "file": "src/accessibilityManager.js",
      "line": 170,
      "context": "this.keyboardShortcuts.set('Alt+h', () => this.toggleHighContrastMode());"
    },
    {
      "object": "this",
      "method": "toggleHighContrastMode",
      "file": "src/accessibilityManager.js",
      "line": 170,
      "context": "this.keyboardShortcuts.set('Alt+h', () => this.toggleHighContrastMode());"
    },
    {
      "object": "keyboardShortcuts",
      "method": "set",
      "file": "src/accessibilityManager.js",
      "line": 171,
      "context": "this.keyboardShortcuts.set('Alt+?', () => this.showKeyboardHelp());"
    },
    {
      "object": "this",
      "method": "showKeyboardHelp",
      "file": "src/accessibilityManager.js",
      "line": 171,
      "context": "this.keyboardShortcuts.set('Alt+?', () => this.showKeyboardHelp());"
    },
    {
      "object": "keyboardShortcuts",
      "method": "set",
      "file": "src/accessibilityManager.js",
      "line": 172,
      "context": "this.keyboardShortcuts.set('Alt+s', () => this.skipToMainContent());"
    },
    {
      "object": "this",
      "method": "skipToMainContent",
      "file": "src/accessibilityManager.js",
      "line": 172,
      "context": "this.keyboardShortcuts.set('Alt+s', () => this.skipToMainContent());"
    },
    {
      "object": "this",
      "method": "setupSpatialNavigation",
      "file": "src/accessibilityManager.js",
      "line": 175,
      "context": "this.setupSpatialNavigation();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/accessibilityManager.js",
      "line": 177,
      "context": "console.log('⌨️ Keyboard navigation setup complete');"
    },
    {
      "object": "this",
      "method": "getKeyboardShortcut",
      "file": "src/accessibilityManager.js",
      "line": 184,
      "context": "const key = this.getKeyboardShortcut(event);"
    },
    {
      "object": "keyboardShortcuts",
      "method": "has",
      "file": "src/accessibilityManager.js",
      "line": 187,
      "context": "if (this.keyboardShortcuts.has(key)) {"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 188,
      "context": "event.preventDefault();"
    },
    {
      "object": "keyboardShortcuts",
      "method": "get",
      "file": "src/accessibilityManager.js",
      "line": 189,
      "context": "this.keyboardShortcuts.get(key)();"
    },
    {
      "object": "this",
      "method": "handleTabNavigation",
      "file": "src/accessibilityManager.js",
      "line": 196,
      "context": "this.handleTabNavigation(event);"
    },
    {
      "object": "this",
      "method": "handleActivation",
      "file": "src/accessibilityManager.js",
      "line": 200,
      "context": "this.handleActivation(event);"
    },
    {
      "object": "this",
      "method": "handleEscape",
      "file": "src/accessibilityManager.js",
      "line": 203,
      "context": "this.handleEscape(event);"
    },
    {
      "object": "this",
      "method": "handleArrowNavigation",
      "file": "src/accessibilityManager.js",
      "line": 209,
      "context": "this.handleArrowNavigation(event);"
    },
    {
      "object": "this",
      "method": "handleNumberKeyPress",
      "file": "src/accessibilityManager.js",
      "line": 216,
      "context": "this.handleNumberKeyPress(event);"
    },
    {
      "object": "modifiers",
      "method": "push",
      "file": "src/accessibilityManager.js",
      "line": 226,
      "context": "if (event.ctrlKey) modifiers.push('Ctrl');"
    },
    {
      "object": "modifiers",
      "method": "push",
      "file": "src/accessibilityManager.js",
      "line": 227,
      "context": "if (event.altKey) modifiers.push('Alt');"
    },
    {
      "object": "modifiers",
      "method": "push",
      "file": "src/accessibilityManager.js",
      "line": 228,
      "context": "if (event.shiftKey) modifiers.push('Shift');"
    },
    {
      "object": "modifiers",
      "method": "push",
      "file": "src/accessibilityManager.js",
      "line": 230,
      "context": "modifiers.push(event.key);"
    },
    {
      "object": "modifiers",
      "method": "join",
      "file": "src/accessibilityManager.js",
      "line": 231,
      "context": "return modifiers.join('+');"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 239,
      "context": "const mapCanvas = document.getElementById('map-canvas');"
    },
    {
      "object": "mapCanvas",
      "method": "addEventListener",
      "file": "src/accessibilityManager.js",
      "line": 241,
      "context": "mapCanvas.addEventListener('keydown', (event) => {"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 243,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "navigateMapWithKeys",
      "file": "src/accessibilityManager.js",
      "line": 244,
      "context": "this.navigateMapWithKeys(event.key);"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 250,
      "context": "const answerContainer = document.getElementById('answer-buttons');"
    },
    {
      "object": "answerContainer",
      "method": "addEventListener",
      "file": "src/accessibilityManager.js",
      "line": 252,
      "context": "answerContainer.addEventListener('keydown', (event) => {"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 254,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "navigateAnswersWithKeys",
      "file": "src/accessibilityManager.js",
      "line": 255,
      "context": "this.navigateAnswersWithKeys(event.key);"
    },
    {
      "object": "this",
      "method": "announce",
      "file": "src/accessibilityManager.js",
      "line": 274,
      "context": "this.announce(`Navigating ${mappedDirection} on map`);"
    },
    {
      "object": "document",
      "method": "dispatchEvent",
      "file": "src/accessibilityManager.js",
      "line": 280,
      "context": "document.dispatchEvent(event);"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 287,
      "context": "const buttons = document.querySelectorAll('#answer-buttons button:not([disabled])');"
    },
    {
      "object": "Array",
      "method": "from",
      "file": "src/accessibilityManager.js",
      "line": 291,
      "context": "let currentIndex = Array.from(buttons).indexOf(currentFocus);"
    },
    {
      "object": "this",
      "method": "announce",
      "file": "src/accessibilityManager.js",
      "line": 300,
      "context": "this.announce(`Answer option ${currentIndex + 1}: ${buttons[currentIndex].textContent}`);"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 308,
      "context": "const questionArea = document.getElementById('question-area');"
    },
    {
      "object": "questionArea",
      "method": "contains",
      "file": "src/accessibilityManager.js",
      "line": 309,
      "context": "if (!questionArea || !questionArea.contains(document.activeElement)) {"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 314,
      "context": "const buttons = document.querySelectorAll('#answer-buttons button:not([disabled])');"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 317,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "announce",
      "file": "src/accessibilityManager.js",
      "line": 319,
      "context": "this.announce(`Selected answer ${event.key}: ${buttons[answerIndex].textContent}`);"
    },
    {
      "object": "this",
      "method": "addSkipLinks",
      "file": "src/accessibilityManager.js",
      "line": 328,
      "context": "this.addSkipLinks();"
    },
    {
      "object": "this",
      "method": "enhanceFormControls",
      "file": "src/accessibilityManager.js",
      "line": 331,
      "context": "this.enhanceFormControls();"
    },
    {
      "object": "this",
      "method": "addLandmarkRoles",
      "file": "src/accessibilityManager.js",
      "line": 334,
      "context": "this.addLandmarkRoles();"
    },
    {
      "object": "this",
      "method": "enhanceDynamicContent",
      "file": "src/accessibilityManager.js",
      "line": 337,
      "context": "this.enhanceDynamicContent();"
    },
    {
      "object": "this",
      "method": "addKeyboardInstructions",
      "file": "src/accessibilityManager.js",
      "line": 340,
      "context": "this.addKeyboardInstructions();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/accessibilityManager.js",
      "line": 342,
      "context": "console.log('♿ ARIA enhancements applied');"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/accessibilityManager.js",
      "line": 349,
      "context": "const skipLinks = document.createElement('div');"
    },
    {
      "object": "body",
      "method": "insertBefore",
      "file": "src/accessibilityManager.js",
      "line": 358,
      "context": "document.body.insertBefore(skipLinks, document.body.firstChild);"
    },
    {
      "object": "document",
      "method": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 361,
      "context": "const gameMain = document.querySelector('.game-main');"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 372,
      "context": "const buttons = document.querySelectorAll('button:not([aria-label])');"
    },
    {
      "object": "buttons",
      "method": "forEach",
      "file": "src/accessibilityManager.js",
      "line": 373,
      "context": "buttons.forEach(button => {"
    },
    {
      "object": "button",
      "method": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 374,
      "context": "if (!button.getAttribute('aria-label') && button.textContent.trim()) {"
    },
    {
      "object": "textContent",
      "method": "trim",
      "file": "src/accessibilityManager.js",
      "line": 374,
      "context": "if (!button.getAttribute('aria-label') && button.textContent.trim()) {"
    },
    {
      "object": "button",
      "method": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 375,
      "context": "button.setAttribute('aria-label', button.textContent.trim());"
    },
    {
      "object": "textContent",
      "method": "trim",
      "file": "src/accessibilityManager.js",
      "line": 375,
      "context": "button.setAttribute('aria-label', button.textContent.trim());"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 380,
      "context": "const interactiveElements = document.querySelectorAll('[onclick]:not([role])');"
    },
    {
      "object": "interactiveElements",
      "method": "forEach",
      "file": "src/accessibilityManager.js",
      "line": 381,
      "context": "interactiveElements.forEach(element => {"
    },
    {
      "object": "element",
      "method": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 382,
      "context": "if (!element.getAttribute('role')) {"
    },
    {
      "object": "element",
      "method": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 383,
      "context": "element.setAttribute('role', 'button');"
    },
    {
      "object": "element",
      "method": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 384,
      "context": "element.setAttribute('tabindex', '0');"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 394,
      "context": "const sections = document.querySelectorAll('.section');"
    },
    {
      "object": "sections",
      "method": "forEach",
      "file": "src/accessibilityManager.js",
      "line": 395,
      "context": "sections.forEach((section, index) => {"
    },
    {
      "object": "section",
      "method": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 396,
      "context": "if (!section.getAttribute('role')) {"
    },
    {
      "object": "section",
      "method": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 397,
      "context": "section.setAttribute('role', 'region');"
    },
    {
      "object": "section",
      "method": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 401,
      "context": "const heading = section.querySelector('h1, h2, h3, h4, h5, h6');"
    },
    {
      "object": "section",
      "method": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 402,
      "context": "if (heading && !section.getAttribute('aria-labelledby')) {"
    },
    {
      "object": "section",
      "method": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 406,
      "context": "section.setAttribute('aria-labelledby', heading.id);"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 416,
      "context": "const scoreElement = document.getElementById('current-score');"
    },
    {
      "object": "scoreElement",
      "method": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 418,
      "context": "scoreElement.setAttribute('aria-live', 'polite');"
    },
    {
      "object": "scoreElement",
      "method": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 419,
      "context": "scoreElement.setAttribute('aria-atomic', 'true');"
    },
    {
      "object": "document",
      "method": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 423,
      "context": "const timerElement = document.querySelector('.timer-container');"
    },
    {
      "object": "timerElement",
      "method": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 425,
      "context": "timerElement.setAttribute('aria-live', 'off'); // Prevent constant announcements"
    },
    {
      "object": "timerElement",
      "method": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 426,
      "context": "timerElement.setAttribute('aria-atomic', 'true');"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 430,
      "context": "const roomInfo = document.getElementById('room-info');"
    },
    {
      "object": "roomInfo",
      "method": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 432,
      "context": "roomInfo.setAttribute('aria-live', 'polite');"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/accessibilityManager.js",
      "line": 440,
      "context": "const instructions = document.createElement('div');"
    },
    {
      "object": "body",
      "method": "appendChild",
      "file": "src/accessibilityManager.js",
      "line": 456,
      "context": "document.body.appendChild(instructions);"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/accessibilityManager.js",
      "line": 464,
      "context": "const politeRegion = document.createElement('div');"
    },
    {
      "object": "politeRegion",
      "method": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 467,
      "context": "politeRegion.setAttribute('aria-live', 'polite');"
    },
    {
      "object": "politeRegion",
      "method": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 468,
      "context": "politeRegion.setAttribute('aria-atomic', 'true');"
    },
    {
      "object": "body",
      "method": "appendChild",
      "file": "src/accessibilityManager.js",
      "line": 469,
      "context": "document.body.appendChild(politeRegion);"
    },
    {
      "object": "liveRegions",
      "method": "set",
      "file": "src/accessibilityManager.js",
      "line": 470,
      "context": "this.liveRegions.set('polite', politeRegion);"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/accessibilityManager.js",
      "line": 473,
      "context": "const assertiveRegion = document.createElement('div');"
    },
    {
      "object": "assertiveRegion",
      "method": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 476,
      "context": "assertiveRegion.setAttribute('aria-live', 'assertive');"
    },
    {
      "object": "assertiveRegion",
      "method": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 477,
      "context": "assertiveRegion.setAttribute('aria-atomic', 'true');"
    },
    {
      "object": "body",
      "method": "appendChild",
      "file": "src/accessibilityManager.js",
      "line": 478,
      "context": "document.body.appendChild(assertiveRegion);"
    },
    {
      "object": "liveRegions",
      "method": "set",
      "file": "src/accessibilityManager.js",
      "line": 479,
      "context": "this.liveRegions.set('assertive', assertiveRegion);"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/accessibilityManager.js",
      "line": 482,
      "context": "const statusRegion = document.createElement('div');"
    },
    {
      "object": "statusRegion",
      "method": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 485,
      "context": "statusRegion.setAttribute('role', 'status');"
    },
    {
      "object": "statusRegion",
      "method": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 486,
      "context": "statusRegion.setAttribute('aria-atomic', 'true');"
    },
    {
      "object": "body",
      "method": "appendChild",
      "file": "src/accessibilityManager.js",
      "line": 487,
      "context": "document.body.appendChild(statusRegion);"
    },
    {
      "object": "liveRegions",
      "method": "set",
      "file": "src/accessibilityManager.js",
      "line": 488,
      "context": "this.liveRegions.set('status', statusRegion);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/accessibilityManager.js",
      "line": 490,
      "context": "console.log('♿ Live regions created');"
    },
    {
      "object": "announcementHistory",
      "method": "push",
      "file": "src/accessibilityManager.js",
      "line": 500,
      "context": "this.announcementHistory.push({"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/accessibilityManager.js",
      "line": 502,
      "context": "timestamp: Date.now(),"
    },
    {
      "object": "announcementHistory",
      "method": "shift",
      "file": "src/accessibilityManager.js",
      "line": 508,
      "context": "this.announcementHistory.shift();"
    },
    {
      "object": "liveRegions",
      "method": "get",
      "file": "src/accessibilityManager.js",
      "line": 512,
      "context": "const region = this.liveRegions.get(priority);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/accessibilityManager.js",
      "line": 515,
      "context": "console.log(`♿ Announced (${priority}): ${message}`);"
    },
    {
      "object": "this",
      "method": "announce",
      "file": "src/accessibilityManager.js",
      "line": 535,
      "context": "this.announce(message, 'assertive');"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/accessibilityManager.js",
      "line": 543,
      "context": "const highContrastStyles = document.createElement('style');"
    },
    {
      "object": "head",
      "method": "appendChild",
      "file": "src/accessibilityManager.js",
      "line": 623,
      "context": "document.head.appendChild(highContrastStyles);"
    },
    {
      "object": "this",
      "method": "enableHighContrastMode",
      "file": "src/accessibilityManager.js",
      "line": 634,
      "context": "this.enableHighContrastMode();"
    },
    {
      "object": "this",
      "method": "disableHighContrastMode",
      "file": "src/accessibilityManager.js",
      "line": 636,
      "context": "this.disableHighContrastMode();"
    },
    {
      "object": "this",
      "method": "savePreferences",
      "file": "src/accessibilityManager.js",
      "line": 639,
      "context": "this.savePreferences();"
    },
    {
      "object": "classList",
      "method": "add",
      "file": "src/accessibilityManager.js",
      "line": 646,
      "context": "document.body.classList.add('high-contrast');"
    },
    {
      "object": "this",
      "method": "announce",
      "file": "src/accessibilityManager.js",
      "line": 648,
      "context": "this.announce('High contrast mode enabled', 'assertive');"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/accessibilityManager.js",
      "line": 649,
      "context": "console.log('♿ High contrast mode enabled');"
    },
    {
      "object": "classList",
      "method": "remove",
      "file": "src/accessibilityManager.js",
      "line": 656,
      "context": "document.body.classList.remove('high-contrast');"
    },
    {
      "object": "this",
      "method": "announce",
      "file": "src/accessibilityManager.js",
      "line": 658,
      "context": "this.announce('High contrast mode disabled', 'assertive');"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/accessibilityManager.js",
      "line": 659,
      "context": "console.log('♿ High contrast mode disabled');"
    },
    {
      "object": "classList",
      "method": "add",
      "file": "src/accessibilityManager.js",
      "line": 666,
      "context": "document.body.classList.add('reduced-motion');"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/accessibilityManager.js",
      "line": 668,
      "context": "console.log('♿ Reduced motion mode enabled');"
    },
    {
      "object": "classList",
      "method": "add",
      "file": "src/accessibilityManager.js",
      "line": 675,
      "context": "document.body.classList.add('large-text');"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/accessibilityManager.js",
      "line": 677,
      "context": "console.log('♿ Large text mode enabled');"
    },
    {
      "object": "classList",
      "method": "add",
      "file": "src/accessibilityManager.js",
      "line": 684,
      "context": "document.body.classList.add('screen-reader-mode');"
    },
    {
      "object": "this",
      "method": "optimizeForScreenReaders",
      "file": "src/accessibilityManager.js",
      "line": 688,
      "context": "this.optimizeForScreenReaders();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/accessibilityManager.js",
      "line": 689,
      "context": "console.log('♿ Screen reader mode enabled');"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 697,
      "context": "const elements = document.querySelectorAll('button, input, select, textarea');"
    },
    {
      "object": "elements",
      "method": "forEach",
      "file": "src/accessibilityManager.js",
      "line": 698,
      "context": "elements.forEach(element => {"
    },
    {
      "object": "element",
      "method": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 699,
      "context": "if (!element.getAttribute('aria-label') && !element.getAttribute('aria-labelledby')) {"
    },
    {
      "object": "element",
      "method": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 699,
      "context": "if (!element.getAttribute('aria-label') && !element.getAttribute('aria-labelledby')) {"
    },
    {
      "object": "this",
      "method": "generateAccessibleLabel",
      "file": "src/accessibilityManager.js",
      "line": 700,
      "context": "const label = this.generateAccessibleLabel(element);"
    },
    {
      "object": "element",
      "method": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 702,
      "context": "element.setAttribute('aria-label', label);"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 708,
      "context": "const tables = document.querySelectorAll('table');"
    },
    {
      "object": "tables",
      "method": "forEach",
      "file": "src/accessibilityManager.js",
      "line": 709,
      "context": "tables.forEach(table => {"
    },
    {
      "object": "table",
      "method": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 710,
      "context": "const headers = table.querySelectorAll('th');"
    },
    {
      "object": "headers",
      "method": "forEach",
      "file": "src/accessibilityManager.js",
      "line": 711,
      "context": "headers.forEach((header, index) => {"
    },
    {
      "object": "document",
      "method": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 726,
      "context": "const label = document.querySelector(`label[for=\"${id}\"]`);"
    },
    {
      "object": "textContent",
      "method": "trim",
      "file": "src/accessibilityManager.js",
      "line": 727,
      "context": "if (label) return label.textContent.trim();"
    },
    {
      "object": "this",
      "method": "getTextContent",
      "file": "src/accessibilityManager.js",
      "line": 733,
      "context": "const textNodes = this.getTextContent(parent);"
    },
    {
      "object": "textContent",
      "method": "trim",
      "file": "src/accessibilityManager.js",
      "line": 742,
      "context": "if (element.textContent && element.textContent.trim()) {"
    },
    {
      "object": "textContent",
      "method": "trim",
      "file": "src/accessibilityManager.js",
      "line": 743,
      "context": "return element.textContent.trim();"
    },
    {
      "object": "document",
      "method": "createTreeWalker",
      "file": "src/accessibilityManager.js",
      "line": 754,
      "context": "const walker = document.createTreeWalker("
    },
    {
      "object": "walker",
      "method": "nextNode",
      "file": "src/accessibilityManager.js",
      "line": 762,
      "context": "while (node = walker.nextNode()) {"
    },
    {
      "object": "textContent",
      "method": "trim",
      "file": "src/accessibilityManager.js",
      "line": 763,
      "context": "const text = node.textContent.trim();"
    },
    {
      "object": "texts",
      "method": "push",
      "file": "src/accessibilityManager.js",
      "line": 765,
      "context": "texts.push(text);"
    },
    {
      "object": "document",
      "method": "addEventListener",
      "file": "src/accessibilityManager.js",
      "line": 777,
      "context": "document.addEventListener('focusin', (event) => {"
    },
    {
      "object": "this",
      "method": "handleFocusChange",
      "file": "src/accessibilityManager.js",
      "line": 778,
      "context": "this.handleFocusChange(event);"
    },
    {
      "object": "document",
      "method": "addEventListener",
      "file": "src/accessibilityManager.js",
      "line": 782,
      "context": "document.addEventListener('keydown', (event) => {"
    },
    {
      "object": "this",
      "method": "handleFocusTrapping",
      "file": "src/accessibilityManager.js",
      "line": 784,
      "context": "this.handleFocusTrapping(event);"
    },
    {
      "object": "element",
      "method": "matches",
      "file": "src/accessibilityManager.js",
      "line": 796,
      "context": "if (element.matches('button, input, select, textarea, [role=\"button\"]')) {"
    },
    {
      "object": "this",
      "method": "getAccessibleName",
      "file": "src/accessibilityManager.js",
      "line": 797,
      "context": "const label = this.getAccessibleName(element);"
    },
    {
      "object": "this",
      "method": "announce",
      "file": "src/accessibilityManager.js",
      "line": 799,
      "context": "this.announce(`Focused: ${label}`, 'polite', 200);"
    },
    {
      "object": "element",
      "method": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 809,
      "context": "if (element.getAttribute('aria-label')) {"
    },
    {
      "object": "element",
      "method": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 810,
      "context": "return element.getAttribute('aria-label');"
    },
    {
      "object": "element",
      "method": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 813,
      "context": "if (element.getAttribute('aria-labelledby')) {"
    },
    {
      "object": "element",
      "method": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 814,
      "context": "const labelId = element.getAttribute('aria-labelledby');"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 815,
      "context": "const labelElement = document.getElementById(labelId);"
    },
    {
      "object": "textContent",
      "method": "trim",
      "file": "src/accessibilityManager.js",
      "line": 817,
      "context": "return labelElement.textContent.trim();"
    },
    {
      "object": "textContent",
      "method": "trim",
      "file": "src/accessibilityManager.js",
      "line": 821,
      "context": "if (element.textContent && element.textContent.trim()) {"
    },
    {
      "object": "textContent",
      "method": "trim",
      "file": "src/accessibilityManager.js",
      "line": 822,
      "context": "return element.textContent.trim();"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 836,
      "context": "const section = document.getElementById(sectionId);"
    },
    {
      "object": "section",
      "method": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 839,
      "context": "const focusableElement = section.querySelector("
    },
    {
      "object": "focusableElement",
      "method": "focus",
      "file": "src/accessibilityManager.js",
      "line": 843,
      "context": "focusableElement.focus();"
    },
    {
      "object": "section",
      "method": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 845,
      "context": "const sectionName = section.querySelector('h1, h2, h3, h4, h5, h6')?.textContent || sectionId;"
    },
    {
      "object": "this",
      "method": "announce",
      "file": "src/accessibilityManager.js",
      "line": 846,
      "context": "this.announce(`Focused on ${sectionName} section`, 'assertive');"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 854,
      "context": "const mainContent = document.getElementById('main-content') ||"
    },
    {
      "object": "document",
      "method": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 855,
      "context": "document.querySelector('main') ||"
    },
    {
      "object": "document",
      "method": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 856,
      "context": "document.querySelector('[role=\"main\"]');"
    },
    {
      "object": "mainContent",
      "method": "focus",
      "file": "src/accessibilityManager.js",
      "line": 859,
      "context": "mainContent.focus();"
    },
    {
      "object": "this",
      "method": "announce",
      "file": "src/accessibilityManager.js",
      "line": 860,
      "context": "this.announce('Skipped to main content', 'assertive');"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 868,
      "context": "const existingHelp = document.getElementById('keyboard-help-modal');"
    },
    {
      "object": "existingHelp",
      "method": "remove",
      "file": "src/accessibilityManager.js",
      "line": 870,
      "context": "existingHelp.remove();"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/accessibilityManager.js",
      "line": 873,
      "context": "const helpModal = document.createElement('div');"
    },
    {
      "object": "helpModal",
      "method": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 876,
      "context": "helpModal.setAttribute('role', 'dialog');"
    },
    {
      "object": "helpModal",
      "method": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 877,
      "context": "helpModal.setAttribute('aria-labelledby', 'help-title');"
    },
    {
      "object": "helpModal",
      "method": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 878,
      "context": "helpModal.setAttribute('aria-modal', 'true');"
    },
    {
      "object": "body",
      "method": "appendChild",
      "file": "src/accessibilityManager.js",
      "line": 918,
      "context": "document.body.appendChild(helpModal);"
    },
    {
      "object": "helpModal",
      "method": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 921,
      "context": "const closeButtons = helpModal.querySelectorAll('.modal-close, .modal-close-btn');"
    },
    {
      "object": "closeButtons",
      "method": "forEach",
      "file": "src/accessibilityManager.js",
      "line": 922,
      "context": "closeButtons.forEach(button => {"
    },
    {
      "object": "button",
      "method": "addEventListener",
      "file": "src/accessibilityManager.js",
      "line": 923,
      "context": "button.addEventListener('click', () => {"
    },
    {
      "object": "helpModal",
      "method": "remove",
      "file": "src/accessibilityManager.js",
      "line": 924,
      "context": "helpModal.remove();"
    },
    {
      "object": "this",
      "method": "announce",
      "file": "src/accessibilityManager.js",
      "line": 925,
      "context": "this.announce('Help dialog closed', 'assertive');"
    },
    {
      "object": "helpModal",
      "method": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 930,
      "context": "const firstButton = helpModal.querySelector('button');"
    },
    {
      "object": "firstButton",
      "method": "focus",
      "file": "src/accessibilityManager.js",
      "line": 932,
      "context": "firstButton.focus();"
    },
    {
      "object": "this",
      "method": "announce",
      "file": "src/accessibilityManager.js",
      "line": 935,
      "context": "this.announce('Keyboard help dialog opened', 'assertive');"
    },
    {
      "object": "this",
      "method": "announce",
      "file": "src/accessibilityManager.js",
      "line": 943,
      "context": "this.announce(`Entered ${gameState.currentRoom.name}: ${gameState.currentRoom.description}`, 'polite');"
    },
    {
      "object": "this",
      "method": "announce",
      "file": "src/accessibilityManager.js",
      "line": 947,
      "context": "this.announce(`Score updated: ${gameState.score} points`, 'polite');"
    },
    {
      "object": "this",
      "method": "announce",
      "file": "src/accessibilityManager.js",
      "line": 951,
      "context": "this.announce(`New question: ${gameState.question.category}, ${gameState.question.difficulty} difficulty`, 'polite');"
    },
    {
      "object": "this",
      "method": "announce",
      "file": "src/accessibilityManager.js",
      "line": 966,
      "context": "this.announce(message, 'assertive');"
    },
    {
      "object": "announcementHistory",
      "method": "slice",
      "file": "src/accessibilityManager.js",
      "line": 979,
      "context": "announcementHistory: this.announcementHistory.slice(-5)"
    },
    {
      "object": "liveRegions",
      "method": "forEach",
      "file": "src/accessibilityManager.js",
      "line": 991,
      "context": "this.liveRegions.forEach(region => {"
    },
    {
      "object": "parentNode",
      "method": "removeChild",
      "file": "src/accessibilityManager.js",
      "line": 993,
      "context": "region.parentNode.removeChild(region);"
    },
    {
      "object": "liveRegions",
      "method": "clear",
      "file": "src/accessibilityManager.js",
      "line": 996,
      "context": "this.liveRegions.clear();"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 999,
      "context": "const modal = document.getElementById('keyboard-help-modal');"
    },
    {
      "object": "modal",
      "method": "remove",
      "file": "src/accessibilityManager.js",
      "line": 1001,
      "context": "modal.remove();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/accessibilityManager.js",
      "line": 1004,
      "context": "console.log('♿ AccessibilityManager cleanup completed');"
    },
    {
      "object": "document",
      "method": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 1013,
      "context": "const modal = document.querySelector('[aria-modal=\"true\"]');"
    },
    {
      "object": "modal",
      "method": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 1016,
      "context": "const focusableElements = modal.querySelectorAll("
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 1026,
      "context": "event.preventDefault();"
    },
    {
      "object": "lastElement",
      "method": "focus",
      "file": "src/accessibilityManager.js",
      "line": 1027,
      "context": "lastElement.focus();"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 1029,
      "context": "event.preventDefault();"
    },
    {
      "object": "firstElement",
      "method": "focus",
      "file": "src/accessibilityManager.js",
      "line": 1030,
      "context": "firstElement.focus();"
    },
    {
      "object": "element",
      "method": "hasAttribute",
      "file": "src/accessibilityManager.js",
      "line": 1049,
      "context": "if (element.hasAttribute('onclick') && !element.matches('button, input, select, textarea, a')) {"
    },
    {
      "object": "element",
      "method": "matches",
      "file": "src/accessibilityManager.js",
      "line": 1049,
      "context": "if (element.hasAttribute('onclick') && !element.matches('button, input, select, textarea, a')) {"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 1050,
      "context": "event.preventDefault();"
    },
    {
      "object": "element",
      "method": "click",
      "file": "src/accessibilityManager.js",
      "line": 1051,
      "context": "element.click();"
    },
    {
      "object": "document",
      "method": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 1060,
      "context": "const modal = document.querySelector('[aria-modal=\"true\"]');"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 1062,
      "context": "event.preventDefault();"
    },
    {
      "object": "modal",
      "method": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 1063,
      "context": "const closeButton = modal.querySelector('.modal-close, .modal-close-btn');"
    },
    {
      "object": "closeButton",
      "method": "click",
      "file": "src/accessibilityManager.js",
      "line": 1065,
      "context": "closeButton.click();"
    },
    {
      "object": "element",
      "method": "matches",
      "file": "src/accessibilityManager.js",
      "line": 1078,
      "context": "if (element.matches('#map-canvas')) {"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 1079,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "handleMapArrowNavigation",
      "file": "src/accessibilityManager.js",
      "line": 1080,
      "context": "this.handleMapArrowNavigation(key);"
    },
    {
      "object": "element",
      "method": "matches",
      "file": "src/accessibilityManager.js",
      "line": 1085,
      "context": "if (element.matches('.answer-btn')) {"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 1086,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "navigateAnswerButtons",
      "file": "src/accessibilityManager.js",
      "line": 1087,
      "context": "this.navigateAnswerButtons(key);"
    },
    {
      "object": "element",
      "method": "matches",
      "file": "src/accessibilityManager.js",
      "line": 1092,
      "context": "if (element.matches('[role=\"menu\"], [role=\"listbox\"], .menu-item, .list-item')) {"
    },
    {
      "object": "event",
      "method": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 1093,
      "context": "event.preventDefault();"
    },
    {
      "object": "this",
      "method": "navigateMenuItems",
      "file": "src/accessibilityManager.js",
      "line": 1094,
      "context": "this.navigateMenuItems(key);"
    },
    {
      "object": "direction",
      "method": "replace",
      "file": "src/accessibilityManager.js",
      "line": 1107,
      "context": "detail: { direction: direction.replace('Arrow', '').toLowerCase() }"
    },
    {
      "object": "document",
      "method": "dispatchEvent",
      "file": "src/accessibilityManager.js",
      "line": 1109,
      "context": "document.dispatchEvent(mapNavigationEvent);"
    },
    {
      "object": "this",
      "method": "announce",
      "file": "src/accessibilityManager.js",
      "line": 1112,
      "context": "this.announce(`Navigating ${direction.replace('Arrow', '').toLowerCase()}`, 'polite');"
    },
    {
      "object": "direction",
      "method": "replace",
      "file": "src/accessibilityManager.js",
      "line": 1112,
      "context": "this.announce(`Navigating ${direction.replace('Arrow', '').toLowerCase()}`, 'polite');"
    },
    {
      "object": "Array",
      "method": "from",
      "file": "src/accessibilityManager.js",
      "line": 1119,
      "context": "const buttons = Array.from(document.querySelectorAll('.answer-btn:not([disabled])'));"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 1119,
      "context": "const buttons = Array.from(document.querySelectorAll('.answer-btn:not([disabled])'));"
    },
    {
      "object": "buttons",
      "method": "findIndex",
      "file": "src/accessibilityManager.js",
      "line": 1120,
      "context": "const currentIndex = buttons.findIndex(btn => btn === document.activeElement);"
    },
    {
      "object": "this",
      "method": "announce",
      "file": "src/accessibilityManager.js",
      "line": 1131,
      "context": "this.announce(`Answer option ${String.fromCharCode(65 + nextIndex)}`, 'polite');"
    },
    {
      "object": "String",
      "method": "fromCharCode",
      "file": "src/accessibilityManager.js",
      "line": 1131,
      "context": "this.announce(`Answer option ${String.fromCharCode(65 + nextIndex)}`, 'polite');"
    },
    {
      "object": "Array",
      "method": "from",
      "file": "src/accessibilityManager.js",
      "line": 1139,
      "context": "const menuItems = Array.from(document.querySelectorAll('.menu-item:not([disabled]), .list-item:not([disabled])'));"
    },
    {
      "object": "document",
      "method": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 1139,
      "context": "const menuItems = Array.from(document.querySelectorAll('.menu-item:not([disabled]), .list-item:not([disabled])'));"
    },
    {
      "object": "menuItems",
      "method": "findIndex",
      "file": "src/accessibilityManager.js",
      "line": 1140,
      "context": "const currentIndex = menuItems.findIndex(item => item === document.activeElement);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 19,
      "context": "console.log('🚀 Enhanced DataLoader initialized with performance optimizations');"
    },
    {
      "object": "this",
      "method": "trackCategoryUsage",
      "file": "src/enhancedDataLoader.js",
      "line": 30,
      "context": "this.trackCategoryUsage(category);"
    },
    {
      "object": "categoryCache",
      "method": "has",
      "file": "src/enhancedDataLoader.js",
      "line": 33,
      "context": "if (!forceReload && this.categoryCache.has(category)) {"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 34,
      "context": "console.log(`📚 Retrieved ${this.categoryCache.get(category).length} questions from cache: ${category}`);"
    },
    {
      "object": "categoryCache",
      "method": "get",
      "file": "src/enhancedDataLoader.js",
      "line": 34,
      "context": "console.log(`📚 Retrieved ${this.categoryCache.get(category).length} questions from cache: ${category}`);"
    },
    {
      "object": "categoryCache",
      "method": "get",
      "file": "src/enhancedDataLoader.js",
      "line": 35,
      "context": "return this.categoryCache.get(category);"
    },
    {
      "object": "loadingStates",
      "method": "has",
      "file": "src/enhancedDataLoader.js",
      "line": 39,
      "context": "if (this.loadingStates.has(category)) {"
    },
    {
      "object": "loadingStates",
      "method": "get",
      "file": "src/enhancedDataLoader.js",
      "line": 40,
      "context": "return this.loadingStates.get(category);"
    },
    {
      "object": "this",
      "method": "loadCategoryQuestions",
      "file": "src/enhancedDataLoader.js",
      "line": 44,
      "context": "const loadingPromise = this.loadCategoryQuestions(category);"
    },
    {
      "object": "loadingStates",
      "method": "set",
      "file": "src/enhancedDataLoader.js",
      "line": 45,
      "context": "this.loadingStates.set(category, loadingPromise);"
    },
    {
      "object": "loadingStates",
      "method": "delete",
      "file": "src/enhancedDataLoader.js",
      "line": 49,
      "context": "this.loadingStates.delete(category);"
    },
    {
      "object": "loadingStates",
      "method": "delete",
      "file": "src/enhancedDataLoader.js",
      "line": 52,
      "context": "this.loadingStates.delete(category);"
    },
    {
      "object": "performance",
      "method": "now",
      "file": "src/enhancedDataLoader.js",
      "line": 66,
      "context": "const startTime = performance.now();"
    },
    {
      "object": "originalLoader",
      "method": "getQuestions",
      "file": "src/enhancedDataLoader.js",
      "line": 70,
      "context": "const allQuestions = this.originalLoader.getQuestions();"
    },
    {
      "object": "allQuestions",
      "method": "filter",
      "file": "src/enhancedDataLoader.js",
      "line": 73,
      "context": "const filteredQuestions = allQuestions.filter(q => {"
    },
    {
      "object": "filteredQuestions",
      "method": "sort",
      "file": "src/enhancedDataLoader.js",
      "line": 78,
      "context": "filteredQuestions.sort((a, b) => {"
    },
    {
      "object": "id",
      "method": "localeCompare",
      "file": "src/enhancedDataLoader.js",
      "line": 83,
      "context": "return a.id.localeCompare(b.id);"
    },
    {
      "object": "categoryCache",
      "method": "set",
      "file": "src/enhancedDataLoader.js",
      "line": 87,
      "context": "this.categoryCache.set(category, filteredQuestions);"
    },
    {
      "object": "lastAccessed",
      "method": "set",
      "file": "src/enhancedDataLoader.js",
      "line": 88,
      "context": "this.usageStats.lastAccessed.set(category, Date.now());"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/enhancedDataLoader.js",
      "line": 88,
      "context": "this.usageStats.lastAccessed.set(category, Date.now());"
    },
    {
      "object": "performance",
      "method": "now",
      "file": "src/enhancedDataLoader.js",
      "line": 90,
      "context": "const processingTime = performance.now() - startTime;"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 91,
      "context": "console.log(`📚 Loaded ${filteredQuestions.length} questions for category '${category}' in ${processingTime.toFixed(2)}ms`);"
    },
    {
      "object": "processingTime",
      "method": "toFixed",
      "file": "src/enhancedDataLoader.js",
      "line": 91,
      "context": "console.log(`📚 Loaded ${filteredQuestions.length} questions for category '${category}' in ${processingTime.toFixed(2)}ms`);"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/enhancedDataLoader.js",
      "line": 95,
      "context": "console.error(`❌ Error loading questions for category ${category}:`, error);"
    },
    {
      "object": "this",
      "method": "trackDifficultyUsage",
      "file": "src/enhancedDataLoader.js",
      "line": 115,
      "context": "this.trackDifficultyUsage(difficulty);"
    },
    {
      "object": "categoryCache",
      "method": "has",
      "file": "src/enhancedDataLoader.js",
      "line": 119,
      "context": "if (this.categoryCache.has(cacheKey)) {"
    },
    {
      "object": "categoryCache",
      "method": "get",
      "file": "src/enhancedDataLoader.js",
      "line": 120,
      "context": "return this.categoryCache.get(cacheKey);"
    },
    {
      "object": "originalLoader",
      "method": "getQuestions",
      "file": "src/enhancedDataLoader.js",
      "line": 123,
      "context": "const allQuestions = this.originalLoader.getQuestions();"
    },
    {
      "object": "allQuestions",
      "method": "filter",
      "file": "src/enhancedDataLoader.js",
      "line": 124,
      "context": "const filteredQuestions = allQuestions.filter(q => q.difficulty === difficulty);"
    },
    {
      "object": "categoryCache",
      "method": "set",
      "file": "src/enhancedDataLoader.js",
      "line": 126,
      "context": "this.categoryCache.set(cacheKey, filteredQuestions);"
    },
    {
      "object": "lastAccessed",
      "method": "set",
      "file": "src/enhancedDataLoader.js",
      "line": 127,
      "context": "this.usageStats.lastAccessed.set(cacheKey, Date.now());"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/enhancedDataLoader.js",
      "line": 127,
      "context": "this.usageStats.lastAccessed.set(cacheKey, Date.now());"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 129,
      "context": "console.log(`🎯 Loaded ${filteredQuestions.length} questions for difficulty: ${difficulty}`);"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/enhancedDataLoader.js",
      "line": 137,
      "context": "const now = Date.now();"
    },
    {
      "object": "lastAccessed",
      "method": "entries",
      "file": "src/enhancedDataLoader.js",
      "line": 142,
      "context": "for (const [key, lastAccessed] of this.usageStats.lastAccessed.entries()) {"
    },
    {
      "object": "categoryCache",
      "method": "delete",
      "file": "src/enhancedDataLoader.js",
      "line": 144,
      "context": "this.categoryCache.delete(key);"
    },
    {
      "object": "lastAccessed",
      "method": "delete",
      "file": "src/enhancedDataLoader.js",
      "line": 145,
      "context": "this.usageStats.lastAccessed.delete(key);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 146,
      "context": "console.log(`🗑️ Removed expired cache entry: ${key}`);"
    },
    {
      "object": "Array",
      "method": "from",
      "file": "src/enhancedDataLoader.js",
      "line": 152,
      "context": "const sortedEntries = Array.from(this.usageStats.lastAccessed.entries())"
    },
    {
      "object": "lastAccessed",
      "method": "entries",
      "file": "src/enhancedDataLoader.js",
      "line": 152,
      "context": "const sortedEntries = Array.from(this.usageStats.lastAccessed.entries())"
    },
    {
      "object": "sortedEntries",
      "method": "slice",
      "file": "src/enhancedDataLoader.js",
      "line": 155,
      "context": "const entriesToRemove = sortedEntries.slice(0, this.categoryCache.size - maxCacheSize);"
    },
    {
      "object": "categoryCache",
      "method": "delete",
      "file": "src/enhancedDataLoader.js",
      "line": 158,
      "context": "this.categoryCache.delete(key);"
    },
    {
      "object": "lastAccessed",
      "method": "delete",
      "file": "src/enhancedDataLoader.js",
      "line": 159,
      "context": "this.usageStats.lastAccessed.delete(key);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 160,
      "context": "console.log(`🗑️ Removed LRU cache entry: ${key}`);"
    },
    {
      "object": "Array",
      "method": "from",
      "file": "src/enhancedDataLoader.js",
      "line": 170,
      "context": "const popularCategories = Array.from(this.usageStats.categoryRequests.entries())"
    },
    {
      "object": "categoryRequests",
      "method": "entries",
      "file": "src/enhancedDataLoader.js",
      "line": 170,
      "context": "const popularCategories = Array.from(this.usageStats.categoryRequests.entries())"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 175,
      "context": "console.log('🔄 Preloading popular categories:', popularCategories);"
    },
    {
      "object": "popularCategories",
      "method": "map",
      "file": "src/enhancedDataLoader.js",
      "line": 178,
      "context": "const preloadPromises = popularCategories.map(category =>"
    },
    {
      "object": "this",
      "method": "getQuestionsByCategory",
      "file": "src/enhancedDataLoader.js",
      "line": 179,
      "context": "this.getQuestionsByCategory(category)"
    },
    {
      "object": "Promise",
      "method": "all",
      "file": "src/enhancedDataLoader.js",
      "line": 183,
      "context": "await Promise.all(preloadPromises);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 184,
      "context": "console.log('✅ Popular categories preloaded successfully');"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/enhancedDataLoader.js",
      "line": 186,
      "context": "console.warn('⚠️ Error preloading categories:', error);"
    },
    {
      "object": "categoryRequests",
      "method": "get",
      "file": "src/enhancedDataLoader.js",
      "line": 195,
      "context": "const currentCount = this.usageStats.categoryRequests.get(category) || 0;"
    },
    {
      "object": "categoryRequests",
      "method": "set",
      "file": "src/enhancedDataLoader.js",
      "line": 196,
      "context": "this.usageStats.categoryRequests.set(category, currentCount + 1);"
    },
    {
      "object": "difficultyRequests",
      "method": "get",
      "file": "src/enhancedDataLoader.js",
      "line": 204,
      "context": "const currentCount = this.usageStats.difficultyRequests.get(difficulty) || 0;"
    },
    {
      "object": "difficultyRequests",
      "method": "set",
      "file": "src/enhancedDataLoader.js",
      "line": 205,
      "context": "this.usageStats.difficultyRequests.set(difficulty, currentCount + 1);"
    },
    {
      "object": "Object",
      "method": "fromEntries",
      "file": "src/enhancedDataLoader.js",
      "line": 216,
      "context": "categoryUsage: Object.fromEntries(this.usageStats.categoryRequests),"
    },
    {
      "object": "Object",
      "method": "fromEntries",
      "file": "src/enhancedDataLoader.js",
      "line": 217,
      "context": "difficultyUsage: Object.fromEntries(this.usageStats.difficultyRequests),"
    },
    {
      "object": "Object",
      "method": "fromEntries",
      "file": "src/enhancedDataLoader.js",
      "line": 218,
      "context": "lastAccessTimes: Object.fromEntries(this.usageStats.lastAccessed),"
    },
    {
      "object": "this",
      "method": "estimateMemoryUsage",
      "file": "src/enhancedDataLoader.js",
      "line": 219,
      "context": "memoryUsage: this.estimateMemoryUsage()"
    },
    {
      "object": "categoryCache",
      "method": "values",
      "file": "src/enhancedDataLoader.js",
      "line": 230,
      "context": "for (const questions of this.categoryCache.values()) {"
    },
    {
      "object": "originalLoader",
      "method": "loadGameData",
      "file": "src/enhancedDataLoader.js",
      "line": 242,
      "context": "const result = await this.originalLoader.loadGameData();"
    },
    {
      "object": "this",
      "method": "preloadPopularCategories",
      "file": "src/enhancedDataLoader.js",
      "line": 246,
      "context": "this.preloadPopularCategories();"
    },
    {
      "object": "originalLoader",
      "method": "getAllData",
      "file": "src/enhancedDataLoader.js",
      "line": 253,
      "context": "return this.originalLoader.getAllData();"
    },
    {
      "object": "originalLoader",
      "method": "getAllData",
      "file": "src/enhancedDataLoader.js",
      "line": 257,
      "context": "return this.originalLoader.getAllData().rooms;"
    },
    {
      "object": "originalLoader",
      "method": "getAllData",
      "file": "src/enhancedDataLoader.js",
      "line": 261,
      "context": "return this.originalLoader.getAllData().questions;"
    },
    {
      "object": "originalLoader",
      "method": "getAllData",
      "file": "src/enhancedDataLoader.js",
      "line": 265,
      "context": "return this.originalLoader.getAllData().achievements;"
    },
    {
      "object": "originalLoader",
      "method": "getStartingRoom",
      "file": "src/enhancedDataLoader.js",
      "line": 269,
      "context": "return this.originalLoader.getStartingRoom();"
    },
    {
      "object": "originalLoader",
      "method": "getRoom",
      "file": "src/enhancedDataLoader.js",
      "line": 273,
      "context": "return this.originalLoader.getRoom(roomId);"
    },
    {
      "object": "originalLoader",
      "method": "getQuestion",
      "file": "src/enhancedDataLoader.js",
      "line": 277,
      "context": "return this.originalLoader.getQuestion(questionId);"
    },
    {
      "object": "categoryCache",
      "method": "has",
      "file": "src/enhancedDataLoader.js",
      "line": 283,
      "context": "if (this.categoryCache.has(category)) {"
    },
    {
      "object": "categoryCache",
      "method": "get",
      "file": "src/enhancedDataLoader.js",
      "line": 284,
      "context": "const categoryQuestions = this.categoryCache.get(category);"
    },
    {
      "object": "categoryQuestions",
      "method": "filter",
      "file": "src/enhancedDataLoader.js",
      "line": 285,
      "context": "const availableQuestions = categoryQuestions.filter(q => !excludeIds.includes(q.id));"
    },
    {
      "object": "excludeIds",
      "method": "includes",
      "file": "src/enhancedDataLoader.js",
      "line": 285,
      "context": "const availableQuestions = categoryQuestions.filter(q => !excludeIds.includes(q.id));"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/enhancedDataLoader.js",
      "line": 288,
      "context": "const randomIndex = Math.floor(Math.random() * availableQuestions.length);"
    },
    {
      "object": "Math",
      "method": "random",
      "file": "src/enhancedDataLoader.js",
      "line": 288,
      "context": "const randomIndex = Math.floor(Math.random() * availableQuestions.length);"
    },
    {
      "object": "originalLoader",
      "method": "getAllData",
      "file": "src/enhancedDataLoader.js",
      "line": 295,
      "context": "const allQuestions = this.originalLoader.getAllData().questions || [];"
    },
    {
      "object": "allQuestions",
      "method": "filter",
      "file": "src/enhancedDataLoader.js",
      "line": 296,
      "context": "let filteredQuestions = allQuestions.filter(q => !excludeIds.includes(q.id));"
    },
    {
      "object": "excludeIds",
      "method": "includes",
      "file": "src/enhancedDataLoader.js",
      "line": 296,
      "context": "let filteredQuestions = allQuestions.filter(q => !excludeIds.includes(q.id));"
    },
    {
      "object": "filteredQuestions",
      "method": "filter",
      "file": "src/enhancedDataLoader.js",
      "line": 299,
      "context": "filteredQuestions = filteredQuestions.filter(q => q.category === category);"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/enhancedDataLoader.js",
      "line": 303,
      "context": "const randomIndex = Math.floor(Math.random() * filteredQuestions.length);"
    },
    {
      "object": "Math",
      "method": "random",
      "file": "src/enhancedDataLoader.js",
      "line": 303,
      "context": "const randomIndex = Math.floor(Math.random() * filteredQuestions.length);"
    },
    {
      "object": "categoryCache",
      "method": "clear",
      "file": "src/enhancedDataLoader.js",
      "line": 314,
      "context": "this.categoryCache.clear();"
    },
    {
      "object": "loadingStates",
      "method": "clear",
      "file": "src/enhancedDataLoader.js",
      "line": 315,
      "context": "this.loadingStates.clear();"
    },
    {
      "object": "categoryRequests",
      "method": "clear",
      "file": "src/enhancedDataLoader.js",
      "line": 316,
      "context": "this.usageStats.categoryRequests.clear();"
    },
    {
      "object": "difficultyRequests",
      "method": "clear",
      "file": "src/enhancedDataLoader.js",
      "line": 317,
      "context": "this.usageStats.difficultyRequests.clear();"
    },
    {
      "object": "lastAccessed",
      "method": "clear",
      "file": "src/enhancedDataLoader.js",
      "line": 318,
      "context": "this.usageStats.lastAccessed.clear();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 320,
      "context": "console.log('🧹 Enhanced DataLoader cache cleared');"
    },
    {
      "object": "this",
      "method": "optimizeCache",
      "file": "src/enhancedDataLoader.js",
      "line": 327,
      "context": "this.optimizeCache();"
    },
    {
      "object": "loadingStates",
      "method": "clear",
      "file": "src/enhancedDataLoader.js",
      "line": 330,
      "context": "this.loadingStates.clear();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 332,
      "context": "console.log('🧹 Enhanced DataLoader cleanup completed');"
    },
    {
      "object": "this",
      "method": "initializeElementPools",
      "file": "src/enhancedUIManager.js",
      "line": 13,
      "context": "this.initializeElementPools();"
    },
    {
      "object": "this",
      "method": "setupOptimizedUpdates",
      "file": "src/enhancedUIManager.js",
      "line": 17,
      "context": "this.setupOptimizedUpdates();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/enhancedUIManager.js",
      "line": 19,
      "context": "console.log('🚀 Enhanced UIManager initialized with performance optimizations');"
    },
    {
      "object": "performanceManager",
      "method": "createPool",
      "file": "src/enhancedUIManager.js",
      "line": 27,
      "context": "this.performanceManager.createPool('answerButtons', UIFactories.answerButton, 8);"
    },
    {
      "object": "performanceManager",
      "method": "createPool",
      "file": "src/enhancedUIManager.js",
      "line": 28,
      "context": "this.performanceManager.createPool('notifications', UIFactories.notificationToast, 5);"
    },
    {
      "object": "performanceManager",
      "method": "createPool",
      "file": "src/enhancedUIManager.js",
      "line": 29,
      "context": "this.performanceManager.createPool('roomConnections', UIFactories.roomConnection, 10);"
    },
    {
      "object": "performanceManager",
      "method": "createPool",
      "file": "src/enhancedUIManager.js",
      "line": 30,
      "context": "this.performanceManager.createPool('progressBars', UIFactories.progressBar, 3);"
    },
    {
      "object": "performanceManager",
      "method": "createPool",
      "file": "src/enhancedUIManager.js",
      "line": 31,
      "context": "this.performanceManager.createPool('timers', UIFactories.timerDisplay, 2);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/enhancedUIManager.js",
      "line": 33,
      "context": "console.log('📦 UI element pools initialized');"
    },
    {
      "object": "optimizedUpdates",
      "method": "set",
      "file": "src/enhancedUIManager.js",
      "line": 41,
      "context": "this.optimizedUpdates.set('score', this.createScoreUpdater());"
    },
    {
      "object": "this",
      "method": "createScoreUpdater",
      "file": "src/enhancedUIManager.js",
      "line": 41,
      "context": "this.optimizedUpdates.set('score', this.createScoreUpdater());"
    },
    {
      "object": "optimizedUpdates",
      "method": "set",
      "file": "src/enhancedUIManager.js",
      "line": 44,
      "context": "this.optimizedUpdates.set('roomInfo', this.createRoomInfoUpdater());"
    },
    {
      "object": "this",
      "method": "createRoomInfoUpdater",
      "file": "src/enhancedUIManager.js",
      "line": 44,
      "context": "this.optimizedUpdates.set('roomInfo', this.createRoomInfoUpdater());"
    },
    {
      "object": "optimizedUpdates",
      "method": "set",
      "file": "src/enhancedUIManager.js",
      "line": 47,
      "context": "this.optimizedUpdates.set('question', this.createQuestionUpdater());"
    },
    {
      "object": "this",
      "method": "createQuestionUpdater",
      "file": "src/enhancedUIManager.js",
      "line": 47,
      "context": "this.optimizedUpdates.set('question', this.createQuestionUpdater());"
    },
    {
      "object": "optimizedUpdates",
      "method": "set",
      "file": "src/enhancedUIManager.js",
      "line": 50,
      "context": "this.optimizedUpdates.set('progress', this.createProgressUpdater());"
    },
    {
      "object": "this",
      "method": "createProgressUpdater",
      "file": "src/enhancedUIManager.js",
      "line": 50,
      "context": "this.optimizedUpdates.set('progress', this.createProgressUpdater());"
    },
    {
      "object": "optimizedUpdates",
      "method": "set",
      "file": "src/enhancedUIManager.js",
      "line": 53,
      "context": "this.optimizedUpdates.set('timer', this.createTimerUpdater());"
    },
    {
      "object": "this",
      "method": "createTimerUpdater",
      "file": "src/enhancedUIManager.js",
      "line": 53,
      "context": "this.optimizedUpdates.set('timer', this.createTimerUpdater());"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 65,
      "context": "scoreElement = document.getElementById('current-score');"
    },
    {
      "object": "performanceManager",
      "method": "batchDOMUpdate",
      "file": "src/enhancedUIManager.js",
      "line": 69,
      "context": "this.performanceManager.batchDOMUpdate("
    },
    {
      "object": "DOMUpdateTemplates",
      "method": "updateText",
      "file": "src/enhancedUIManager.js",
      "line": 70,
      "context": "DOMUpdateTemplates.updateText(scoreElement, newScore.toString()),"
    },
    {
      "object": "newScore",
      "method": "toString",
      "file": "src/enhancedUIManager.js",
      "line": 70,
      "context": "DOMUpdateTemplates.updateText(scoreElement, newScore.toString()),"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 89,
      "context": "elements.name = document.getElementById('room-name');"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 90,
      "context": "elements.description = document.getElementById('room-description');"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 91,
      "context": "elements.connections = document.getElementById('room-connections');"
    },
    {
      "object": "updates",
      "method": "push",
      "file": "src/enhancedUIManager.js",
      "line": 97,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.name, roomData.name));"
    },
    {
      "object": "DOMUpdateTemplates",
      "method": "updateText",
      "file": "src/enhancedUIManager.js",
      "line": 97,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.name, roomData.name));"
    },
    {
      "object": "updates",
      "method": "push",
      "file": "src/enhancedUIManager.js",
      "line": 101,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.description, roomData.description));"
    },
    {
      "object": "DOMUpdateTemplates",
      "method": "updateText",
      "file": "src/enhancedUIManager.js",
      "line": 101,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.description, roomData.description));"
    },
    {
      "object": "updates",
      "method": "push",
      "file": "src/enhancedUIManager.js",
      "line": 105,
      "context": "updates.push(() => this.updateRoomConnections(elements.connections, roomData.connections));"
    },
    {
      "object": "this",
      "method": "updateRoomConnections",
      "file": "src/enhancedUIManager.js",
      "line": 105,
      "context": "updates.push(() => this.updateRoomConnections(elements.connections, roomData.connections));"
    },
    {
      "object": "updates",
      "method": "forEach",
      "file": "src/enhancedUIManager.js",
      "line": 109,
      "context": "updates.forEach(update => this.performanceManager.batchDOMUpdate(update, 2));"
    },
    {
      "object": "performanceManager",
      "method": "batchDOMUpdate",
      "file": "src/enhancedUIManager.js",
      "line": 109,
      "context": "updates.forEach(update => this.performanceManager.batchDOMUpdate(update, 2));"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 126,
      "context": "elements.text = document.getElementById('question-text');"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 127,
      "context": "elements.category = document.getElementById('question-category');"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 128,
      "context": "elements.difficulty = document.getElementById('question-difficulty');"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 129,
      "context": "elements.points = document.getElementById('question-points');"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 130,
      "context": "elements.answers = document.getElementById('answer-buttons');"
    },
    {
      "object": "updates",
      "method": "push",
      "file": "src/enhancedUIManager.js",
      "line": 136,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.text, questionData.question));"
    },
    {
      "object": "DOMUpdateTemplates",
      "method": "updateText",
      "file": "src/enhancedUIManager.js",
      "line": 136,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.text, questionData.question));"
    },
    {
      "object": "updates",
      "method": "push",
      "file": "src/enhancedUIManager.js",
      "line": 140,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.category, questionData.category));"
    },
    {
      "object": "DOMUpdateTemplates",
      "method": "updateText",
      "file": "src/enhancedUIManager.js",
      "line": 140,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.category, questionData.category));"
    },
    {
      "object": "updates",
      "method": "push",
      "file": "src/enhancedUIManager.js",
      "line": 144,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.difficulty, questionData.difficulty));"
    },
    {
      "object": "DOMUpdateTemplates",
      "method": "updateText",
      "file": "src/enhancedUIManager.js",
      "line": 144,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.difficulty, questionData.difficulty));"
    },
    {
      "object": "updates",
      "method": "push",
      "file": "src/enhancedUIManager.js",
      "line": 148,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.points, `${questionData.points} points`));"
    },
    {
      "object": "DOMUpdateTemplates",
      "method": "updateText",
      "file": "src/enhancedUIManager.js",
      "line": 148,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.points, `${questionData.points} points`));"
    },
    {
      "object": "updates",
      "method": "push",
      "file": "src/enhancedUIManager.js",
      "line": 152,
      "context": "updates.push(() => this.updateAnswerButtons(elements.answers, questionData.answers));"
    },
    {
      "object": "this",
      "method": "updateAnswerButtons",
      "file": "src/enhancedUIManager.js",
      "line": 152,
      "context": "updates.push(() => this.updateAnswerButtons(elements.answers, questionData.answers));"
    },
    {
      "object": "updates",
      "method": "forEach",
      "file": "src/enhancedUIManager.js",
      "line": 156,
      "context": "updates.forEach(update => this.performanceManager.batchDOMUpdate(update, 1));"
    },
    {
      "object": "performanceManager",
      "method": "batchDOMUpdate",
      "file": "src/enhancedUIManager.js",
      "line": 156,
      "context": "updates.forEach(update => this.performanceManager.batchDOMUpdate(update, 1));"
    },
    {
      "object": "JSON",
      "method": "stringify",
      "file": "src/enhancedUIManager.js",
      "line": 170,
      "context": "const progressKey = JSON.stringify(progressData);"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 175,
      "context": "percent: document.getElementById('overall-progress-percent'),"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 176,
      "context": "fill: document.getElementById('overall-progress-fill')"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 179,
      "context": "percent: document.getElementById('rooms-progress-percent'),"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 180,
      "context": "fill: document.getElementById('rooms-progress-fill')"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 183,
      "context": "percent: document.getElementById('accuracy-progress-percent'),"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 184,
      "context": "fill: document.getElementById('accuracy-progress-fill')"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/enhancedUIManager.js",
      "line": 189,
      "context": "console.warn('Enhanced UI: Overall progress elements not found');"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/enhancedUIManager.js",
      "line": 192,
      "context": "console.warn('Enhanced UI: Rooms progress elements not found');"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/enhancedUIManager.js",
      "line": 195,
      "context": "console.warn('Enhanced UI: Accuracy progress elements not found');"
    },
    {
      "object": "updates",
      "method": "push",
      "file": "src/enhancedUIManager.js",
      "line": 202,
      "context": "updates.push(() => {"
    },
    {
      "object": "Math",
      "method": "round",
      "file": "src/enhancedUIManager.js",
      "line": 203,
      "context": "elements.overall.percent.textContent = `${Math.round(progressData.overall)}%`;"
    },
    {
      "object": "Math",
      "method": "max",
      "file": "src/enhancedUIManager.js",
      "line": 204,
      "context": "elements.overall.fill.style.width = `${Math.max(0, progressData.overall)}%`;"
    },
    {
      "object": "fill",
      "method": "setAttribute",
      "file": "src/enhancedUIManager.js",
      "line": 205,
      "context": "elements.overall.fill.setAttribute('aria-valuenow', progressData.overall);"
    },
    {
      "object": "updates",
      "method": "push",
      "file": "src/enhancedUIManager.js",
      "line": 210,
      "context": "updates.push(() => {"
    },
    {
      "object": "Math",
      "method": "round",
      "file": "src/enhancedUIManager.js",
      "line": 211,
      "context": "elements.rooms.percent.textContent = `${Math.round(progressData.rooms)}%`;"
    },
    {
      "object": "Math",
      "method": "max",
      "file": "src/enhancedUIManager.js",
      "line": 212,
      "context": "elements.rooms.fill.style.width = `${Math.max(0, progressData.rooms)}%`;"
    },
    {
      "object": "fill",
      "method": "setAttribute",
      "file": "src/enhancedUIManager.js",
      "line": 213,
      "context": "elements.rooms.fill.setAttribute('aria-valuenow', progressData.rooms);"
    },
    {
      "object": "updates",
      "method": "push",
      "file": "src/enhancedUIManager.js",
      "line": 218,
      "context": "updates.push(() => {"
    },
    {
      "object": "Math",
      "method": "round",
      "file": "src/enhancedUIManager.js",
      "line": 219,
      "context": "elements.accuracy.percent.textContent = `${Math.round(progressData.accuracy)}%`;"
    },
    {
      "object": "Math",
      "method": "max",
      "file": "src/enhancedUIManager.js",
      "line": 220,
      "context": "elements.accuracy.fill.style.width = `${Math.max(0, progressData.accuracy)}%`;"
    },
    {
      "object": "fill",
      "method": "setAttribute",
      "file": "src/enhancedUIManager.js",
      "line": 221,
      "context": "elements.accuracy.fill.setAttribute('aria-valuenow', progressData.accuracy);"
    },
    {
      "object": "updates",
      "method": "forEach",
      "file": "src/enhancedUIManager.js",
      "line": 226,
      "context": "updates.forEach(update => this.performanceManager.batchDOMUpdate(update, 2));"
    },
    {
      "object": "performanceManager",
      "method": "batchDOMUpdate",
      "file": "src/enhancedUIManager.js",
      "line": 226,
      "context": "updates.forEach(update => this.performanceManager.batchDOMUpdate(update, 2));"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 243,
      "context": "timerElement = document.getElementById('timer-text');"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/enhancedUIManager.js",
      "line": 245,
      "context": "console.warn('Enhanced UI: Timer element (timer-text) not found');"
    },
    {
      "object": "performanceManager",
      "method": "batchDOMUpdate",
      "file": "src/enhancedUIManager.js",
      "line": 251,
      "context": "this.performanceManager.batchDOMUpdate("
    },
    {
      "object": "DOMUpdateTemplates",
      "method": "updateTimer",
      "file": "src/enhancedUIManager.js",
      "line": 252,
      "context": "DOMUpdateTemplates.updateTimer(timerElement, timeRemaining, totalTime),"
    },
    {
      "object": "connections",
      "method": "forEach",
      "file": "src/enhancedUIManager.js",
      "line": 267,
      "context": "connections.forEach(connection => {"
    },
    {
      "object": "performanceManager",
      "method": "acquireFromPool",
      "file": "src/enhancedUIManager.js",
      "line": 268,
      "context": "const connectionElement = this.performanceManager.acquireFromPool('roomConnections');"
    },
    {
      "object": "connectionElement",
      "method": "querySelector",
      "file": "src/enhancedUIManager.js",
      "line": 269,
      "context": "const link = connectionElement.querySelector('.connection-link');"
    },
    {
      "object": "link",
      "method": "setAttribute",
      "file": "src/enhancedUIManager.js",
      "line": 272,
      "context": "link.setAttribute('data-room-id', connection.id);"
    },
    {
      "object": "link",
      "method": "setAttribute",
      "file": "src/enhancedUIManager.js",
      "line": 273,
      "context": "link.setAttribute('aria-label', `Navigate to ${connection.name}`);"
    },
    {
      "object": "classList",
      "method": "add",
      "file": "src/enhancedUIManager.js",
      "line": 276,
      "context": "connectionElement.classList.add('locked');"
    },
    {
      "object": "classList",
      "method": "remove",
      "file": "src/enhancedUIManager.js",
      "line": 279,
      "context": "connectionElement.classList.remove('locked');"
    },
    {
      "object": "originalUI",
      "method": "moveToRoom",
      "file": "src/enhancedUIManager.js",
      "line": 281,
      "context": "link.onclick = () => this.originalUI.moveToRoom(connection.id);"
    },
    {
      "object": "container",
      "method": "appendChild",
      "file": "src/enhancedUIManager.js",
      "line": 284,
      "context": "container.appendChild(connectionElement);"
    },
    {
      "object": "answers",
      "method": "forEach",
      "file": "src/enhancedUIManager.js",
      "line": 295,
      "context": "answers.forEach((answer, index) => {"
    },
    {
      "object": "performanceManager",
      "method": "acquireFromPool",
      "file": "src/enhancedUIManager.js",
      "line": 296,
      "context": "const button = this.performanceManager.acquireFromPool('answerButtons');"
    },
    {
      "object": "button",
      "method": "setAttribute",
      "file": "src/enhancedUIManager.js",
      "line": 299,
      "context": "button.setAttribute('data-answer-index', index);"
    },
    {
      "object": "button",
      "method": "setAttribute",
      "file": "src/enhancedUIManager.js",
      "line": 300,
      "context": "button.setAttribute('aria-label', `Answer option ${index + 1}: ${answer}`);"
    },
    {
      "object": "originalUI",
      "method": "selectAnswer",
      "file": "src/enhancedUIManager.js",
      "line": 301,
      "context": "button.onclick = () => this.originalUI.selectAnswer(index);"
    },
    {
      "object": "container",
      "method": "appendChild",
      "file": "src/enhancedUIManager.js",
      "line": 303,
      "context": "container.appendChild(button);"
    },
    {
      "object": "performanceManager",
      "method": "acquireFromPool",
      "file": "src/enhancedUIManager.js",
      "line": 311,
      "context": "const notification = this.performanceManager.acquireFromPool('notifications');"
    },
    {
      "object": "notification",
      "method": "querySelector",
      "file": "src/enhancedUIManager.js",
      "line": 312,
      "context": "const icon = notification.querySelector('.toast-icon');"
    },
    {
      "object": "notification",
      "method": "querySelector",
      "file": "src/enhancedUIManager.js",
      "line": 313,
      "context": "const titleElement = notification.querySelector('.toast-title');"
    },
    {
      "object": "notification",
      "method": "querySelector",
      "file": "src/enhancedUIManager.js",
      "line": 314,
      "context": "const messageElement = notification.querySelector('.toast-message');"
    },
    {
      "object": "notification",
      "method": "setAttribute",
      "file": "src/enhancedUIManager.js",
      "line": 318,
      "context": "notification.setAttribute('data-type', type);"
    },
    {
      "object": "body",
      "method": "appendChild",
      "file": "src/enhancedUIManager.js",
      "line": 333,
      "context": "document.body.appendChild(notification);"
    },
    {
      "object": "parentNode",
      "method": "removeChild",
      "file": "src/enhancedUIManager.js",
      "line": 348,
      "context": "notification.parentNode.removeChild(notification);"
    },
    {
      "object": "performanceManager",
      "method": "releaseToPool",
      "file": "src/enhancedUIManager.js",
      "line": 350,
      "context": "this.performanceManager.releaseToPool('notifications', notification);"
    },
    {
      "object": "Object",
      "method": "entries",
      "file": "src/enhancedUIManager.js",
      "line": 359,
      "context": "for (const [type, data] of Object.entries(updates)) {"
    },
    {
      "object": "optimizedUpdates",
      "method": "get",
      "file": "src/enhancedUIManager.js",
      "line": 360,
      "context": "const updater = this.optimizedUpdates.get(type);"
    },
    {
      "object": "optimizedUpdates",
      "method": "get",
      "file": "src/enhancedUIManager.js",
      "line": 371,
      "context": "const updater = this.optimizedUpdates.get('score');"
    },
    {
      "object": "originalUI",
      "method": "updateScore",
      "file": "src/enhancedUIManager.js",
      "line": 375,
      "context": "this.originalUI.updateScore(score);"
    },
    {
      "object": "optimizedUpdates",
      "method": "get",
      "file": "src/enhancedUIManager.js",
      "line": 380,
      "context": "const updater = this.optimizedUpdates.get('roomInfo');"
    },
    {
      "object": "originalUI",
      "method": "updateRoomInfo",
      "file": "src/enhancedUIManager.js",
      "line": 384,
      "context": "this.originalUI.updateRoomInfo(roomData);"
    },
    {
      "object": "optimizedUpdates",
      "method": "get",
      "file": "src/enhancedUIManager.js",
      "line": 389,
      "context": "const updater = this.optimizedUpdates.get('question');"
    },
    {
      "object": "originalUI",
      "method": "updateQuestionDisplay",
      "file": "src/enhancedUIManager.js",
      "line": 393,
      "context": "this.originalUI.updateQuestionDisplay(questionData);"
    },
    {
      "object": "optimizedUpdates",
      "method": "get",
      "file": "src/enhancedUIManager.js",
      "line": 398,
      "context": "const updater = this.optimizedUpdates.get('progress');"
    },
    {
      "object": "originalUI",
      "method": "updateProgress",
      "file": "src/enhancedUIManager.js",
      "line": 402,
      "context": "this.originalUI.updateProgress(progressData);"
    },
    {
      "object": "optimizedUpdates",
      "method": "get",
      "file": "src/enhancedUIManager.js",
      "line": 407,
      "context": "const updater = this.optimizedUpdates.get('timer');"
    },
    {
      "object": "originalUI",
      "method": "updateTimer",
      "file": "src/enhancedUIManager.js",
      "line": 411,
      "context": "this.originalUI.updateTimer(timeRemaining, totalTime);"
    },
    {
      "object": "this",
      "method": "showOptimizedNotification",
      "file": "src/enhancedUIManager.js",
      "line": 419,
      "context": "this.showOptimizedNotification(type, title, message, duration);"
    },
    {
      "object": "objectPools",
      "method": "get",
      "file": "src/enhancedUIManager.js",
      "line": 428,
      "context": "const pool = this.performanceManager.objectPools.get(poolName);"
    },
    {
      "object": "inUse",
      "method": "clear",
      "file": "src/enhancedUIManager.js",
      "line": 431,
      "context": "pool.inUse.clear();"
    },
    {
      "object": "available",
      "method": "forEach",
      "file": "src/enhancedUIManager.js",
      "line": 434,
      "context": "pool.available.forEach(item => {"
    },
    {
      "object": "item",
      "method": "reset",
      "file": "src/enhancedUIManager.js",
      "line": 436,
      "context": "item.reset();"
    },
    {
      "object": "updateQueue",
      "method": "clear",
      "file": "src/enhancedUIManager.js",
      "line": 443,
      "context": "this.updateQueue.clear();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/enhancedUIManager.js",
      "line": 446,
      "context": "console.log('🧹 Enhanced UIManager cleanup completed');"
    },
    {
      "object": "performanceManager",
      "method": "getPoolStats",
      "file": "src/enhancedUIManager.js",
      "line": 455,
      "context": ".map(name => this.performanceManager.getPoolStats(name)),"
    },
    {
      "object": "originalUI",
      "method": "selectAnswer",
      "file": "src/enhancedUIManager.js",
      "line": 466,
      "context": "return this.originalUI.selectAnswer(index);"
    },
    {
      "object": "originalUI",
      "method": "moveToRoom",
      "file": "src/enhancedUIManager.js",
      "line": 470,
      "context": "return this.originalUI.moveToRoom(roomId);"
    },
    {
      "object": "originalUI",
      "method": "newQuestion",
      "file": "src/enhancedUIManager.js",
      "line": 474,
      "context": "return this.originalUI.newQuestion();"
    },
    {
      "object": "originalUI",
      "method": "skipQuestion",
      "file": "src/enhancedUIManager.js",
      "line": 478,
      "context": "return this.originalUI.skipQuestion();"
    },
    {
      "object": "originalUI",
      "method": "showHint",
      "file": "src/enhancedUIManager.js",
      "line": 482,
      "context": "return this.originalUI.showHint();"
    },
    {
      "object": "originalUI",
      "method": "saveGame",
      "file": "src/enhancedUIManager.js",
      "line": 486,
      "context": "return this.originalUI.saveGame();"
    },
    {
      "object": "originalUI",
      "method": "loadGame",
      "file": "src/enhancedUIManager.js",
      "line": 490,
      "context": "return this.originalUI.loadGame();"
    },
    {
      "object": "originalUI",
      "method": "resetGame",
      "file": "src/enhancedUIManager.js",
      "line": 494,
      "context": "return this.originalUI.resetGame();"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/learningAnalytics.js",
      "line": 11,
      "context": "startTime: Date.now(),"
    },
    {
      "object": "this",
      "method": "generateSessionId",
      "file": "src/learningAnalytics.js",
      "line": 12,
      "context": "sessionId: this.generateSessionId(),"
    },
    {
      "object": "this",
      "method": "loadPersistentData",
      "file": "src/learningAnalytics.js",
      "line": 38,
      "context": "this.loadPersistentData();"
    },
    {
      "object": "this",
      "method": "setupPerformanceObserver",
      "file": "src/learningAnalytics.js",
      "line": 39,
      "context": "this.setupPerformanceObserver();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/learningAnalytics.js",
      "line": 41,
      "context": "console.log('📊 LearningAnalytics initialized - Advanced educational tracking active');"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/learningAnalytics.js",
      "line": 49,
      "context": "return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;"
    },
    {
      "object": "Math",
      "method": "random",
      "file": "src/learningAnalytics.js",
      "line": 49,
      "context": "return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;"
    },
    {
      "object": "localStorage",
      "method": "getItem",
      "file": "src/learningAnalytics.js",
      "line": 57,
      "context": "const saved = localStorage.getItem('lobeLabyrinth_analytics');"
    },
    {
      "object": "JSON",
      "method": "parse",
      "file": "src/learningAnalytics.js",
      "line": 59,
      "context": "const data = JSON.parse(saved);"
    },
    {
      "object": "this",
      "method": "createDefaultProfile",
      "file": "src/learningAnalytics.js",
      "line": 62,
      "context": "this.learnerProfile = data.learnerProfile || this.createDefaultProfile();"
    },
    {
      "object": "this",
      "method": "createDefaultProfile",
      "file": "src/learningAnalytics.js",
      "line": 66,
      "context": "this.learnerProfile = this.createDefaultProfile();"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/learningAnalytics.js",
      "line": 69,
      "context": "console.warn('Failed to load learning analytics data:', error);"
    },
    {
      "object": "this",
      "method": "createDefaultProfile",
      "file": "src/learningAnalytics.js",
      "line": 72,
      "context": "this.learnerProfile = this.createDefaultProfile();"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/learningAnalytics.js",
      "line": 89,
      "context": "createdAt: Date.now()"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/learningAnalytics.js",
      "line": 98,
      "context": "console.warn('PerformanceObserver not supported');"
    },
    {
      "object": "list",
      "method": "getEntries",
      "file": "src/learningAnalytics.js",
      "line": 104,
      "context": "for (const entry of list.getEntries()) {"
    },
    {
      "object": "name",
      "method": "includes",
      "file": "src/learningAnalytics.js",
      "line": 105,
      "context": "if (entry.name.includes('question') || entry.name.includes('answer')) {"
    },
    {
      "object": "name",
      "method": "includes",
      "file": "src/learningAnalytics.js",
      "line": 105,
      "context": "if (entry.name.includes('question') || entry.name.includes('answer')) {"
    },
    {
      "object": "this",
      "method": "trackPerformanceMetric",
      "file": "src/learningAnalytics.js",
      "line": 106,
      "context": "this.trackPerformanceMetric(entry);"
    },
    {
      "object": "observer",
      "method": "observe",
      "file": "src/learningAnalytics.js",
      "line": 111,
      "context": "observer.observe({ entryTypes: ['measure', 'navigation'] });"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/learningAnalytics.js",
      "line": 113,
      "context": "console.warn('Performance observer setup failed:', error);"
    },
    {
      "object": "timePatterns",
      "method": "push",
      "file": "src/learningAnalytics.js",
      "line": 122,
      "context": "this.sessionData.timePatterns.push({"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/learningAnalytics.js",
      "line": 123,
      "context": "timestamp: Date.now(),"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/learningAnalytics.js",
      "line": 156,
      "context": "timestamp: Date.now()"
    },
    {
      "object": "questionPatterns",
      "method": "set",
      "file": "src/learningAnalytics.js",
      "line": 159,
      "context": "this.sessionData.questionPatterns.set(questionId, pattern);"
    },
    {
      "object": "difficultyProgression",
      "method": "push",
      "file": "src/learningAnalytics.js",
      "line": 160,
      "context": "this.sessionData.difficultyProgression.push(difficulty);"
    },
    {
      "object": "hintUsage",
      "method": "push",
      "file": "src/learningAnalytics.js",
      "line": 163,
      "context": "this.sessionData.hintUsage.push({"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/learningAnalytics.js",
      "line": 167,
      "context": "timestamp: Date.now()"
    },
    {
      "object": "errorPatterns",
      "method": "push",
      "file": "src/learningAnalytics.js",
      "line": 173,
      "context": "this.sessionData.errorPatterns.push({"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/learningAnalytics.js",
      "line": 179,
      "context": "timestamp: Date.now()"
    },
    {
      "object": "categoryPerformance",
      "method": "has",
      "file": "src/learningAnalytics.js",
      "line": 184,
      "context": "if (!this.sessionData.categoryPerformance.has(category)) {"
    },
    {
      "object": "categoryPerformance",
      "method": "set",
      "file": "src/learningAnalytics.js",
      "line": 185,
      "context": "this.sessionData.categoryPerformance.set(category, {"
    },
    {
      "object": "categoryPerformance",
      "method": "get",
      "file": "src/learningAnalytics.js",
      "line": 193,
      "context": "const categoryStats = this.sessionData.categoryPerformance.get(category);"
    },
    {
      "object": "this",
      "method": "updateStreakData",
      "file": "src/learningAnalytics.js",
      "line": 203,
      "context": "this.updateStreakData(isCorrect);"
    },
    {
      "object": "this",
      "method": "updateLearnerProfile",
      "file": "src/learningAnalytics.js",
      "line": 206,
      "context": "this.updateLearnerProfile(pattern);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/learningAnalytics.js",
      "line": 208,
      "context": "console.log(`📈 Tracked response: ${category} (${difficulty}) - ${isCorrect ? 'Correct' : 'Incorrect'}`);"
    },
    {
      "object": "Math",
      "method": "max",
      "file": "src/learningAnalytics.js",
      "line": 226,
      "context": "this.learnerProfile.longestStreak = Math.max("
    },
    {
      "object": "Array",
      "method": "from",
      "file": "src/learningAnalytics.js",
      "line": 249,
      "context": "const totalCorrect = Array.from(this.sessionData.questionPatterns.values())"
    },
    {
      "object": "questionPatterns",
      "method": "values",
      "file": "src/learningAnalytics.js",
      "line": 249,
      "context": "const totalCorrect = Array.from(this.sessionData.questionPatterns.values())"
    },
    {
      "object": "this",
      "method": "updateCategoryAssessment",
      "file": "src/learningAnalytics.js",
      "line": 254,
      "context": "this.updateCategoryAssessment(pattern);"
    },
    {
      "object": "this",
      "method": "updateLearningSpeedPreference",
      "file": "src/learningAnalytics.js",
      "line": 257,
      "context": "this.updateLearningSpeedPreference(pattern);"
    },
    {
      "object": "categoryPerformance",
      "method": "get",
      "file": "src/learningAnalytics.js",
      "line": 265,
      "context": "const categoryStats = this.sessionData.categoryPerformance.get(pattern.category);"
    },
    {
      "object": "strongCategories",
      "method": "includes",
      "file": "src/learningAnalytics.js",
      "line": 269,
      "context": "if (!this.learnerProfile.strongCategories.includes(pattern.category)) {"
    },
    {
      "object": "strongCategories",
      "method": "push",
      "file": "src/learningAnalytics.js",
      "line": 270,
      "context": "this.learnerProfile.strongCategories.push(pattern.category);"
    },
    {
      "object": "improvementAreas",
      "method": "includes",
      "file": "src/learningAnalytics.js",
      "line": 276,
      "context": "if (!this.learnerProfile.improvementAreas.includes(pattern.category)) {"
    },
    {
      "object": "improvementAreas",
      "method": "push",
      "file": "src/learningAnalytics.js",
      "line": 277,
      "context": "this.learnerProfile.improvementAreas.push(pattern.category);"
    },
    {
      "object": "Array",
      "method": "from",
      "file": "src/learningAnalytics.js",
      "line": 290,
      "context": "const recentPatterns = Array.from(this.sessionData.questionPatterns.values())"
    },
    {
      "object": "questionPatterns",
      "method": "values",
      "file": "src/learningAnalytics.js",
      "line": 290,
      "context": "const recentPatterns = Array.from(this.sessionData.questionPatterns.values())"
    },
    {
      "object": "recentPatterns",
      "method": "reduce",
      "file": "src/learningAnalytics.js",
      "line": 294,
      "context": "const averageTime = recentPatterns.reduce((sum, p) => sum + p.timeSpent, 0) / recentPatterns.length;"
    },
    {
      "object": "Array",
      "method": "from",
      "file": "src/learningAnalytics.js",
      "line": 311,
      "context": "const patterns = Array.from(this.sessionData.questionPatterns.values());"
    },
    {
      "object": "questionPatterns",
      "method": "values",
      "file": "src/learningAnalytics.js",
      "line": 311,
      "context": "const patterns = Array.from(this.sessionData.questionPatterns.values());"
    },
    {
      "object": "patterns",
      "method": "slice",
      "file": "src/learningAnalytics.js",
      "line": 316,
      "context": "const recentPatterns = patterns.slice(-this.learningMetrics.velocityWindow);"
    },
    {
      "object": "recentPatterns",
      "method": "slice",
      "file": "src/learningAnalytics.js",
      "line": 317,
      "context": "const firstHalf = recentPatterns.slice(0, Math.floor(recentPatterns.length / 2));"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/learningAnalytics.js",
      "line": 317,
      "context": "const firstHalf = recentPatterns.slice(0, Math.floor(recentPatterns.length / 2));"
    },
    {
      "object": "recentPatterns",
      "method": "slice",
      "file": "src/learningAnalytics.js",
      "line": 318,
      "context": "const secondHalf = recentPatterns.slice(Math.floor(recentPatterns.length / 2));"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/learningAnalytics.js",
      "line": 318,
      "context": "const secondHalf = recentPatterns.slice(Math.floor(recentPatterns.length / 2));"
    },
    {
      "object": "firstHalf",
      "method": "filter",
      "file": "src/learningAnalytics.js",
      "line": 320,
      "context": "const firstHalfAccuracy = firstHalf.filter(p => p.isCorrect).length / firstHalf.length;"
    },
    {
      "object": "secondHalf",
      "method": "filter",
      "file": "src/learningAnalytics.js",
      "line": 321,
      "context": "const secondHalfAccuracy = secondHalf.filter(p => p.isCorrect).length / secondHalf.length;"
    },
    {
      "object": "Math",
      "method": "min",
      "file": "src/learningAnalytics.js",
      "line": 335,
      "context": "confidence: Math.min(recentPatterns.length / this.learningMetrics.velocityWindow, 1),"
    },
    {
      "object": "this",
      "method": "calculateLearningVelocity",
      "file": "src/learningAnalytics.js",
      "line": 346,
      "context": "const velocity = this.calculateLearningVelocity();"
    },
    {
      "object": "this",
      "method": "getSessionStatistics",
      "file": "src/learningAnalytics.js",
      "line": 347,
      "context": "const sessionStats = this.getSessionStatistics();"
    },
    {
      "object": "this",
      "method": "identifyStrengthsAndWeaknesses",
      "file": "src/learningAnalytics.js",
      "line": 348,
      "context": "const strengths = this.identifyStrengthsAndWeaknesses();"
    },
    {
      "object": "this",
      "method": "generateRecommendations",
      "file": "src/learningAnalytics.js",
      "line": 349,
      "context": "const recommendations = this.generateRecommendations();"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/learningAnalytics.js",
      "line": 353,
      "context": "timestamp: Date.now(),"
    },
    {
      "object": "this",
      "method": "generateMotivationalMessage",
      "file": "src/learningAnalytics.js",
      "line": 358,
      "context": "motivationalMessage: this.generateMotivationalMessage(velocity, sessionStats)"
    },
    {
      "object": "Array",
      "method": "from",
      "file": "src/learningAnalytics.js",
      "line": 372,
      "context": "const patterns = Array.from(this.sessionData.questionPatterns.values());"
    },
    {
      "object": "questionPatterns",
      "method": "values",
      "file": "src/learningAnalytics.js",
      "line": 372,
      "context": "const patterns = Array.from(this.sessionData.questionPatterns.values());"
    },
    {
      "object": "patterns",
      "method": "filter",
      "file": "src/learningAnalytics.js",
      "line": 374,
      "context": "const correctAnswers = patterns.filter(p => p.isCorrect).length;"
    },
    {
      "object": "patterns",
      "method": "reduce",
      "file": "src/learningAnalytics.js",
      "line": 377,
      "context": "const totalTime = patterns.reduce((sum, p) => sum + p.timeSpent, 0);"
    },
    {
      "object": "Array",
      "method": "from",
      "file": "src/learningAnalytics.js",
      "line": 380,
      "context": "const categories = Array.from(this.sessionData.categoryPerformance.entries());"
    },
    {
      "object": "categoryPerformance",
      "method": "entries",
      "file": "src/learningAnalytics.js",
      "line": 380,
      "context": "const categories = Array.from(this.sessionData.categoryPerformance.entries());"
    },
    {
      "object": "hintUsage",
      "method": "reduce",
      "file": "src/learningAnalytics.js",
      "line": 381,
      "context": "const hintsUsed = this.sessionData.hintUsage.reduce((sum, h) => sum + h.hintsUsed, 0);"
    },
    {
      "object": "Math",
      "method": "round",
      "file": "src/learningAnalytics.js",
      "line": 386,
      "context": "accuracy: Math.round(accuracy * 100),"
    },
    {
      "object": "Math",
      "method": "round",
      "file": "src/learningAnalytics.js",
      "line": 387,
      "context": "averageTimePerQuestion: Math.round(averageTimePerQuestion / 1000), // Convert to seconds"
    },
    {
      "object": "Math",
      "method": "round",
      "file": "src/learningAnalytics.js",
      "line": 392,
      "context": "sessionDuration: Math.round((Date.now() - this.sessionData.startTime) / 1000 / 60) // minutes"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/learningAnalytics.js",
      "line": 392,
      "context": "sessionDuration: Math.round((Date.now() - this.sessionData.startTime) / 1000 / 60) // minutes"
    },
    {
      "object": "Array",
      "method": "from",
      "file": "src/learningAnalytics.js",
      "line": 401,
      "context": "const categoryPerformance = Array.from(this.sessionData.categoryPerformance.entries())"
    },
    {
      "object": "categoryPerformance",
      "method": "entries",
      "file": "src/learningAnalytics.js",
      "line": 401,
      "context": "const categoryPerformance = Array.from(this.sessionData.categoryPerformance.entries())"
    },
    {
      "object": "this",
      "method": "calculateLearningVelocity",
      "file": "src/learningAnalytics.js",
      "line": 427,
      "context": "const velocity = this.calculateLearningVelocity();"
    },
    {
      "object": "this",
      "method": "getSessionStatistics",
      "file": "src/learningAnalytics.js",
      "line": 428,
      "context": "const sessionStats = this.getSessionStatistics();"
    },
    {
      "object": "this",
      "method": "identifyStrengthsAndWeaknesses",
      "file": "src/learningAnalytics.js",
      "line": 429,
      "context": "const strengths = this.identifyStrengthsAndWeaknesses();"
    },
    {
      "object": "recommendations",
      "method": "push",
      "file": "src/learningAnalytics.js",
      "line": 433,
      "context": "recommendations.push({"
    },
    {
      "object": "recommendations",
      "method": "push",
      "file": "src/learningAnalytics.js",
      "line": 444,
      "context": "recommendations.push({"
    },
    {
      "object": "recommendations",
      "method": "push",
      "file": "src/learningAnalytics.js",
      "line": 455,
      "context": "recommendations.push({"
    },
    {
      "object": "recommendations",
      "method": "push",
      "file": "src/learningAnalytics.js",
      "line": 467,
      "context": "recommendations.push({"
    },
    {
      "object": "recommendations",
      "method": "push",
      "file": "src/learningAnalytics.js",
      "line": 478,
      "context": "recommendations.push({"
    },
    {
      "object": "recommendations",
      "method": "push",
      "file": "src/learningAnalytics.js",
      "line": 486,
      "context": "recommendations.push({"
    },
    {
      "object": "recommendations",
      "method": "slice",
      "file": "src/learningAnalytics.js",
      "line": 495,
      "context": "return recommendations.slice(0, 3); // Limit to top 3 recommendations"
    },
    {
      "object": "Math",
      "method": "floor",
      "file": "src/learningAnalytics.js",
      "line": 539,
      "context": "return categoryMessages[Math.floor(Math.random() * categoryMessages.length)];"
    },
    {
      "object": "Math",
      "method": "random",
      "file": "src/learningAnalytics.js",
      "line": 539,
      "context": "return categoryMessages[Math.floor(Math.random() * categoryMessages.length)];"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/learningAnalytics.js",
      "line": 551,
      "context": "lastUpdated: Date.now()"
    },
    {
      "object": "localStorage",
      "method": "setItem",
      "file": "src/learningAnalytics.js",
      "line": 554,
      "context": "localStorage.setItem('lobeLabyrinth_analytics', JSON.stringify(dataToSave));"
    },
    {
      "object": "JSON",
      "method": "stringify",
      "file": "src/learningAnalytics.js",
      "line": 554,
      "context": "localStorage.setItem('lobeLabyrinth_analytics', JSON.stringify(dataToSave));"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/learningAnalytics.js",
      "line": 555,
      "context": "console.log('📊 Learning analytics data saved');"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/learningAnalytics.js",
      "line": 557,
      "context": "console.error('Failed to save learning analytics data:', error);"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/learningAnalytics.js",
      "line": 568,
      "context": "endTime: Date.now(),"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/learningAnalytics.js",
      "line": 569,
      "context": "duration: Date.now() - this.sessionData.startTime,"
    },
    {
      "object": "this",
      "method": "getSessionStatistics",
      "file": "src/learningAnalytics.js",
      "line": 572,
      "context": "finalStats: this.getSessionStatistics()"
    },
    {
      "object": "historicalData",
      "method": "push",
      "file": "src/learningAnalytics.js",
      "line": 575,
      "context": "this.historicalData.push(sessionSummary);"
    },
    {
      "object": "this",
      "method": "saveAnalyticsData",
      "file": "src/learningAnalytics.js",
      "line": 576,
      "context": "this.saveAnalyticsData();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/learningAnalytics.js",
      "line": 578,
      "context": "console.log('📋 Session ended and archived:', this.sessionData.sessionId);"
    },
    {
      "object": "this",
      "method": "getSessionStatistics",
      "file": "src/learningAnalytics.js",
      "line": 588,
      "context": "sessionStats: this.getSessionStatistics(),"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/learningAnalytics.js",
      "line": 594,
      "context": "sessionDuration: Date.now() - this.sessionData.startTime"
    },
    {
      "object": "performance",
      "method": "now",
      "file": "src/performanceManager.js",
      "line": 25,
      "context": "this.lastFrameTime = performance.now();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/performanceManager.js",
      "line": 28,
      "context": "console.log('🚀 PerformanceManager initialized');"
    },
    {
      "object": "this",
      "method": "startPerformanceMonitoring",
      "file": "src/performanceManager.js",
      "line": 29,
      "context": "this.startPerformanceMonitoring();"
    },
    {
      "object": "objectPools",
      "method": "has",
      "file": "src/performanceManager.js",
      "line": 45,
      "context": "if (this.objectPools.has(poolName)) {"
    },
    {
      "object": "objectPools",
      "method": "get",
      "file": "src/performanceManager.js",
      "line": 46,
      "context": "return this.objectPools.get(poolName);"
    },
    {
      "object": "available",
      "method": "push",
      "file": "src/performanceManager.js",
      "line": 60,
      "context": "pool.available.push(factory());"
    },
    {
      "object": "objectPools",
      "method": "set",
      "file": "src/performanceManager.js",
      "line": 64,
      "context": "this.objectPools.set(poolName, pool);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/performanceManager.js",
      "line": 65,
      "context": "console.log(`📦 Created object pool '${poolName}' with ${initialSize} objects`);"
    },
    {
      "object": "objectPools",
      "method": "get",
      "file": "src/performanceManager.js",
      "line": 75,
      "context": "const pool = this.objectPools.get(poolName);"
    },
    {
      "object": "available",
      "method": "pop",
      "file": "src/performanceManager.js",
      "line": 82,
      "context": "obj = pool.available.pop();"
    },
    {
      "object": "pool",
      "method": "factory",
      "file": "src/performanceManager.js",
      "line": 86,
      "context": "obj = pool.factory();"
    },
    {
      "object": "inUse",
      "method": "add",
      "file": "src/performanceManager.js",
      "line": 92,
      "context": "pool.inUse.add(obj);"
    },
    {
      "object": "objectPools",
      "method": "get",
      "file": "src/performanceManager.js",
      "line": 102,
      "context": "const pool = this.objectPools.get(poolName);"
    },
    {
      "object": "inUse",
      "method": "has",
      "file": "src/performanceManager.js",
      "line": 103,
      "context": "if (!pool || !pool.inUse.has(obj)) {"
    },
    {
      "object": "inUse",
      "method": "delete",
      "file": "src/performanceManager.js",
      "line": 107,
      "context": "pool.inUse.delete(obj);"
    },
    {
      "object": "obj",
      "method": "reset",
      "file": "src/performanceManager.js",
      "line": 111,
      "context": "obj.reset();"
    },
    {
      "object": "available",
      "method": "push",
      "file": "src/performanceManager.js",
      "line": 114,
      "context": "pool.available.push(obj);"
    },
    {
      "object": "objectPools",
      "method": "get",
      "file": "src/performanceManager.js",
      "line": 124,
      "context": "const pool = this.objectPools.get(poolName);"
    },
    {
      "object": "questionCache",
      "method": "has",
      "file": "src/performanceManager.js",
      "line": 151,
      "context": "if (this.questionCache.has(category)) {"
    },
    {
      "object": "questionCache",
      "method": "get",
      "file": "src/performanceManager.js",
      "line": 152,
      "context": "return this.questionCache.get(category);"
    },
    {
      "object": "loadingPromises",
      "method": "has",
      "file": "src/performanceManager.js",
      "line": 156,
      "context": "if (this.loadingPromises.has(category)) {"
    },
    {
      "object": "loadingPromises",
      "method": "get",
      "file": "src/performanceManager.js",
      "line": 157,
      "context": "return this.loadingPromises.get(category);"
    },
    {
      "object": "allQuestions",
      "method": "filter",
      "file": "src/performanceManager.js",
      "line": 164,
      "context": "const filteredQuestions = allQuestions.filter(q =>"
    },
    {
      "object": "questionCache",
      "method": "set",
      "file": "src/performanceManager.js",
      "line": 168,
      "context": "this.questionCache.set(category, filteredQuestions);"
    },
    {
      "object": "loadingPromises",
      "method": "delete",
      "file": "src/performanceManager.js",
      "line": 169,
      "context": "this.loadingPromises.delete(category);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/performanceManager.js",
      "line": 171,
      "context": "console.log(`📚 Lazy loaded ${filteredQuestions.length} questions for category: ${category}`);"
    },
    {
      "object": "loadingPromises",
      "method": "set",
      "file": "src/performanceManager.js",
      "line": 176,
      "context": "this.loadingPromises.set(category, loadPromise);"
    },
    {
      "object": "questionCache",
      "method": "delete",
      "file": "src/performanceManager.js",
      "line": 186,
      "context": "this.questionCache.delete(category);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/performanceManager.js",
      "line": 187,
      "context": "console.log(`🗑️ Cleared question cache for category: ${category}`);"
    },
    {
      "object": "questionCache",
      "method": "clear",
      "file": "src/performanceManager.js",
      "line": 189,
      "context": "this.questionCache.clear();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/performanceManager.js",
      "line": 190,
      "context": "console.log('🗑️ Cleared all question caches');"
    },
    {
      "object": "domBatchQueue",
      "method": "push",
      "file": "src/performanceManager.js",
      "line": 205,
      "context": "this.domBatchQueue.push({"
    },
    {
      "object": "performance",
      "method": "now",
      "file": "src/performanceManager.js",
      "line": 208,
      "context": "timestamp: performance.now()"
    },
    {
      "object": "this",
      "method": "scheduleBatch",
      "file": "src/performanceManager.js",
      "line": 212,
      "context": "this.scheduleBatch();"
    },
    {
      "object": "this",
      "method": "executeBatch",
      "file": "src/performanceManager.js",
      "line": 223,
      "context": "this.executeBatch();"
    },
    {
      "object": "domBatchQueue",
      "method": "sort",
      "file": "src/performanceManager.js",
      "line": 238,
      "context": "this.domBatchQueue.sort((a, b) => a.priority - b.priority);"
    },
    {
      "object": "performance",
      "method": "now",
      "file": "src/performanceManager.js",
      "line": 240,
      "context": "const batchStartTime = performance.now();"
    },
    {
      "object": "domBatchQueue",
      "method": "shift",
      "file": "src/performanceManager.js",
      "line": 245,
      "context": "const { update } = this.domBatchQueue.shift();"
    },
    {
      "object": "console",
      "method": "error",
      "file": "src/performanceManager.js",
      "line": 251,
      "context": "console.error('🚨 Error in batched DOM update:', error);"
    },
    {
      "object": "performance",
      "method": "now",
      "file": "src/performanceManager.js",
      "line": 255,
      "context": "if (performance.now() - batchStartTime > 8) { // 8ms budget"
    },
    {
      "object": "this",
      "method": "scheduleBatch",
      "file": "src/performanceManager.js",
      "line": 265,
      "context": "this.scheduleBatch();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/performanceManager.js",
      "line": 268,
      "context": "console.log(`⚡ Executed ${updatesExecuted} DOM updates in ${Math.round(performance.now() - batchStartTime)}ms`);"
    },
    {
      "object": "Math",
      "method": "round",
      "file": "src/performanceManager.js",
      "line": 268,
      "context": "console.log(`⚡ Executed ${updatesExecuted} DOM updates in ${Math.round(performance.now() - batchStartTime)}ms`);"
    },
    {
      "object": "performance",
      "method": "now",
      "file": "src/performanceManager.js",
      "line": 268,
      "context": "console.log(`⚡ Executed ${updatesExecuted} DOM updates in ${Math.round(performance.now() - batchStartTime)}ms`);"
    },
    {
      "object": "Object",
      "method": "entries",
      "file": "src/performanceManager.js",
      "line": 279,
      "context": "for (const [prop, value] of Object.entries(properties)) {"
    },
    {
      "object": "prop",
      "method": "startsWith",
      "file": "src/performanceManager.js",
      "line": 286,
      "context": "} else if (prop.startsWith('data-')) {"
    },
    {
      "object": "element",
      "method": "setAttribute",
      "file": "src/performanceManager.js",
      "line": 287,
      "context": "element.setAttribute(prop, value);"
    },
    {
      "object": "Object",
      "method": "assign",
      "file": "src/performanceManager.js",
      "line": 289,
      "context": "Object.assign(element.style, value);"
    },
    {
      "object": "this",
      "method": "monitorFrameRate",
      "file": "src/performanceManager.js",
      "line": 309,
      "context": "this.monitorFrameRate();"
    },
    {
      "object": "this",
      "method": "monitorMemoryUsage",
      "file": "src/performanceManager.js",
      "line": 310,
      "context": "this.monitorMemoryUsage();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/performanceManager.js",
      "line": 312,
      "context": "console.log('📊 Performance monitoring started');"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/performanceManager.js",
      "line": 320,
      "context": "console.log('📊 Performance monitoring stopped');"
    },
    {
      "object": "frameRateHistory",
      "method": "push",
      "file": "src/performanceManager.js",
      "line": 334,
      "context": "this.frameRateHistory.push(fps);"
    },
    {
      "object": "frameRateHistory",
      "method": "shift",
      "file": "src/performanceManager.js",
      "line": 338,
      "context": "this.frameRateHistory.shift();"
    },
    {
      "object": "frameRateHistory",
      "method": "reduce",
      "file": "src/performanceManager.js",
      "line": 342,
      "context": "this.metrics.frameRate = this.frameRateHistory.reduce((a, b) => a + b, 0) / this.frameRateHistory.length;"
    },
    {
      "object": "Math",
      "method": "round",
      "file": "src/performanceManager.js",
      "line": 381,
      "context": "frameRate: Math.round(this.metrics.frameRate * 100) / 100,"
    },
    {
      "object": "Math",
      "method": "round",
      "file": "src/performanceManager.js",
      "line": 382,
      "context": "memoryUsage: Math.round(this.metrics.memoryUsage * 100) / 100,"
    },
    {
      "object": "Array",
      "method": "from",
      "file": "src/performanceManager.js",
      "line": 383,
      "context": "poolStats: Array.from(this.objectPools.keys()).map(name => this.getPoolStats(name)),"
    },
    {
      "object": "objectPools",
      "method": "keys",
      "file": "src/performanceManager.js",
      "line": 383,
      "context": "poolStats: Array.from(this.objectPools.keys()).map(name => this.getPoolStats(name)),"
    },
    {
      "object": "this",
      "method": "getPoolStats",
      "file": "src/performanceManager.js",
      "line": 383,
      "context": "poolStats: Array.from(this.objectPools.keys()).map(name => this.getPoolStats(name)),"
    },
    {
      "object": "func",
      "method": "apply",
      "file": "src/performanceManager.js",
      "line": 421,
      "context": "func.apply(this, args);"
    },
    {
      "object": "window",
      "method": "matchMedia",
      "file": "src/performanceManager.js",
      "line": 433,
      "context": "return window.matchMedia('(prefers-reduced-motion: reduce)').matches;"
    },
    {
      "object": "this",
      "method": "stopPerformanceMonitoring",
      "file": "src/performanceManager.js",
      "line": 444,
      "context": "this.stopPerformanceMonitoring();"
    },
    {
      "object": "this",
      "method": "clearQuestionCache",
      "file": "src/performanceManager.js",
      "line": 445,
      "context": "this.clearQuestionCache();"
    },
    {
      "object": "objectPools",
      "method": "clear",
      "file": "src/performanceManager.js",
      "line": 448,
      "context": "this.objectPools.clear();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/performanceManager.js",
      "line": 454,
      "context": "console.log('🧹 PerformanceManager cleanup completed');"
    },
    {
      "object": "this",
      "method": "getMetrics",
      "file": "src/performanceManager.js",
      "line": 463,
      "context": "const metrics = this.getMetrics();"
    },
    {
      "object": "recommendations",
      "method": "push",
      "file": "src/performanceManager.js",
      "line": 466,
      "context": "recommendations.push('Frame rate is low. Consider reducing visual effects or DOM updates.');"
    },
    {
      "object": "recommendations",
      "method": "push",
      "file": "src/performanceManager.js",
      "line": 470,
      "context": "recommendations.push('Memory usage is high. Consider clearing caches or reducing object creation.');"
    },
    {
      "object": "recommendations",
      "method": "push",
      "file": "src/performanceManager.js",
      "line": 474,
      "context": "recommendations.push('Object pool miss rate is high. Consider increasing pool sizes.');"
    },
    {
      "object": "recommendations",
      "method": "push",
      "file": "src/performanceManager.js",
      "line": 478,
      "context": "recommendations.push('DOM update queue is large. Consider batching updates more aggressively.');"
    },
    {
      "object": "recommendations",
      "method": "push",
      "file": "src/performanceManager.js",
      "line": 482,
      "context": "recommendations.push('Performance metrics look good! 🎉');"
    },
    {
      "object": "this",
      "method": "createDashboard",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 21,
      "context": "this.createDashboard();"
    },
    {
      "object": "this",
      "method": "setupKeyboardShortcuts",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 22,
      "context": "this.setupKeyboardShortcuts();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 24,
      "context": "console.log('📊 Performance Monitoring Dashboard initialized');"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 31,
      "context": "this.dashboardElement = document.createElement('div');"
    },
    {
      "object": "this",
      "method": "addDashboardStyles",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 92,
      "context": "this.addDashboardStyles();"
    },
    {
      "object": "this",
      "method": "setupDashboardEvents",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 95,
      "context": "this.setupDashboardEvents();"
    },
    {
      "object": "body",
      "method": "appendChild",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 97,
      "context": "document.body.appendChild(this.dashboardElement);"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 104,
      "context": "if (document.getElementById('performance-dashboard-styles')) return;"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 106,
      "context": "const styles = document.createElement('style');"
    },
    {
      "object": "head",
      "method": "appendChild",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 275,
      "context": "document.head.appendChild(styles);"
    },
    {
      "object": "dashboardElement",
      "method": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 282,
      "context": "const closeBtn = this.dashboardElement.querySelector('.dashboard-close');"
    },
    {
      "object": "closeBtn",
      "method": "addEventListener",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 283,
      "context": "closeBtn.addEventListener('click', () => this.hide());"
    },
    {
      "object": "this",
      "method": "hide",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 283,
      "context": "closeBtn.addEventListener('click', () => this.hide());"
    },
    {
      "object": "dashboardElement",
      "method": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 285,
      "context": "const clearBtn = this.dashboardElement.querySelector('#clear-metrics');"
    },
    {
      "object": "clearBtn",
      "method": "addEventListener",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 286,
      "context": "clearBtn.addEventListener('click', () => this.clearMetrics());"
    },
    {
      "object": "this",
      "method": "clearMetrics",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 286,
      "context": "clearBtn.addEventListener('click', () => this.clearMetrics());"
    },
    {
      "object": "dashboardElement",
      "method": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 288,
      "context": "const exportBtn = this.dashboardElement.querySelector('#export-metrics');"
    },
    {
      "object": "exportBtn",
      "method": "addEventListener",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 289,
      "context": "exportBtn.addEventListener('click', () => this.exportMetrics());"
    },
    {
      "object": "this",
      "method": "exportMetrics",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 289,
      "context": "exportBtn.addEventListener('click', () => this.exportMetrics());"
    },
    {
      "object": "dashboardElement",
      "method": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 291,
      "context": "const autoOptimizeCheckbox = this.dashboardElement.querySelector('#auto-optimize');"
    },
    {
      "object": "autoOptimizeCheckbox",
      "method": "addEventListener",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 292,
      "context": "autoOptimizeCheckbox.addEventListener('change', (e) => {"
    },
    {
      "object": "document",
      "method": "addEventListener",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 301,
      "context": "document.addEventListener('keydown', (e) => {"
    },
    {
      "object": "e",
      "method": "preventDefault",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 304,
      "context": "e.preventDefault();"
    },
    {
      "object": "this",
      "method": "toggle",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 305,
      "context": "this.toggle();"
    },
    {
      "object": "classList",
      "method": "remove",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 315,
      "context": "this.dashboardElement.classList.remove('hidden');"
    },
    {
      "object": "this",
      "method": "startUpdating",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 316,
      "context": "this.startUpdating();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 317,
      "context": "console.log('📊 Performance dashboard shown');"
    },
    {
      "object": "classList",
      "method": "add",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 325,
      "context": "this.dashboardElement.classList.add('hidden');"
    },
    {
      "object": "this",
      "method": "stopUpdating",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 326,
      "context": "this.stopUpdating();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 327,
      "context": "console.log('📊 Performance dashboard hidden');"
    },
    {
      "object": "this",
      "method": "hide",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 335,
      "context": "this.hide();"
    },
    {
      "object": "this",
      "method": "show",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 337,
      "context": "this.show();"
    },
    {
      "object": "this",
      "method": "updateMetrics",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 348,
      "context": "this.updateMetrics();"
    },
    {
      "object": "performanceManager",
      "method": "getMetrics",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 366,
      "context": "const metrics = this.performanceManager.getMetrics();"
    },
    {
      "object": "this",
      "method": "addToHistory",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 369,
      "context": "this.addToHistory('frameRate', metrics.frameRate);"
    },
    {
      "object": "this",
      "method": "addToHistory",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 370,
      "context": "this.addToHistory('memoryUsage', metrics.memoryUsage);"
    },
    {
      "object": "this",
      "method": "addToHistory",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 371,
      "context": "this.addToHistory('domUpdates', metrics.domUpdates);"
    },
    {
      "object": "this",
      "method": "addToHistory",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 372,
      "context": "this.addToHistory('poolHits', metrics.poolHits);"
    },
    {
      "object": "this",
      "method": "addToHistory",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 373,
      "context": "this.addToHistory('poolMisses', metrics.poolMisses);"
    },
    {
      "object": "this",
      "method": "updateFrameRateDisplay",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 376,
      "context": "this.updateFrameRateDisplay(metrics.frameRate);"
    },
    {
      "object": "this",
      "method": "updateMemoryDisplay",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 377,
      "context": "this.updateMemoryDisplay(metrics.memoryUsage);"
    },
    {
      "object": "this",
      "method": "updateDOMDisplay",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 378,
      "context": "this.updateDOMDisplay(metrics.domUpdates);"
    },
    {
      "object": "this",
      "method": "updatePoolDisplay",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 379,
      "context": "this.updatePoolDisplay(metrics);"
    },
    {
      "object": "this",
      "method": "updatePoolStats",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 380,
      "context": "this.updatePoolStats(metrics.poolStats);"
    },
    {
      "object": "this",
      "method": "updateRecommendations",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 381,
      "context": "this.updateRecommendations();"
    },
    {
      "object": "this",
      "method": "performAutoOptimizations",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 385,
      "context": "this.performAutoOptimizations(metrics);"
    },
    {
      "object": "dashboardElement",
      "method": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 404,
      "context": "const valueElement = this.dashboardElement.querySelector('#fps-value');"
    },
    {
      "object": "dashboardElement",
      "method": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 405,
      "context": "const chartElement = this.dashboardElement.querySelector('#fps-chart');"
    },
    {
      "object": "fps",
      "method": "toFixed",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 407,
      "context": "valueElement.textContent = fps.toFixed(1);"
    },
    {
      "object": "this",
      "method": "updateChart",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 418,
      "context": "this.updateChart(chartElement, this.metricsHistory.frameRate, 60);"
    },
    {
      "object": "dashboardElement",
      "method": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 425,
      "context": "const valueElement = this.dashboardElement.querySelector('#memory-value');"
    },
    {
      "object": "memory",
      "method": "toFixed",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 427,
      "context": "valueElement.textContent = memory.toFixed(1);"
    },
    {
      "object": "dashboardElement",
      "method": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 443,
      "context": "const valueElement = this.dashboardElement.querySelector('#dom-value');"
    },
    {
      "object": "dashboardElement",
      "method": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 451,
      "context": "const valueElement = this.dashboardElement.querySelector('#pool-value');"
    },
    {
      "object": "hitRate",
      "method": "toFixed",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 455,
      "context": "valueElement.textContent = hitRate.toFixed(1);"
    },
    {
      "object": "dashboardElement",
      "method": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 470,
      "context": "const container = this.dashboardElement.querySelector('#pool-stats-content');"
    },
    {
      "object": "poolStats",
      "method": "map",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 477,
      "context": "container.innerHTML = poolStats.map(pool => `"
    },
    {
      "object": "hitRate",
      "method": "toFixed",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 480,
      "context": "<span>${pool.hitRate.toFixed(1)}% (${pool.hits}/${pool.hits + pool.misses})</span>"
    },
    {
      "object": "dashboardElement",
      "method": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 489,
      "context": "const container = this.dashboardElement.querySelector('#recommendations-content');"
    },
    {
      "object": "performanceManager",
      "method": "getRecommendations",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 490,
      "context": "const recommendations = this.performanceManager.getRecommendations();"
    },
    {
      "object": "recommendations",
      "method": "map",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 492,
      "context": "container.innerHTML = recommendations.map(rec => `"
    },
    {
      "object": "Math",
      "method": "max",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 506,
      "context": "const barWidth = Math.max(1, width / this.maxHistoryLength);"
    },
    {
      "object": "data",
      "method": "forEach",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 508,
      "context": "data.forEach((value, index) => {"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 509,
      "context": "const bar = document.createElement('div');"
    },
    {
      "object": "chartElement",
      "method": "appendChild",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 515,
      "context": "chartElement.appendChild(bar);"
    },
    {
      "object": "performanceManager",
      "method": "clearQuestionCache",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 525,
      "context": "this.performanceManager.clearQuestionCache();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 526,
      "context": "console.log('🧹 Auto-optimization: Cleared question cache due to high memory usage');"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 535,
      "context": "console.log('⚡ Auto-optimization: Low pool hit rate detected');"
    },
    {
      "object": "Object",
      "method": "keys",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 543,
      "context": "for (const key of Object.keys(this.metricsHistory)) {"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 556,
      "context": "console.log('🧹 Metrics cleared');"
    },
    {
      "object": "performanceManager",
      "method": "getMetrics",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 566,
      "context": "currentMetrics: this.performanceManager.getMetrics(),"
    },
    {
      "object": "performanceManager",
      "method": "getRecommendations",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 567,
      "context": "recommendations: this.performanceManager.getRecommendations()"
    },
    {
      "object": "JSON",
      "method": "stringify",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 570,
      "context": "const dataStr = JSON.stringify(exportData, null, 2);"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 573,
      "context": "const link = document.createElement('a');"
    },
    {
      "object": "URL",
      "method": "createObjectURL",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 574,
      "context": "link.href = URL.createObjectURL(dataBlob);"
    },
    {
      "object": "Date",
      "method": "now",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 575,
      "context": "link.download = `performance-metrics-${Date.now()}.json`;"
    },
    {
      "object": "link",
      "method": "click",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 576,
      "context": "link.click();"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 578,
      "context": "console.log('📊 Metrics exported');"
    },
    {
      "object": "this",
      "method": "stopUpdating",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 585,
      "context": "this.stopUpdating();"
    },
    {
      "object": "parentNode",
      "method": "removeChild",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 588,
      "context": "this.dashboardElement.parentNode.removeChild(this.dashboardElement);"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 591,
      "context": "const styles = document.getElementById('performance-dashboard-styles');"
    },
    {
      "object": "parentNode",
      "method": "removeChild",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 593,
      "context": "styles.parentNode.removeChild(styles);"
    },
    {
      "object": "console",
      "method": "log",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 596,
      "context": "console.log('🧹 Performance dashboard cleanup completed');"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 14,
      "context": "const button = document.createElement('button');"
    },
    {
      "object": "button",
      "method": "setAttribute",
      "file": "src/uiOptimizations.js",
      "line": 17,
      "context": "button.setAttribute('tabindex', '0');"
    },
    {
      "object": "button",
      "method": "setAttribute",
      "file": "src/uiOptimizations.js",
      "line": 18,
      "context": "button.setAttribute('role', 'button');"
    },
    {
      "object": "this",
      "method": "removeAttribute",
      "file": "src/uiOptimizations.js",
      "line": 26,
      "context": "this.removeAttribute('data-answer-index');"
    },
    {
      "object": "this",
      "method": "removeAttribute",
      "file": "src/uiOptimizations.js",
      "line": 27,
      "context": "this.removeAttribute('aria-label');"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 37,
      "context": "const toast = document.createElement('div');"
    },
    {
      "object": "toast",
      "method": "setAttribute",
      "file": "src/uiOptimizations.js",
      "line": 39,
      "context": "toast.setAttribute('role', 'alert');"
    },
    {
      "object": "toast",
      "method": "setAttribute",
      "file": "src/uiOptimizations.js",
      "line": 40,
      "context": "toast.setAttribute('aria-live', 'polite');"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 43,
      "context": "const icon = document.createElement('span');"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 46,
      "context": "const content = document.createElement('div');"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 49,
      "context": "const title = document.createElement('div');"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 52,
      "context": "const message = document.createElement('div');"
    },
    {
      "object": "content",
      "method": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 55,
      "context": "content.appendChild(title);"
    },
    {
      "object": "content",
      "method": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 56,
      "context": "content.appendChild(message);"
    },
    {
      "object": "toast",
      "method": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 57,
      "context": "toast.appendChild(icon);"
    },
    {
      "object": "toast",
      "method": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 58,
      "context": "toast.appendChild(content);"
    },
    {
      "object": "this",
      "method": "removeAttribute",
      "file": "src/uiOptimizations.js",
      "line": 67,
      "context": "this.removeAttribute('data-type');"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 77,
      "context": "const connection = document.createElement('div');"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 80,
      "context": "const link = document.createElement('button');"
    },
    {
      "object": "link",
      "method": "setAttribute",
      "file": "src/uiOptimizations.js",
      "line": 83,
      "context": "link.setAttribute('tabindex', '0');"
    },
    {
      "object": "connection",
      "method": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 85,
      "context": "connection.appendChild(link);"
    },
    {
      "object": "link",
      "method": "removeAttribute",
      "file": "src/uiOptimizations.js",
      "line": 93,
      "context": "link.removeAttribute('data-room-id');"
    },
    {
      "object": "link",
      "method": "removeAttribute",
      "file": "src/uiOptimizations.js",
      "line": 94,
      "context": "link.removeAttribute('aria-label');"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 104,
      "context": "const container = document.createElement('div');"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 107,
      "context": "const bar = document.createElement('div');"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 110,
      "context": "const fill = document.createElement('div');"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 113,
      "context": "const label = document.createElement('span');"
    },
    {
      "object": "bar",
      "method": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 116,
      "context": "bar.appendChild(fill);"
    },
    {
      "object": "container",
      "method": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 117,
      "context": "container.appendChild(bar);"
    },
    {
      "object": "container",
      "method": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 118,
      "context": "container.appendChild(label);"
    },
    {
      "object": "this",
      "method": "removeAttribute",
      "file": "src/uiOptimizations.js",
      "line": 125,
      "context": "this.removeAttribute('data-progress');"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 135,
      "context": "const timer = document.createElement('div');"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 138,
      "context": "const bar = document.createElement('div');"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 141,
      "context": "const fill = document.createElement('div');"
    },
    {
      "object": "document",
      "method": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 144,
      "context": "const text = document.createElement('span');"
    },
    {
      "object": "bar",
      "method": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 147,
      "context": "bar.appendChild(fill);"
    },
    {
      "object": "timer",
      "method": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 148,
      "context": "timer.appendChild(bar);"
    },
    {
      "object": "timer",
      "method": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 149,
      "context": "timer.appendChild(text);"
    },
    {
      "object": "Object",
      "method": "entries",
      "file": "src/uiOptimizations.js",
      "line": 195,
      "context": "for (const [property, value] of Object.entries(styles)) {"
    },
    {
      "object": "Object",
      "method": "entries",
      "file": "src/uiOptimizations.js",
      "line": 208,
      "context": "for (const [attr, value] of Object.entries(attributes)) {"
    },
    {
      "object": "element",
      "method": "getAttribute",
      "file": "src/uiOptimizations.js",
      "line": 209,
      "context": "if (element.getAttribute(attr) !== value) {"
    },
    {
      "object": "element",
      "method": "setAttribute",
      "file": "src/uiOptimizations.js",
      "line": 210,
      "context": "element.setAttribute(attr, value);"
    },
    {
      "object": "progressElement",
      "method": "querySelector",
      "file": "src/uiOptimizations.js",
      "line": 222,
      "context": "const fill = progressElement.querySelector('.progress-fill') ||"
    },
    {
      "object": "classList",
      "method": "contains",
      "file": "src/uiOptimizations.js",
      "line": 223,
      "context": "progressElement.classList.contains('progress-fill') ? progressElement : null;"
    },
    {
      "object": "progressElement",
      "method": "querySelector",
      "file": "src/uiOptimizations.js",
      "line": 224,
      "context": "const labelElement = progressElement.querySelector('.progress-percent') ||"
    },
    {
      "object": "progressElement",
      "method": "querySelector",
      "file": "src/uiOptimizations.js",
      "line": 225,
      "context": "progressElement.querySelector('.progress-label') ||"
    },
    {
      "object": "Math",
      "method": "max",
      "file": "src/uiOptimizations.js",
      "line": 229,
      "context": "fill.style.width = `${Math.max(0, Math.min(100, percentage))}%`;"
    },
    {
      "object": "Math",
      "method": "min",
      "file": "src/uiOptimizations.js",
      "line": 229,
      "context": "fill.style.width = `${Math.max(0, Math.min(100, percentage))}%`;"
    },
    {
      "object": "progressElement",
      "method": "setAttribute",
      "file": "src/uiOptimizations.js",
      "line": 234,
      "context": "progressElement.setAttribute('data-progress', percentage);"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/uiOptimizations.js",
      "line": 243,
      "context": "const fill = document.getElementById('timer-bar');"
    },
    {
      "object": "document",
      "method": "getElementById",
      "file": "src/uiOptimizations.js",
      "line": 244,
      "context": "const text = document.getElementById('timer-text') || timerElement;"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/uiOptimizations.js",
      "line": 247,
      "context": "console.warn('UI Optimizations: Timer bar element not found');"
    },
    {
      "object": "console",
      "method": "warn",
      "file": "src/uiOptimizations.js",
      "line": 250,
      "context": "console.warn('UI Optimizations: Timer text element not found');"
    },
    {
      "object": "Math",
      "method": "max",
      "file": "src/uiOptimizations.js",
      "line": 256,
      "context": "fill.style.width = `${Math.max(0, percentage)}%`;"
    },
    {
      "object": "Math",
      "method": "ceil",
      "file": "src/uiOptimizations.js",
      "line": 269,
      "context": "text.textContent = `${Math.ceil(timeRemaining)}s`;"
    },
    {
      "object": "container",
      "method": "addEventListener",
      "file": "src/uiOptimizations.js",
      "line": 296,
      "context": "container.addEventListener(eventType, (event) => {"
    },
    {
      "object": "target",
      "method": "closest",
      "file": "src/uiOptimizations.js",
      "line": 297,
      "context": "const target = event.target.closest(selector);"
    },
    {
      "object": "window",
      "method": "addEventListener",
      "file": "src/uiOptimizations.js",
      "line": 319,
      "context": "window.addEventListener('resize', fallbackHandler);"
    },
    {
      "object": "window",
      "method": "removeEventListener",
      "file": "src/uiOptimizations.js",
      "line": 323,
      "context": "disconnect: () => window.removeEventListener('resize', fallbackHandler)"
    },
    {
      "object": "listeners",
      "method": "has",
      "file": "src/uiOptimizations.js",
      "line": 367,
      "context": "if (!listeners.has(key)) {"
    },
    {
      "object": "listeners",
      "method": "set",
      "file": "src/uiOptimizations.js",
      "line": 368,
      "context": "listeners.set(key, []);"
    },
    {
      "object": "listeners",
      "method": "get",
      "file": "src/uiOptimizations.js",
      "line": 370,
      "context": "listeners.get(key).push({ handler, options });"
    },
    {
      "object": "element",
      "method": "addEventListener",
      "file": "src/uiOptimizations.js",
      "line": 371,
      "context": "element.addEventListener(eventType, handler, options);"
    },
    {
      "object": "listeners",
      "method": "get",
      "file": "src/uiOptimizations.js",
      "line": 376,
      "context": "const elementListeners = listeners.get(key);"
    },
    {
      "object": "elementListeners",
      "method": "findIndex",
      "file": "src/uiOptimizations.js",
      "line": 378,
      "context": "const index = elementListeners.findIndex(l => l.handler === handler);"
    },
    {
      "object": "elementListeners",
      "method": "splice",
      "file": "src/uiOptimizations.js",
      "line": 380,
      "context": "elementListeners.splice(index, 1);"
    },
    {
      "object": "element",
      "method": "removeEventListener",
      "file": "src/uiOptimizations.js",
      "line": 381,
      "context": "element.removeEventListener(eventType, handler);"
    },
    {
      "object": "listeners",
      "method": "entries",
      "file": "src/uiOptimizations.js",
      "line": 387,
      "context": "for (const [key, elementListeners] of listeners.entries()) {"
    },
    {
      "object": "key",
      "method": "startsWith",
      "file": "src/uiOptimizations.js",
      "line": 388,
      "context": "if (key.startsWith(element.toString())) {"
    },
    {
      "object": "element",
      "method": "toString",
      "file": "src/uiOptimizations.js",
      "line": 388,
      "context": "if (key.startsWith(element.toString())) {"
    },
    {
      "object": "elementListeners",
      "method": "forEach",
      "file": "src/uiOptimizations.js",
      "line": 389,
      "context": "elementListeners.forEach(({ handler }) => {"
    },
    {
      "object": "key",
      "method": "split",
      "file": "src/uiOptimizations.js",
      "line": 390,
      "context": "const eventType = key.split(':')[1];"
    },
    {
      "object": "element",
      "method": "removeEventListener",
      "file": "src/uiOptimizations.js",
      "line": 391,
      "context": "element.removeEventListener(eventType, handler);"
    },
    {
      "object": "listeners",
      "method": "delete",
      "file": "src/uiOptimizations.js",
      "line": 393,
      "context": "listeners.delete(key);"
    },
    {
      "object": "listeners",
      "method": "clear",
      "file": "src/uiOptimizations.js",
      "line": 399,
      "context": "listeners.clear();"
    }
  ],
  "undefinedRefs": [
    {
      "type": "function",
      "name": "LobeLabyrinth",
      "file": "src/dataLoader.js",
      "line": 3,
      "context": "* Part of LobeLabyrinth (Encarta MindMaze Clone)",
      "error": "Function 'LobeLabyrinth' is not defined"
    },
    {
      "type": "function",
      "name": "loadGameData",
      "file": "src/dataLoader.js",
      "line": 19,
      "context": "async loadGameData() {",
      "error": "Function 'loadGameData' is not defined"
    },
    {
      "type": "function",
      "name": "_performLoad",
      "file": "src/dataLoader.js",
      "line": 24,
      "context": "this.loadPromise = this._performLoad();",
      "error": "Function '_performLoad' is not defined"
    },
    {
      "type": "function",
      "name": "_performLoad",
      "file": "src/dataLoader.js",
      "line": 32,
      "context": "async _performLoad() {",
      "error": "Function '_performLoad' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/dataLoader.js",
      "line": 34,
      "context": "console.log('🔄 Loading game data...');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "all",
      "file": "src/dataLoader.js",
      "line": 37,
      "context": "const [roomsResponse, questionsResponse, achievementsResponse] = await Promise.all([",
      "error": "Function 'all' is not defined"
    },
    {
      "type": "function",
      "name": "fetch",
      "file": "src/dataLoader.js",
      "line": 38,
      "context": "fetch('./data/rooms.json'),",
      "error": "Function 'fetch' is not defined"
    },
    {
      "type": "function",
      "name": "fetch",
      "file": "src/dataLoader.js",
      "line": 39,
      "context": "fetch('./data/questions.json'),",
      "error": "Function 'fetch' is not defined"
    },
    {
      "type": "function",
      "name": "fetch",
      "file": "src/dataLoader.js",
      "line": 40,
      "context": "fetch('./data/achievements.json')",
      "error": "Function 'fetch' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 45,
      "context": "throw new Error(`Failed to load rooms.json: ${roomsResponse.status}`);",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 48,
      "context": "throw new Error(`Failed to load questions.json: ${questionsResponse.status}`);",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 51,
      "context": "throw new Error(`Failed to load achievements.json: ${achievementsResponse.status}`);",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "json",
      "file": "src/dataLoader.js",
      "line": 55,
      "context": "const roomsData = await roomsResponse.json();",
      "error": "Function 'json' is not defined"
    },
    {
      "type": "function",
      "name": "json",
      "file": "src/dataLoader.js",
      "line": 56,
      "context": "const questionsData = await questionsResponse.json();",
      "error": "Function 'json' is not defined"
    },
    {
      "type": "function",
      "name": "json",
      "file": "src/dataLoader.js",
      "line": 57,
      "context": "const achievementsData = await achievementsResponse.json();",
      "error": "Function 'json' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/dataLoader.js",
      "line": 67,
      "context": "console.log('✅ Game data loaded successfully!');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/dataLoader.js",
      "line": 68,
      "context": "console.log(`📍 Loaded ${this.gameData.rooms.length} rooms`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/dataLoader.js",
      "line": 69,
      "context": "console.log(`❓ Loaded ${this.gameData.questions.length} questions`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/dataLoader.js",
      "line": 70,
      "context": "console.log(`🏆 Loaded ${this.gameData.achievements.length} achievements`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/dataLoader.js",
      "line": 75,
      "context": "console.error('❌ Error loading game data:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 76,
      "context": "throw new Error(`Failed to load game data: ${error.message}`);",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/dataLoader.js",
      "line": 85,
      "context": "console.log('🔍 Validating data integrity...');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/dataLoader.js",
      "line": 99,
      "context": "console.log('✅ Data validation passed!');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "isArray",
      "file": "src/dataLoader.js",
      "line": 107,
      "context": "if (!Array.isArray(this.gameData.rooms)) {",
      "error": "Function 'isArray' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 108,
      "context": "throw new Error('Rooms data must be an array');",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 112,
      "context": "throw new Error('At least one room must be defined');",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "Set",
      "file": "src/dataLoader.js",
      "line": 116,
      "context": "const roomIds = new Set();",
      "error": "Function 'Set' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 123,
      "context": "throw new Error(`Room missing required field: ${field}`);",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/dataLoader.js",
      "line": 128,
      "context": "if (roomIds.has(room.id)) {",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 129,
      "context": "throw new Error(`Duplicate room ID: ${room.id}`);",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/dataLoader.js",
      "line": 131,
      "context": "roomIds.add(room.id);",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "isArray",
      "file": "src/dataLoader.js",
      "line": 139,
      "context": "if (!Array.isArray(room.connections)) {",
      "error": "Function 'isArray' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 140,
      "context": "throw new Error(`Room ${room.id} connections must be an array`);",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 145,
      "context": "throw new Error('At least one room must be marked as starting room');",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "isArray",
      "file": "src/dataLoader.js",
      "line": 154,
      "context": "if (!Array.isArray(this.gameData.questions)) {",
      "error": "Function 'isArray' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 155,
      "context": "throw new Error('Questions data must be an array');",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 159,
      "context": "throw new Error('At least one question must be defined');",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "Set",
      "file": "src/dataLoader.js",
      "line": 163,
      "context": "const questionIds = new Set();",
      "error": "Function 'Set' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 169,
      "context": "throw new Error(`Question missing required field: ${field}`);",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/dataLoader.js",
      "line": 174,
      "context": "if (questionIds.has(question.id)) {",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 175,
      "context": "throw new Error(`Duplicate question ID: ${question.id}`);",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/dataLoader.js",
      "line": 177,
      "context": "questionIds.add(question.id);",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "isArray",
      "file": "src/dataLoader.js",
      "line": 180,
      "context": "if (!Array.isArray(question.answers) || question.answers.length < 2) {",
      "error": "Function 'isArray' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 181,
      "context": "throw new Error(`Question ${question.id} must have at least 2 answers`);",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 186,
      "context": "throw new Error(`Question ${question.id} has invalid correctAnswer index`);",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 191,
      "context": "throw new Error(`Question ${question.id} must have positive points value`);",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "isArray",
      "file": "src/dataLoader.js",
      "line": 201,
      "context": "if (!Array.isArray(this.gameData.achievements)) {",
      "error": "Function 'isArray' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 202,
      "context": "throw new Error('Achievements data must be an array');",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "Set",
      "file": "src/dataLoader.js",
      "line": 206,
      "context": "const achievementIds = new Set();",
      "error": "Function 'Set' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 212,
      "context": "throw new Error(`Achievement missing required field: ${field}`);",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/dataLoader.js",
      "line": 217,
      "context": "if (achievementIds.has(achievement.id)) {",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 218,
      "context": "throw new Error(`Duplicate achievement ID: ${achievement.id}`);",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/dataLoader.js",
      "line": 220,
      "context": "achievementIds.add(achievement.id);",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 224,
      "context": "throw new Error(`Achievement ${achievement.id} condition missing type`);",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "Set",
      "file": "src/dataLoader.js",
      "line": 234,
      "context": "const roomIds = new Set(this.gameData.rooms.map(room => room.id));",
      "error": "Function 'Set' is not defined"
    },
    {
      "type": "function",
      "name": "map",
      "file": "src/dataLoader.js",
      "line": 234,
      "context": "const roomIds = new Set(this.gameData.rooms.map(room => room.id));",
      "error": "Function 'map' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/dataLoader.js",
      "line": 239,
      "context": "if (!roomIds.has(connectionId)) {",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 240,
      "context": "throw new Error(`Room ${room.id} references non-existent room: ${connectionId}`);",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "Set",
      "file": "src/dataLoader.js",
      "line": 246,
      "context": "const usedCategories = new Set();",
      "error": "Function 'Set' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/dataLoader.js",
      "line": 249,
      "context": "room.questionCategories.forEach(cat => usedCategories.add(cat));",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/dataLoader.js",
      "line": 249,
      "context": "room.questionCategories.forEach(cat => usedCategories.add(cat));",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "Set",
      "file": "src/dataLoader.js",
      "line": 253,
      "context": "const questionCategories = new Set(this.gameData.questions.map(q => q.category));",
      "error": "Function 'Set' is not defined"
    },
    {
      "type": "function",
      "name": "map",
      "file": "src/dataLoader.js",
      "line": 253,
      "context": "const questionCategories = new Set(this.gameData.questions.map(q => q.category));",
      "error": "Function 'map' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/dataLoader.js",
      "line": 255,
      "context": "if (!questionCategories.has(category)) {",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/dataLoader.js",
      "line": 256,
      "context": "console.warn(`⚠️ Room references unused question category: ${category}`);",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 268,
      "context": "throw new Error('Game data not loaded. Call loadGameData() first.');",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "loadGameData",
      "file": "src/dataLoader.js",
      "line": 268,
      "context": "throw new Error('Game data not loaded. Call loadGameData() first.');",
      "error": "Function 'loadGameData' is not defined"
    },
    {
      "type": "function",
      "name": "find",
      "file": "src/dataLoader.js",
      "line": 271,
      "context": "return this.gameData.rooms.find(room => room.id === roomId) || null;",
      "error": "Function 'find' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 281,
      "context": "throw new Error('Game data not loaded. Call loadGameData() first.');",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "loadGameData",
      "file": "src/dataLoader.js",
      "line": 281,
      "context": "throw new Error('Game data not loaded. Call loadGameData() first.');",
      "error": "Function 'loadGameData' is not defined"
    },
    {
      "type": "function",
      "name": "find",
      "file": "src/dataLoader.js",
      "line": 284,
      "context": "return this.gameData.questions.find(question => question.id === questionId) || null;",
      "error": "Function 'find' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 294,
      "context": "throw new Error('Game data not loaded. Call loadGameData() first.');",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "loadGameData",
      "file": "src/dataLoader.js",
      "line": 294,
      "context": "throw new Error('Game data not loaded. Call loadGameData() first.');",
      "error": "Function 'loadGameData' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/dataLoader.js",
      "line": 297,
      "context": "return this.gameData.questions.filter(question => question.category === category);",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 307,
      "context": "throw new Error('Game data not loaded. Call loadGameData() first.');",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "loadGameData",
      "file": "src/dataLoader.js",
      "line": 307,
      "context": "throw new Error('Game data not loaded. Call loadGameData() first.');",
      "error": "Function 'loadGameData' is not defined"
    },
    {
      "type": "function",
      "name": "find",
      "file": "src/dataLoader.js",
      "line": 310,
      "context": "return this.gameData.achievements.find(achievement => achievement.id === achievementId) || null;",
      "error": "Function 'find' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/dataLoader.js",
      "line": 319,
      "context": "throw new Error('Game data not loaded. Call loadGameData() first.');",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "loadGameData",
      "file": "src/dataLoader.js",
      "line": 319,
      "context": "throw new Error('Game data not loaded. Call loadGameData() first.');",
      "error": "Function 'loadGameData' is not defined"
    },
    {
      "type": "function",
      "name": "find",
      "file": "src/dataLoader.js",
      "line": 322,
      "context": "return this.gameData.rooms.find(room => room.isStartingRoom) || null;",
      "error": "Function 'find' is not defined"
    },
    {
      "type": "function",
      "name": "data",
      "file": "src/dataLoader.js",
      "line": 326,
      "context": "* Get all available data (for debugging)",
      "error": "Function 'data' is not defined"
    },
    {
      "type": "function",
      "name": "Set",
      "file": "src/gameState.js",
      "line": 10,
      "context": "this.visitedRooms = new Set();",
      "error": "Function 'Set' is not defined"
    },
    {
      "type": "function",
      "name": "Set",
      "file": "src/gameState.js",
      "line": 11,
      "context": "this.unlockedRooms = new Set();",
      "error": "Function 'Set' is not defined"
    },
    {
      "type": "function",
      "name": "Set",
      "file": "src/gameState.js",
      "line": 12,
      "context": "this.answeredQuestions = new Set();",
      "error": "Function 'Set' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/gameState.js",
      "line": 13,
      "context": "this.startTime = Date.now();",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/gameState.js",
      "line": 14,
      "context": "this.currentRoomStartTime = Date.now(); // Track time in current room",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/gameState.js",
      "line": 26,
      "context": "console.log('GameState initialized:', this.getStateSnapshot());",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/gameState.js",
      "line": 37,
      "context": "this.visitedRooms.add(startingRoom.id);",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/gameState.js",
      "line": 38,
      "context": "this.unlockedRooms.add(startingRoom.id);",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/gameState.js",
      "line": 39,
      "context": "console.log(`Starting room initialized: ${startingRoom.id} (${startingRoom.name})`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/gameState.js",
      "line": 41,
      "context": "console.error('No starting room found in data!');",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/gameState.js",
      "line": 47,
      "context": "this.visitedRooms.add(firstRoom.id);",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/gameState.js",
      "line": 48,
      "context": "this.unlockedRooms.add(firstRoom.id);",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/gameState.js",
      "line": 49,
      "context": "console.warn(`Using first room as fallback: ${firstRoom.id}`);",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/gameState.js",
      "line": 53,
      "context": "console.error('Failed to initialize starting room:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/gameState.js",
      "line": 62,
      "context": "console.log(`Attempting to move to room: ${roomId}`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/gameState.js",
      "line": 67,
      "context": "throw new Error(`Room ${roomId} does not exist`);",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/gameState.js",
      "line": 71,
      "context": "if (!this.unlockedRooms.has(roomId)) {",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/gameState.js",
      "line": 72,
      "context": "throw new Error(`Room ${roomId} is locked. Answer questions to unlock new areas.`);",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/gameState.js",
      "line": 77,
      "context": "this.visitedRooms.add(roomId);",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/gameState.js",
      "line": 78,
      "context": "this.currentRoomStartTime = Date.now(); // Reset room timer",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/gameState.js",
      "line": 80,
      "context": "console.log(`Moved from ${previousRoom} to ${roomId}`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/gameState.js",
      "line": 85,
      "context": "console.error('Failed to move to room:', error.message);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "answerQuestion",
      "file": "src/gameState.js",
      "line": 94,
      "context": "async answerQuestion(questionId, answerIndex) {",
      "error": "Function 'answerQuestion' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/gameState.js",
      "line": 96,
      "context": "console.log(`Answering question ${questionId} with answer ${answerIndex}`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/gameState.js",
      "line": 100,
      "context": "throw new Error(`Question ${questionId} not found`);",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/gameState.js",
      "line": 103,
      "context": "if (this.answeredQuestions.has(questionId)) {",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/gameState.js",
      "line": 104,
      "context": "throw new Error('Question already answered');",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/gameState.js",
      "line": 114,
      "context": "this.answeredQuestions.add(questionId);",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "unlockConnectedRooms",
      "file": "src/gameState.js",
      "line": 124,
      "context": "await this.unlockConnectedRooms();",
      "error": "Function 'unlockConnectedRooms' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/gameState.js",
      "line": 126,
      "context": "console.log(`Correct answer! Points earned: ${pointsEarned} (${question.points} + ${timeBonus} time bonus)`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/gameState.js",
      "line": 128,
      "context": "console.log('Incorrect answer');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "checkGameCompletion",
      "file": "src/gameState.js",
      "line": 143,
      "context": "this.checkGameCompletion();",
      "error": "Function 'checkGameCompletion' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/gameState.js",
      "line": 147,
      "context": "console.error('Failed to answer question:', error.message);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "unlockConnectedRooms",
      "file": "src/gameState.js",
      "line": 156,
      "context": "async unlockConnectedRooms() {",
      "error": "Function 'unlockConnectedRooms' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/gameState.js",
      "line": 160,
      "context": "currentRoom.connections.forEach(roomId => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/gameState.js",
      "line": 161,
      "context": "if (!this.unlockedRooms.has(roomId)) {",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/gameState.js",
      "line": 162,
      "context": "this.unlockedRooms.add(roomId);",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/gameState.js",
      "line": 163,
      "context": "console.log(`Unlocked room: ${roomId}`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/gameState.js",
      "line": 169,
      "context": "console.error('Failed to unlock connected rooms:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/gameState.js",
      "line": 177,
      "context": "const now = Date.now();",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/gameState.js",
      "line": 183,
      "context": "return Math.floor(maxBonus * (1 - timeSinceQuestion / maxBonusTime));",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/gameState.js",
      "line": 192,
      "context": "this.questionStartTime = Date.now();",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "completed",
      "file": "src/gameState.js",
      "line": 196,
      "context": "* Check if game is completed (all rooms visited and questions answered)",
      "error": "Function 'completed' is not defined"
    },
    {
      "type": "function",
      "name": "checkGameCompletion",
      "file": "src/gameState.js",
      "line": 198,
      "context": "async checkGameCompletion() {",
      "error": "Function 'checkGameCompletion' is not defined"
    },
    {
      "type": "function",
      "name": "loadGameData",
      "file": "src/gameState.js",
      "line": 200,
      "context": "const gameData = await this.dataLoader.loadGameData();",
      "error": "Function 'loadGameData' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/gameState.js",
      "line": 221,
      "context": "const playTime = Date.now() - this.startTime;",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/gameState.js",
      "line": 239,
      "context": "console.log('🎉 Game completed!', completionData);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/gameState.js",
      "line": 262,
      "context": "console.error('Error checking game completion:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/gameState.js",
      "line": 273,
      "context": "return Math.floor(this.score / 100); // Rough estimate based on scoring",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/gameState.js",
      "line": 280,
      "context": "const playTime = Date.now() - this.startTime;",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "round",
      "file": "src/gameState.js",
      "line": 306,
      "context": "roomsExploredPercent: Math.round((this.visitedRooms.size / totalRooms) * 100),",
      "error": "Function 'round' is not defined"
    },
    {
      "type": "function",
      "name": "round",
      "file": "src/gameState.js",
      "line": 309,
      "context": "questionsAnsweredPercent: Math.round((questionsAnsweredCount / totalQuestions) * 100),",
      "error": "Function 'round' is not defined"
    },
    {
      "type": "function",
      "name": "round",
      "file": "src/gameState.js",
      "line": 312,
      "context": "accuracy: Math.round(accuracy * 10) / 10,",
      "error": "Function 'round' is not defined"
    },
    {
      "type": "function",
      "name": "round",
      "file": "src/gameState.js",
      "line": 313,
      "context": "accuracyPercent: Math.round(accuracy),",
      "error": "Function 'round' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/gameState.js",
      "line": 334,
      "context": "const seconds = Math.floor(milliseconds / 1000);",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/gameState.js",
      "line": 335,
      "context": "const minutes = Math.floor(seconds / 60);",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/gameState.js",
      "line": 336,
      "context": "const hours = Math.floor(minutes / 60);",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/gameState.js",
      "line": 355,
      "context": "const playTime = Date.now() - this.startTime;",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "round",
      "file": "src/gameState.js",
      "line": 383,
      "context": "return Math.round((accuracy * 0.5) + (exploration * 0.3) + (completion * 0.2));",
      "error": "Function 'round' is not defined"
    },
    {
      "type": "function",
      "name": "getAvailableRooms",
      "file": "src/gameState.js",
      "line": 389,
      "context": "async getAvailableRooms() {",
      "error": "Function 'getAvailableRooms' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/gameState.js",
      "line": 396,
      "context": "return currentRoom.connections.filter(roomId =>",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/gameState.js",
      "line": 397,
      "context": "this.unlockedRooms.has(roomId)",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/gameState.js",
      "line": 400,
      "context": "console.error('Error getting available rooms:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "accessible",
      "file": "src/gameState.js",
      "line": 406,
      "context": "* Check if a room is accessible (unlocked)",
      "error": "Function 'accessible' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/gameState.js",
      "line": 411,
      "context": "return this.unlockedRooms.has(roomId);",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "from",
      "file": "src/gameState.js",
      "line": 422,
      "context": "visitedRooms: Array.from(this.visitedRooms),",
      "error": "Function 'from' is not defined"
    },
    {
      "type": "function",
      "name": "from",
      "file": "src/gameState.js",
      "line": 423,
      "context": "unlockedRooms: Array.from(this.unlockedRooms),",
      "error": "Function 'from' is not defined"
    },
    {
      "type": "function",
      "name": "from",
      "file": "src/gameState.js",
      "line": 424,
      "context": "answeredQuestions: Array.from(this.answeredQuestions),",
      "error": "Function 'from' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/gameState.js",
      "line": 428,
      "context": "saveTime: Date.now()",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "setItem",
      "file": "src/gameState.js",
      "line": 431,
      "context": "localStorage.setItem('lobeLabyrinthSave', JSON.stringify(saveData));",
      "error": "Function 'setItem' is not defined"
    },
    {
      "type": "function",
      "name": "stringify",
      "file": "src/gameState.js",
      "line": 431,
      "context": "localStorage.setItem('lobeLabyrinthSave', JSON.stringify(saveData));",
      "error": "Function 'stringify' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/gameState.js",
      "line": 432,
      "context": "console.log('Game saved successfully');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/gameState.js",
      "line": 436,
      "context": "console.error('Failed to save game:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "getItem",
      "file": "src/gameState.js",
      "line": 447,
      "context": "const saveData = localStorage.getItem('lobeLabyrinthSave');",
      "error": "Function 'getItem' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/gameState.js",
      "line": 449,
      "context": "console.log('No saved game found');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "parse",
      "file": "src/gameState.js",
      "line": 453,
      "context": "const data = JSON.parse(saveData);",
      "error": "Function 'parse' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/gameState.js",
      "line": 457,
      "context": "console.warn('Invalid save data detected, starting new game');",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "removeItem",
      "file": "src/gameState.js",
      "line": 458,
      "context": "localStorage.removeItem('lobeLabyrinthSave');",
      "error": "Function 'removeItem' is not defined"
    },
    {
      "type": "function",
      "name": "max",
      "file": "src/gameState.js",
      "line": 468,
      "context": "this.score = Math.max(0, parseInt(data.score) || 0);",
      "error": "Function 'max' is not defined"
    },
    {
      "type": "function",
      "name": "Set",
      "file": "src/gameState.js",
      "line": 469,
      "context": "this.visitedRooms = new Set(this.sanitizeRoomArray(data.visitedRooms, defaultRoomId));",
      "error": "Function 'Set' is not defined"
    },
    {
      "type": "function",
      "name": "Set",
      "file": "src/gameState.js",
      "line": 470,
      "context": "this.unlockedRooms = new Set(this.sanitizeRoomArray(data.unlockedRooms, defaultRoomId));",
      "error": "Function 'Set' is not defined"
    },
    {
      "type": "function",
      "name": "Set",
      "file": "src/gameState.js",
      "line": 471,
      "context": "this.answeredQuestions = new Set(this.sanitizeQuestionArray(data.answeredQuestions));",
      "error": "Function 'Set' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/gameState.js",
      "line": 472,
      "context": "this.startTime = this.sanitizeTimestamp(data.startTime) || Date.now();",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "Boolean",
      "file": "src/gameState.js",
      "line": 473,
      "context": "this.gameCompleted = Boolean(data.gameCompleted);",
      "error": "Function 'Boolean' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/gameState.js",
      "line": 476,
      "context": "console.log('Game loaded successfully:', this.getStateSnapshot());",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/gameState.js",
      "line": 480,
      "context": "console.error('Failed to load save game:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "removeItem",
      "file": "src/gameState.js",
      "line": 481,
      "context": "localStorage.removeItem('lobeLabyrinthSave');",
      "error": "Function 'removeItem' is not defined"
    },
    {
      "type": "function",
      "name": "isArray",
      "file": "src/gameState.js",
      "line": 507,
      "context": "if (data.visitedRooms !== undefined && !Array.isArray(data.visitedRooms)) {",
      "error": "Function 'isArray' is not defined"
    },
    {
      "type": "function",
      "name": "isArray",
      "file": "src/gameState.js",
      "line": 511,
      "context": "if (data.unlockedRooms !== undefined && !Array.isArray(data.unlockedRooms)) {",
      "error": "Function 'isArray' is not defined"
    },
    {
      "type": "function",
      "name": "isArray",
      "file": "src/gameState.js",
      "line": 515,
      "context": "if (data.answeredQuestions !== undefined && !Array.isArray(data.answeredQuestions)) {",
      "error": "Function 'isArray' is not defined"
    },
    {
      "type": "function",
      "name": "test",
      "file": "src/gameState.js",
      "line": 537,
      "context": "if (!/^[a-zA-Z0-9_-]+$/.test(roomId)) {",
      "error": "Function 'test' is not defined"
    },
    {
      "type": "function",
      "name": "isArray",
      "file": "src/gameState.js",
      "line": 551,
      "context": "if (!Array.isArray(roomArray)) {",
      "error": "Function 'isArray' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/gameState.js",
      "line": 556,
      "context": ".filter(room => typeof room === 'string')",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "map",
      "file": "src/gameState.js",
      "line": 557,
      "context": ".map(room => this.sanitizeRoomId(room))",
      "error": "Function 'map' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/gameState.js",
      "line": 558,
      "context": ".filter(room => room !== null)",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "slice",
      "file": "src/gameState.js",
      "line": 559,
      "context": ".slice(0, 20); // Limit array size",
      "error": "Function 'slice' is not defined"
    },
    {
      "type": "function",
      "name": "includes",
      "file": "src/gameState.js",
      "line": 562,
      "context": "if (defaultRoom && !sanitized.includes(defaultRoom)) {",
      "error": "Function 'includes' is not defined"
    },
    {
      "type": "function",
      "name": "unshift",
      "file": "src/gameState.js",
      "line": 563,
      "context": "sanitized.unshift(defaultRoom);",
      "error": "Function 'unshift' is not defined"
    },
    {
      "type": "function",
      "name": "isArray",
      "file": "src/gameState.js",
      "line": 575,
      "context": "if (!Array.isArray(questionArray)) {",
      "error": "Function 'isArray' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/gameState.js",
      "line": 580,
      "context": ".filter(q => typeof q === 'string' && q.length > 0 && q.length < 100)",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/gameState.js",
      "line": 581,
      "context": ".filter(q => /^[a-zA-Z0-9_-]+$/.test(q))",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "test",
      "file": "src/gameState.js",
      "line": 581,
      "context": ".filter(q => /^[a-zA-Z0-9_-]+$/.test(q))",
      "error": "Function 'test' is not defined"
    },
    {
      "type": "function",
      "name": "slice",
      "file": "src/gameState.js",
      "line": 582,
      "context": ".slice(0, 100); // Limit array size",
      "error": "Function 'slice' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/gameState.js",
      "line": 596,
      "context": "const now = Date.now();",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "replace",
      "file": "src/gameState.js",
      "line": 619,
      "context": ".replace(/<[^>]*>/g, '') // Remove HTML tags",
      "error": "Function 'replace' is not defined"
    },
    {
      "type": "function",
      "name": "trim",
      "file": "src/gameState.js",
      "line": 620,
      "context": ".trim()",
      "error": "Function 'trim' is not defined"
    },
    {
      "type": "function",
      "name": "slice",
      "file": "src/gameState.js",
      "line": 621,
      "context": ".slice(0, 50); // Limit length",
      "error": "Function 'slice' is not defined"
    },
    {
      "type": "function",
      "name": "Set",
      "file": "src/gameState.js",
      "line": 630,
      "context": "this.visitedRooms = new Set(['entrance']);",
      "error": "Function 'Set' is not defined"
    },
    {
      "type": "function",
      "name": "Set",
      "file": "src/gameState.js",
      "line": 631,
      "context": "this.unlockedRooms = new Set(['entrance']);",
      "error": "Function 'Set' is not defined"
    },
    {
      "type": "function",
      "name": "Set",
      "file": "src/gameState.js",
      "line": 632,
      "context": "this.answeredQuestions = new Set();",
      "error": "Function 'Set' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/gameState.js",
      "line": 633,
      "context": "this.startTime = Date.now();",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "removeItem",
      "file": "src/gameState.js",
      "line": 638,
      "context": "localStorage.removeItem('lobeLabyrinthSave');",
      "error": "Function 'removeItem' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/gameState.js",
      "line": 640,
      "context": "console.log('Game reset to initial state');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "from",
      "file": "src/gameState.js",
      "line": 651,
      "context": "visitedRooms: Array.from(this.visitedRooms),",
      "error": "Function 'from' is not defined"
    },
    {
      "type": "function",
      "name": "from",
      "file": "src/gameState.js",
      "line": 652,
      "context": "unlockedRooms: Array.from(this.unlockedRooms),",
      "error": "Function 'from' is not defined"
    },
    {
      "type": "function",
      "name": "from",
      "file": "src/gameState.js",
      "line": 653,
      "context": "answeredQuestions: Array.from(this.answeredQuestions),",
      "error": "Function 'from' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/gameState.js",
      "line": 656,
      "context": "playTime: Date.now() - this.startTime",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "toISOString",
      "file": "src/gameState.js",
      "line": 671,
      "context": "exportTime: new Date().toISOString(),",
      "error": "Function 'toISOString' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/gameState.js",
      "line": 701,
      "context": "this.eventListeners[event].push(callback);",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/gameState.js",
      "line": 706,
      "context": "this.eventListeners[event].forEach(callback => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "callback",
      "file": "src/gameState.js",
      "line": 708,
      "context": "callback(data);",
      "error": "Function 'callback' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/gameState.js",
      "line": 710,
      "context": "console.error(`Error in event listener for ${event}:`, error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/gameState.js",
      "line": 720,
      "context": "const playTime = Date.now() - this.startTime;",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/gameState.js",
      "line": 725,
      "context": "playTime: Math.floor(playTime / 1000), // in seconds",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "room",
      "file": "src/gameState.js",
      "line": 731,
      "context": "* Get time spent in current room (in milliseconds)",
      "error": "Function 'room' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/gameState.js",
      "line": 737,
      "context": "return Date.now() - this.currentRoomStartTime;",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/gameState.js",
      "line": 746,
      "context": "this.pausedTime = Date.now() - this.currentRoomStartTime;",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/gameState.js",
      "line": 756,
      "context": "this.currentRoomStartTime = Date.now() - this.pausedTime;",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/gameState.js",
      "line": 765,
      "context": "const seconds = Math.floor(milliseconds / 1000);",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/gameState.js",
      "line": 766,
      "context": "const minutes = Math.floor(seconds / 60);",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/gameState.js",
      "line": 767,
      "context": "const hours = Math.floor(minutes / 60);",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "Map",
      "file": "src/quizEngine.js",
      "line": 18,
      "context": "this.questionAnswerMap = new Map(); // Store original correct answers",
      "error": "Function 'Map' is not defined"
    },
    {
      "type": "function",
      "name": "Set",
      "file": "src/quizEngine.js",
      "line": 21,
      "context": "this.questionHistory = new Set();",
      "error": "Function 'Set' is not defined"
    },
    {
      "type": "function",
      "name": "Map",
      "file": "src/quizEngine.js",
      "line": 22,
      "context": "this.categoryQuestions = new Map();",
      "error": "Function 'Map' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/quizEngine.js",
      "line": 28,
      "context": "console.log('QuizEngine initialized - call initializeQuestionPool() after instantiation');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "initializeQuestionPool",
      "file": "src/quizEngine.js",
      "line": 28,
      "context": "console.log('QuizEngine initialized - call initializeQuestionPool() after instantiation');",
      "error": "Function 'initializeQuestionPool' is not defined"
    },
    {
      "type": "function",
      "name": "initializeQuestionPool",
      "file": "src/quizEngine.js",
      "line": 34,
      "context": "async initializeQuestionPool() {",
      "error": "Function 'initializeQuestionPool' is not defined"
    },
    {
      "type": "function",
      "name": "loadGameData",
      "file": "src/quizEngine.js",
      "line": 36,
      "context": "const gameData = await this.dataLoader.loadGameData();",
      "error": "Function 'loadGameData' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/quizEngine.js",
      "line": 45,
      "context": "console.log(`Question pool initialized: ${this.allQuestions.length} questions across ${this.categoryQuestions.size} categories`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/quizEngine.js",
      "line": 47,
      "context": "console.error('Failed to initialize question pool:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "clear",
      "file": "src/quizEngine.js",
      "line": 55,
      "context": "this.categoryQuestions.clear();",
      "error": "Function 'clear' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/quizEngine.js",
      "line": 57,
      "context": "this.allQuestions.forEach(question => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/quizEngine.js",
      "line": 59,
      "context": "if (!this.categoryQuestions.has(category)) {",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/quizEngine.js",
      "line": 60,
      "context": "this.categoryQuestions.set(category, []);",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/quizEngine.js",
      "line": 62,
      "context": "this.categoryQuestions.get(category).push(question);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/quizEngine.js",
      "line": 62,
      "context": "this.categoryQuestions.get(category).push(question);",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/quizEngine.js",
      "line": 72,
      "context": "const j = Math.floor(Math.random() * (i + 1));",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "random",
      "file": "src/quizEngine.js",
      "line": 72,
      "context": "const j = Math.floor(Math.random() * (i + 1));",
      "error": "Function 'random' is not defined"
    },
    {
      "type": "function",
      "name": "getNextQuestion",
      "file": "src/quizEngine.js",
      "line": 81,
      "context": "async getNextQuestion(preferredCategory = null) {",
      "error": "Function 'getNextQuestion' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/quizEngine.js",
      "line": 84,
      "context": "const availableQuestions = this.shuffledQuestions.filter(q =>",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/quizEngine.js",
      "line": 85,
      "context": "!this.gameState.answeredQuestions.has(q.id)",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/quizEngine.js",
      "line": 91,
      "context": "console.log('All questions answered, reshuffling pool');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/quizEngine.js",
      "line": 97,
      "context": "if (preferredCategory && this.categoryQuestions.has(preferredCategory)) {",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/quizEngine.js",
      "line": 98,
      "context": "const categoryQuestions = this.categoryQuestions.get(preferredCategory)",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/quizEngine.js",
      "line": 99,
      "context": ".filter(q => !this.gameState.answeredQuestions.has(q.id));",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/quizEngine.js",
      "line": 99,
      "context": ".filter(q => !this.gameState.answeredQuestions.has(q.id));",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/quizEngine.js",
      "line": 102,
      "context": "selectedQuestion = categoryQuestions[Math.floor(Math.random() * categoryQuestions.length)];",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "random",
      "file": "src/quizEngine.js",
      "line": 102,
      "context": "selectedQuestion = categoryQuestions[Math.floor(Math.random() * categoryQuestions.length)];",
      "error": "Function 'random' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/quizEngine.js",
      "line": 113,
      "context": "console.error('Error selecting next question:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "presentQuestion",
      "file": "src/quizEngine.js",
      "line": 121,
      "context": "async presentQuestion(questionId = null, category = null) {",
      "error": "Function 'presentQuestion' is not defined"
    },
    {
      "type": "function",
      "name": "getNextQuestion",
      "file": "src/quizEngine.js",
      "line": 128,
      "context": "question = await this.getNextQuestion(category);",
      "error": "Function 'getNextQuestion' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/quizEngine.js",
      "line": 132,
      "context": "throw new Error('No questions available');",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/quizEngine.js",
      "line": 136,
      "context": "this.questionStartTime = Date.now();",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/quizEngine.js",
      "line": 140,
      "context": "this.questionAnswerMap.set(question.id, {",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/quizEngine.js",
      "line": 152,
      "context": "this.questionAnswerMap.get(question.id).shuffledCorrectIndex = shuffledAnswers.correctIndex;",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/quizEngine.js",
      "line": 168,
      "context": "console.log(`Presenting question: ${question.question}`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/quizEngine.js",
      "line": 173,
      "context": "console.error('Failed to present question:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/quizEngine.js",
      "line": 188,
      "context": "const j = Math.floor(Math.random() * (i + 1));",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "random",
      "file": "src/quizEngine.js",
      "line": 188,
      "context": "const j = Math.floor(Math.random() * (i + 1));",
      "error": "Function 'random' is not defined"
    },
    {
      "type": "function",
      "name": "indexOf",
      "file": "src/quizEngine.js",
      "line": 193,
      "context": "const correctIndex = answers.indexOf(correctAnswer);",
      "error": "Function 'indexOf' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/quizEngine.js",
      "line": 208,
      "context": "const startTime = performance.now();",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "max",
      "file": "src/quizEngine.js",
      "line": 211,
      "context": "this.timeRemaining = Math.max(0, this.questionTimeLimit - elapsed);",
      "error": "Function 'max' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/quizEngine.js",
      "line": 247,
      "context": "console.log('Answer already being processed, skipping timeUp');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/quizEngine.js",
      "line": 251,
      "context": "console.log('Time up for question:', this.currentQuestion?.id);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "validateAnswer",
      "file": "src/quizEngine.js",
      "line": 270,
      "context": "async validateAnswer(answerIndex) {",
      "error": "Function 'validateAnswer' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/quizEngine.js",
      "line": 273,
      "context": "throw new Error('No question currently active');",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/quizEngine.js",
      "line": 277,
      "context": "console.warn('Answer processing already in progress, ignoring duplicate submission');",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/quizEngine.js",
      "line": 284,
      "context": "const timeElapsed = Date.now() - this.questionStartTime;",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/quizEngine.js",
      "line": 312,
      "context": "console.log(`Answer validation: ${isCorrect ? 'Correct' : 'Incorrect'} (${pointsEarned} points)`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "answerQuestion",
      "file": "src/quizEngine.js",
      "line": 317,
      "context": "await this.gameState.answerQuestion(question.id, answerIndex);",
      "error": "Function 'answerQuestion' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/quizEngine.js",
      "line": 325,
      "context": "console.error('Failed to validate answer:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "validation",
      "file": "src/quizEngine.js",
      "line": 334,
      "context": "* Generate a hash for answer validation (basic obfuscation)",
      "error": "Function 'validation' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/quizEngine.js",
      "line": 342,
      "context": "const seed = `${questionId}_${correctIndex}_${this.questionStartTime || Date.now()}`;",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "charCodeAt",
      "file": "src/quizEngine.js",
      "line": 345,
      "context": "const char = seed.charCodeAt(i);",
      "error": "Function 'charCodeAt' is not defined"
    },
    {
      "type": "function",
      "name": "abs",
      "file": "src/quizEngine.js",
      "line": 349,
      "context": "return Math.abs(hash).toString(16);",
      "error": "Function 'abs' is not defined"
    },
    {
      "type": "function",
      "name": "toString",
      "file": "src/quizEngine.js",
      "line": 349,
      "context": "return Math.abs(hash).toString(16);",
      "error": "Function 'toString' is not defined"
    },
    {
      "type": "function",
      "name": "question",
      "file": "src/quizEngine.js",
      "line": 366,
      "context": "* Get original correct answer for a question (only after validation)",
      "error": "Function 'question' is not defined"
    },
    {
      "type": "function",
      "name": "index",
      "file": "src/quizEngine.js",
      "line": 368,
      "context": "* @returns {number} - Original correct answer index (shuffled)",
      "error": "Function 'index' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/quizEngine.js",
      "line": 373,
      "context": "const storedData = this.questionAnswerMap.get(questionId);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/quizEngine.js",
      "line": 382,
      "context": "console.error('Error retrieving original correct answer:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/quizEngine.js",
      "line": 396,
      "context": "return Math.floor(maxBonus * bonusMultiplier);",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/quizEngine.js",
      "line": 410,
      "context": "console.log('Hint requested for current question');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "question",
      "file": "src/quizEngine.js",
      "line": 422,
      "context": "* Skip the current question (with penalty)",
      "error": "Function 'question' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/quizEngine.js",
      "line": 439,
      "context": "console.log('Question skipped:', this.currentQuestion.id);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/quizEngine.js",
      "line": 451,
      "context": "return this.categoryQuestions.get(category) || [];",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "from",
      "file": "src/quizEngine.js",
      "line": 458,
      "context": "return Array.from(this.categoryQuestions.keys());",
      "error": "Function 'from' is not defined"
    },
    {
      "type": "function",
      "name": "keys",
      "file": "src/quizEngine.js",
      "line": 458,
      "context": "return Array.from(this.categoryQuestions.keys());",
      "error": "Function 'keys' is not defined"
    },
    {
      "type": "function",
      "name": "map",
      "file": "src/quizEngine.js",
      "line": 469,
      "context": "const categoryStats = categories.map(category => {",
      "error": "Function 'map' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/quizEngine.js",
      "line": 470,
      "context": "const categoryQuestions = this.categoryQuestions.get(category);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/quizEngine.js",
      "line": 471,
      "context": "const answeredInCategory = categoryQuestions.filter(q =>",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/quizEngine.js",
      "line": 472,
      "context": "this.gameState && this.gameState.answeredQuestions.has(q.id)",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "round",
      "file": "src/quizEngine.js",
      "line": 479,
      "context": "percentage: Math.round((answeredInCategory / categoryQuestions.length) * 100)",
      "error": "Function 'round' is not defined"
    },
    {
      "type": "function",
      "name": "round",
      "file": "src/quizEngine.js",
      "line": 488,
      "context": "completionPercentage: Math.round((answeredQuestions / totalQuestions) * 100)",
      "error": "Function 'round' is not defined"
    },
    {
      "type": "function",
      "name": "getNextQuestion",
      "file": "src/quizEngine.js",
      "line": 497,
      "context": "return this.getNextQuestion();",
      "error": "Function 'getNextQuestion' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/quizEngine.js",
      "line": 514,
      "context": "const adaptiveQuestions = this.allQuestions.filter(q =>",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/quizEngine.js",
      "line": 516,
      "context": "!this.gameState.answeredQuestions.has(q.id)",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/quizEngine.js",
      "line": 520,
      "context": "return adaptiveQuestions[Math.floor(Math.random() * adaptiveQuestions.length)];",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "random",
      "file": "src/quizEngine.js",
      "line": 520,
      "context": "return adaptiveQuestions[Math.floor(Math.random() * adaptiveQuestions.length)];",
      "error": "Function 'random' is not defined"
    },
    {
      "type": "function",
      "name": "getNextQuestion",
      "file": "src/quizEngine.js",
      "line": 524,
      "context": "return this.getNextQuestion();",
      "error": "Function 'getNextQuestion' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/quizEngine.js",
      "line": 534,
      "context": "this.eventListeners[event].push(callback);",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/quizEngine.js",
      "line": 539,
      "context": "this.eventListeners[event].forEach(callback => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "callback",
      "file": "src/quizEngine.js",
      "line": 541,
      "context": "callback(data);",
      "error": "Function 'callback' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/quizEngine.js",
      "line": 543,
      "context": "console.error(`Error in QuizEngine event listener for ${event}:`, error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/quizEngine.js",
      "line": 556,
      "context": "console.log('QuizEngine destroyed');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/uiManager.js",
      "line": 28,
      "context": "console.log('UIManager initialized with animations:', !!this.animationManager, 'achievements:', !!this.achievementManager);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "updateDisplay",
      "file": "src/uiManager.js",
      "line": 32,
      "context": "this.updateDisplay();",
      "error": "Function 'updateDisplay' is not defined"
    },
    {
      "type": "function",
      "name": "Map",
      "file": "src/uiManager.js",
      "line": 36,
      "context": "this.loadingStates = new Map();",
      "error": "Function 'Map' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/uiManager.js",
      "line": 91,
      "context": "console.log('UI elements initialized with caching');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 101,
      "context": "ids.forEach(id => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/uiManager.js",
      "line": 102,
      "context": "const element = document.getElementById(id);",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/uiManager.js",
      "line": 104,
      "context": "console.warn(`UIManager: Element with ID '${id}' not found in DOM`);",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "replace",
      "file": "src/uiManager.js",
      "line": 107,
      "context": "const camelCaseKey = id.replace(/-([a-z])/g, (match, letter) => letter.toUpperCase());",
      "error": "Function 'replace' is not defined"
    },
    {
      "type": "function",
      "name": "toUpperCase",
      "file": "src/uiManager.js",
      "line": 107,
      "context": "const camelCaseKey = id.replace(/-([a-z])/g, (match, letter) => letter.toUpperCase());",
      "error": "Function 'toUpperCase' is not defined"
    },
    {
      "type": "function",
      "name": "presentNewQuestion",
      "file": "src/uiManager.js",
      "line": 119,
      "context": "this.elements.newQuestionBtn.addEventListener('click', () => this.presentNewQuestion());",
      "error": "Function 'presentNewQuestion' is not defined"
    },
    {
      "type": "function",
      "name": "handleRoomChange",
      "file": "src/uiManager.js",
      "line": 144,
      "context": "this.gameState.on('roomChanged', (data) => this.handleRoomChange(data));",
      "error": "Function 'handleRoomChange' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/uiManager.js",
      "line": 175,
      "context": "console.log('Event listeners setup complete');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 191,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/uiManager.js",
      "line": 198,
      "context": "console.log('Keyboard navigation setup complete');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 206,
      "context": "this.politeRegion = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 207,
      "context": "this.politeRegion.setAttribute('aria-live', 'polite');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 208,
      "context": "this.politeRegion.setAttribute('aria-atomic', 'true');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/uiManager.js",
      "line": 211,
      "context": "document.body.appendChild(this.politeRegion);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 214,
      "context": "this.assertiveRegion = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 215,
      "context": "this.assertiveRegion.setAttribute('aria-live', 'assertive');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 216,
      "context": "this.assertiveRegion.setAttribute('aria-atomic', 'true');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/uiManager.js",
      "line": 219,
      "context": "document.body.appendChild(this.assertiveRegion);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/uiManager.js",
      "line": 221,
      "context": "console.log('ARIA live regions initialized for accessibility');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/uiManager.js",
      "line": 281,
      "context": "console.error('Error handling keyboard input:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 297,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 301,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 305,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 309,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 313,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 329,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 339,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 345,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 351,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "presentNewQuestion",
      "file": "src/uiManager.js",
      "line": 357,
      "context": "this.presentNewQuestion();",
      "error": "Function 'presentNewQuestion' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 358,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 364,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 381,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 387,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 393,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 399,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 405,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 425,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 429,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 433,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 437,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "presentNewQuestion",
      "file": "src/uiManager.js",
      "line": 441,
      "context": "this.presentNewQuestion();",
      "error": "Function 'presentNewQuestion' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 442,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 447,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 457,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 461,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 465,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 470,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 475,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 486,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 491,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 496,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 505,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 509,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 514,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 523,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 528,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "includes",
      "file": "src/uiManager.js",
      "line": 549,
      "context": "if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', ' '].includes(key)) {",
      "error": "Function 'includes' is not defined"
    },
    {
      "type": "function",
      "name": "contains",
      "file": "src/uiManager.js",
      "line": 563,
      "context": "this.elements.victoryScreen.classList.contains('show');",
      "error": "Function 'contains' is not defined"
    },
    {
      "type": "function",
      "name": "active",
      "file": "src/uiManager.js",
      "line": 575,
      "context": "* Alternative method to check if question is active (for debugging)",
      "error": "Function 'active' is not defined"
    },
    {
      "type": "function",
      "name": "index",
      "file": "src/uiManager.js",
      "line": 591,
      "context": "* Select answer by index (0-3) for keyboard navigation",
      "error": "Function 'index' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 600,
      "context": "const answerButtons = document.querySelectorAll('.answer-btn');",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "click",
      "file": "src/uiManager.js",
      "line": 603,
      "context": "answerButtons[index].click();",
      "error": "Function 'click' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/uiManager.js",
      "line": 609,
      "context": "console.error('Error selecting answer by index:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 620,
      "context": "document.querySelectorAll('.answer-btn').forEach((btn, i) => {",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 620,
      "context": "document.querySelectorAll('.answer-btn').forEach((btn, i) => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 621,
      "context": "btn.classList.remove('keyboard-selected');",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 622,
      "context": "btn.setAttribute('aria-checked', 'false');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 626,
      "context": "const answerButtons = document.querySelectorAll('.answer-btn');",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/uiManager.js",
      "line": 628,
      "context": "answerButtons[index].classList.add('keyboard-selected');",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 629,
      "context": "answerButtons[index].setAttribute('aria-checked', 'true');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/uiManager.js",
      "line": 633,
      "context": "console.error('Error highlighting answer:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 642,
      "context": "const answerButtons = document.querySelectorAll('.answer-btn');",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "click",
      "file": "src/uiManager.js",
      "line": 644,
      "context": "answerButtons[this.selectedAnswerIndex].click();",
      "error": "Function 'click' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 653,
      "context": "document.querySelectorAll('.answer-btn').forEach(btn => {",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 653,
      "context": "document.querySelectorAll('.answer-btn').forEach(btn => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 654,
      "context": "btn.classList.remove('keyboard-selected');",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 655,
      "context": "btn.setAttribute('aria-checked', 'false');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "navigate",
      "file": "src/uiManager.js",
      "line": 662,
      "context": "* @param {string} direction - Direction to navigate (up, down, left, right)",
      "error": "Function 'navigate' is not defined"
    },
    {
      "type": "function",
      "name": "navigateDirection",
      "file": "src/uiManager.js",
      "line": 666,
      "context": "this.mapRenderer.navigateDirection(direction);",
      "error": "Function 'navigateDirection' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/uiManager.js",
      "line": 668,
      "context": "console.log(`Map navigation: ${direction} (map renderer not available)`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "presentNewQuestion",
      "file": "src/uiManager.js",
      "line": 680,
      "context": "this.presentNewQuestion();",
      "error": "Function 'presentNewQuestion' is not defined"
    },
    {
      "type": "function",
      "name": "focus",
      "file": "src/uiManager.js",
      "line": 689,
      "context": "this.elements.mapCanvas.focus();",
      "error": "Function 'focus' is not defined"
    },
    {
      "type": "function",
      "name": "focus",
      "file": "src/uiManager.js",
      "line": 699,
      "context": "this.elements.questionText.focus();",
      "error": "Function 'focus' is not defined"
    },
    {
      "type": "function",
      "name": "trim",
      "file": "src/uiManager.js",
      "line": 754,
      "context": "this.showFeedback(helpText.trim(), 'info', 8000);",
      "error": "Function 'trim' is not defined"
    },
    {
      "type": "function",
      "name": "toLocaleString",
      "file": "src/uiManager.js",
      "line": 766,
      "context": "🏆 Score: ${stats.finalScore.toLocaleString()}",
      "error": "Function 'toLocaleString' is not defined"
    },
    {
      "type": "function",
      "name": "trim",
      "file": "src/uiManager.js",
      "line": 773,
      "context": "this.showTooltip(quickStatsText.trim(), 4000);",
      "error": "Function 'trim' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/uiManager.js",
      "line": 775,
      "context": "console.error('Error showing quick stats:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "game",
      "file": "src/uiManager.js",
      "line": 794,
      "context": "* Confirm and reset game (for Ctrl+Shift+R)",
      "error": "Function 'game' is not defined"
    },
    {
      "type": "function",
      "name": "confirm",
      "file": "src/uiManager.js",
      "line": 797,
      "context": "const confirmed = confirm('Are you sure you want to completely reset the game? This will lose all progress.');",
      "error": "Function 'confirm' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/uiManager.js",
      "line": 816,
      "context": "console.log('Debug mode enabled - Game state:', this.gameState);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/uiManager.js",
      "line": 829,
      "context": "throw new Error('Game state not available or export method missing');",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "Blob",
      "file": "src/uiManager.js",
      "line": 833,
      "context": "const blob = new Blob([JSON.stringify(saveData, null, 2)], { type: 'application/json' });",
      "error": "Function 'Blob' is not defined"
    },
    {
      "type": "function",
      "name": "stringify",
      "file": "src/uiManager.js",
      "line": 833,
      "context": "const blob = new Blob([JSON.stringify(saveData, null, 2)], { type: 'application/json' });",
      "error": "Function 'stringify' is not defined"
    },
    {
      "type": "function",
      "name": "createObjectURL",
      "file": "src/uiManager.js",
      "line": 834,
      "context": "const url = URL.createObjectURL(blob);",
      "error": "Function 'createObjectURL' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 836,
      "context": "const a = document.createElement('a');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "toISOString",
      "file": "src/uiManager.js",
      "line": 838,
      "context": "a.download = `lobe-labyrinth-save-${new Date().toISOString().split('T')[0]}.json`;",
      "error": "Function 'toISOString' is not defined"
    },
    {
      "type": "function",
      "name": "split",
      "file": "src/uiManager.js",
      "line": 838,
      "context": "a.download = `lobe-labyrinth-save-${new Date().toISOString().split('T')[0]}.json`;",
      "error": "Function 'split' is not defined"
    },
    {
      "type": "function",
      "name": "click",
      "file": "src/uiManager.js",
      "line": 839,
      "context": "a.click();",
      "error": "Function 'click' is not defined"
    },
    {
      "type": "function",
      "name": "revokeObjectURL",
      "file": "src/uiManager.js",
      "line": 841,
      "context": "URL.revokeObjectURL(url);",
      "error": "Function 'revokeObjectURL' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/uiManager.js",
      "line": 843,
      "context": "console.log('✅ Game data exported successfully');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/uiManager.js",
      "line": 845,
      "context": "console.error('❌ Error exporting save data:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "updateDisplay",
      "file": "src/uiManager.js",
      "line": 855,
      "context": "this.updateDisplay();",
      "error": "Function 'updateDisplay' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/uiManager.js",
      "line": 861,
      "context": "console.error('Error refreshing room:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/uiManager.js",
      "line": 870,
      "context": "const mapCanvas = document.getElementById('map-canvas');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 872,
      "context": "...document.querySelectorAll('.answer-btn'),",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 873,
      "context": "...document.querySelectorAll('button'),",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/uiManager.js",
      "line": 875,
      "context": "].filter(el => el && el.style.display !== 'none');",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "indexOf",
      "file": "src/uiManager.js",
      "line": 879,
      "context": "const currentIndex = focusableElements.indexOf(document.activeElement);",
      "error": "Function 'indexOf' is not defined"
    },
    {
      "type": "function",
      "name": "focus",
      "file": "src/uiManager.js",
      "line": 882,
      "context": "focusableElements[nextIndex].focus();",
      "error": "Function 'focus' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/uiManager.js",
      "line": 910,
      "context": "console.log('Achievement notifications setup complete');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/uiManager.js",
      "line": 918,
      "context": "this.achievementQueue.push(achievementData);",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "processAchievementQueue",
      "file": "src/uiManager.js",
      "line": 922,
      "context": "this.processAchievementQueue();",
      "error": "Function 'processAchievementQueue' is not defined"
    },
    {
      "type": "function",
      "name": "processAchievementQueue",
      "file": "src/uiManager.js",
      "line": 929,
      "context": "async processAchievementQueue() {",
      "error": "Function 'processAchievementQueue' is not defined"
    },
    {
      "type": "function",
      "name": "shift",
      "file": "src/uiManager.js",
      "line": 936,
      "context": "const achievementData = this.achievementQueue.shift();",
      "error": "Function 'shift' is not defined"
    },
    {
      "type": "function",
      "name": "showAchievementNotification",
      "file": "src/uiManager.js",
      "line": 938,
      "context": "await this.showAchievementNotification(achievementData);",
      "error": "Function 'showAchievementNotification' is not defined"
    },
    {
      "type": "function",
      "name": "processAchievementQueue",
      "file": "src/uiManager.js",
      "line": 942,
      "context": "this.processAchievementQueue();",
      "error": "Function 'processAchievementQueue' is not defined"
    },
    {
      "type": "function",
      "name": "showAchievementNotification",
      "file": "src/uiManager.js",
      "line": 949,
      "context": "async showAchievementNotification(achievementData) {",
      "error": "Function 'showAchievementNotification' is not defined"
    },
    {
      "type": "function",
      "name": "toUpperCase",
      "file": "src/uiManager.js",
      "line": 969,
      "context": "${this.escapeHtml(achievement.rarity).toUpperCase()}",
      "error": "Function 'toUpperCase' is not defined"
    },
    {
      "type": "function",
      "name": "animateAchievementUnlock",
      "file": "src/uiManager.js",
      "line": 980,
      "context": "await this.animationManager.animateAchievementUnlock(achievement, notification);",
      "error": "Function 'animateAchievementUnlock' is not defined"
    },
    {
      "type": "function",
      "name": "translateY",
      "file": "src/uiManager.js",
      "line": 983,
      "context": "notification.style.transform = 'translateY(-100%)';",
      "error": "Function 'translateY' is not defined"
    },
    {
      "type": "function",
      "name": "translateY",
      "file": "src/uiManager.js",
      "line": 987,
      "context": "notification.style.transform = 'translateY(0)';",
      "error": "Function 'translateY' is not defined"
    },
    {
      "type": "function",
      "name": "translateY",
      "file": "src/uiManager.js",
      "line": 1005,
      "context": "notification.style.transform = 'translateY(-100%)';",
      "error": "Function 'translateY' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/uiManager.js",
      "line": 1017,
      "context": "let notification = document.getElementById('achievement-notification');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 1020,
      "context": "notification = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/uiManager.js",
      "line": 1025,
      "context": "document.body.appendChild(notification);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/uiManager.js",
      "line": 1038,
      "context": "console.warn('Achievement gallery element not found');",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "contains",
      "file": "src/uiManager.js",
      "line": 1042,
      "context": "const isVisible = gallery.classList.contains('visible');",
      "error": "Function 'contains' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 1045,
      "context": "gallery.classList.remove('visible');",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/uiManager.js",
      "line": 1048,
      "context": "gallery.classList.add('visible');",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 1065,
      "context": "achievements.forEach(achievement => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/uiManager.js",
      "line": 1069,
      "context": "categories[achievement.category].push(achievement);",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "unlocked",
      "file": "src/uiManager.js",
      "line": 1077,
      "context": "${stats.unlocked}/${stats.total} unlocked (${stats.percentage}%)",
      "error": "Function 'unlocked' is not defined"
    },
    {
      "type": "function",
      "name": "closest",
      "file": "src/uiManager.js",
      "line": 1081,
      "context": "<button class=\"achievement-close-btn\" onclick=\"this.closest('.achievement-gallery').classList.remove('visible')\">×</button>",
      "error": "Function 'closest' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 1081,
      "context": "<button class=\"achievement-close-btn\" onclick=\"this.closest('.achievement-gallery').classList.remove('visible')\">×</button>",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "keys",
      "file": "src/uiManager.js",
      "line": 1087,
      "context": "Object.keys(categories).forEach(categoryName => {",
      "error": "Function 'keys' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 1087,
      "context": "Object.keys(categories).forEach(categoryName => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "charAt",
      "file": "src/uiManager.js",
      "line": 1094,
      "context": "${categoryName.charAt(0).toUpperCase() + categoryName.slice(1)}",
      "error": "Function 'charAt' is not defined"
    },
    {
      "type": "function",
      "name": "toUpperCase",
      "file": "src/uiManager.js",
      "line": 1094,
      "context": "${categoryName.charAt(0).toUpperCase() + categoryName.slice(1)}",
      "error": "Function 'toUpperCase' is not defined"
    },
    {
      "type": "function",
      "name": "slice",
      "file": "src/uiManager.js",
      "line": 1094,
      "context": "${categoryName.charAt(0).toUpperCase() + categoryName.slice(1)}",
      "error": "Function 'slice' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 1100,
      "context": "categoryAchievements.forEach(achievement => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "max",
      "file": "src/uiManager.js",
      "line": 1101,
      "context": "const progressWidth = Math.max(achievement.progressPercentage, achievement.unlocked ? 100 : 0);",
      "error": "Function 'max' is not defined"
    },
    {
      "type": "function",
      "name": "updateDisplay",
      "file": "src/uiManager.js",
      "line": 1155,
      "context": "async updateDisplay() {",
      "error": "Function 'updateDisplay' is not defined"
    },
    {
      "type": "function",
      "name": "updateScoreDisplay",
      "file": "src/uiManager.js",
      "line": 1163,
      "context": "await this.updateScoreDisplay();",
      "error": "Function 'updateScoreDisplay' is not defined"
    },
    {
      "type": "function",
      "name": "updateNavigationOptions",
      "file": "src/uiManager.js",
      "line": 1164,
      "context": "await this.updateNavigationOptions();",
      "error": "Function 'updateNavigationOptions' is not defined"
    },
    {
      "type": "function",
      "name": "map",
      "file": "src/uiManager.js",
      "line": 1185,
      "context": ".map(roomId => {",
      "error": "Function 'map' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/uiManager.js",
      "line": 1186,
      "context": "const isUnlocked = this.gameState.unlockedRooms.has(roomId);",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "join",
      "file": "src/uiManager.js",
      "line": 1192,
      "context": ".join(', ');",
      "error": "Function 'join' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/uiManager.js",
      "line": 1197,
      "context": "console.error('Failed to update room info:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "updateScoreDisplay",
      "file": "src/uiManager.js",
      "line": 1204,
      "context": "async updateScoreDisplay() {",
      "error": "Function 'updateScoreDisplay' is not defined"
    },
    {
      "type": "function",
      "name": "abs",
      "file": "src/uiManager.js",
      "line": 1212,
      "context": "if (Math.abs(scoreChange) > 0 && this.previousScore !== 0) {",
      "error": "Function 'abs' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/uiManager.js",
      "line": 1213,
      "context": "console.log(`Animating score: ${this.previousScore} → ${stats.score}`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/uiManager.js",
      "line": 1231,
      "context": "console.warn('Score animation failed, using direct update:', error);",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "abs",
      "file": "src/uiManager.js",
      "line": 1239,
      "context": "if (Math.abs(scoreChange) >= 50 && this.previousScore !== 0) {",
      "error": "Function 'abs' is not defined"
    },
    {
      "type": "function",
      "name": "round",
      "file": "src/uiManager.js",
      "line": 1266,
      "context": "const overallProgress = Math.round((stats.roomsExploredPercent + stats.accuracyPercent) / 2);",
      "error": "Function 'round' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/uiManager.js",
      "line": 1282,
      "context": "console.error('Error updating progress indicators:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "type",
      "file": "src/uiManager.js",
      "line": 1288,
      "context": "* @param {string} type - Progress bar type (overall, rooms, accuracy)",
      "error": "Function 'type' is not defined"
    },
    {
      "type": "function",
      "name": "percentage",
      "file": "src/uiManager.js",
      "line": 1289,
      "context": "* @param {number} percentage - Progress percentage (0-100)",
      "error": "Function 'percentage' is not defined"
    },
    {
      "type": "function",
      "name": "max",
      "file": "src/uiManager.js",
      "line": 1297,
      "context": "const clampedPercentage = Math.max(0, Math.min(100, percentage || 0));",
      "error": "Function 'max' is not defined"
    },
    {
      "type": "function",
      "name": "min",
      "file": "src/uiManager.js",
      "line": 1297,
      "context": "const clampedPercentage = Math.max(0, Math.min(100, percentage || 0));",
      "error": "Function 'min' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/uiManager.js",
      "line": 1304,
      "context": "fillElement.classList.add('completed');",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 1306,
      "context": "fillElement.classList.remove('completed');",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "updateNavigationOptions",
      "file": "src/uiManager.js",
      "line": 1314,
      "context": "async updateNavigationOptions() {",
      "error": "Function 'updateNavigationOptions' is not defined"
    },
    {
      "type": "function",
      "name": "getAvailableRooms",
      "file": "src/uiManager.js",
      "line": 1318,
      "context": "const availableRooms = await this.gameState.getAvailableRooms();",
      "error": "Function 'getAvailableRooms' is not defined"
    },
    {
      "type": "function",
      "name": "all",
      "file": "src/uiManager.js",
      "line": 1325,
      "context": "const roomButtons = await Promise.all(",
      "error": "Function 'all' is not defined"
    },
    {
      "type": "function",
      "name": "map",
      "file": "src/uiManager.js",
      "line": 1326,
      "context": "availableRooms.map(async (roomId) => {",
      "error": "Function 'map' is not defined"
    },
    {
      "type": "function",
      "name": "async",
      "file": "src/uiManager.js",
      "line": 1326,
      "context": "availableRooms.map(async (roomId) => {",
      "error": "Function 'async' is not defined"
    },
    {
      "type": "function",
      "name": "join",
      "file": "src/uiManager.js",
      "line": 1335,
      "context": "<div class=\"room-nav-buttons\">${roomButtons.join('')}</div>",
      "error": "Function 'join' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/uiManager.js",
      "line": 1339,
      "context": "console.error('Failed to update navigation options:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "presentNewQuestion",
      "file": "src/uiManager.js",
      "line": 1364,
      "context": "async presentNewQuestion() {",
      "error": "Function 'presentNewQuestion' is not defined"
    },
    {
      "type": "function",
      "name": "presentQuestion",
      "file": "src/uiManager.js",
      "line": 1370,
      "context": "await this.quizEngine.presentQuestion(null, category);",
      "error": "Function 'presentQuestion' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 1431,
      "context": "this.elements.answerButtons.setAttribute('role', 'radiogroup');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 1432,
      "context": "this.elements.answerButtons.setAttribute('aria-label', 'Answer options');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "map",
      "file": "src/uiManager.js",
      "line": 1434,
      "context": "const buttonsHtml = questionData.answers.map((answer, index) =>",
      "error": "Function 'map' is not defined"
    },
    {
      "type": "function",
      "name": "fromCharCode",
      "file": "src/uiManager.js",
      "line": 1441,
      "context": "aria-label=\"Option ${String.fromCharCode(65 + index)}: ${this.escapeHtml(answer)}\"",
      "error": "Function 'fromCharCode' is not defined"
    },
    {
      "type": "function",
      "name": "fromCharCode",
      "file": "src/uiManager.js",
      "line": 1443,
      "context": "<span class=\"answer-letter\" aria-hidden=\"true\">${String.fromCharCode(65 + index)}.</span>",
      "error": "Function 'fromCharCode' is not defined"
    },
    {
      "type": "function",
      "name": "join",
      "file": "src/uiManager.js",
      "line": 1446,
      "context": ").join('');",
      "error": "Function 'join' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 1463,
      "context": "this.answerButtonListeners.forEach(listener => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 1474,
      "context": "const buttons = document.querySelectorAll('.answer-btn');",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 1476,
      "context": "buttons.forEach((button, index) => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/uiManager.js",
      "line": 1480,
      "context": "this.answerButtonListeners.push({",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 1491,
      "context": "e.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 1497,
      "context": "e.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 1503,
      "context": "e.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/uiManager.js",
      "line": 1509,
      "context": "this.answerButtonListeners.push({",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 1521,
      "context": "const div = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "buttons",
      "file": "src/uiManager.js",
      "line": 1527,
      "context": "* Setup keyboard navigation for answer buttons (radio group pattern)",
      "error": "Function 'buttons' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/uiManager.js",
      "line": 1531,
      "context": "console.warn('setupAnswerButtonKeyNavigation is deprecated. Use setupAnswerButtonListeners instead.');",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 1540,
      "context": "const buttons = document.querySelectorAll('.answer-btn');",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 1542,
      "context": "buttons.forEach((btn, i) => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 1544,
      "context": "btn.setAttribute('aria-checked', i === index ? 'true' : 'false');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "focus",
      "file": "src/uiManager.js",
      "line": 1546,
      "context": "btn.focus();",
      "error": "Function 'focus' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/uiManager.js",
      "line": 1559,
      "context": "console.warn('Answer already being processed, ignoring click');",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 1565,
      "context": "const answerButtons = document.querySelectorAll('.answer-btn');",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "validateAnswer",
      "file": "src/uiManager.js",
      "line": 1572,
      "context": "const result = await this.quizEngine.validateAnswer(answerIndex);",
      "error": "Function 'validateAnswer' is not defined"
    },
    {
      "type": "function",
      "name": "animateAnswerFeedback",
      "file": "src/uiManager.js",
      "line": 1576,
      "context": "await this.animationManager.animateAnswerFeedback(clickedButton, result.isCorrect);",
      "error": "Function 'animateAnswerFeedback' is not defined"
    },
    {
      "type": "function",
      "name": "toLowerCase",
      "file": "src/uiManager.js",
      "line": 1652,
      "context": "const categoryHint = categoryHints[category.toLowerCase()] || categoryHints['general'];",
      "error": "Function 'toLowerCase' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/uiManager.js",
      "line": 1654,
      "context": "const randomDifficultyHint = difficultyHints[Math.floor(Math.random() * difficultyHints.length)];",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "random",
      "file": "src/uiManager.js",
      "line": 1654,
      "context": "const randomDifficultyHint = difficultyHints[Math.floor(Math.random() * difficultyHints.length)];",
      "error": "Function 'random' is not defined"
    },
    {
      "type": "function",
      "name": "rooms",
      "file": "src/uiManager.js",
      "line": 1691,
      "context": "'Welcome! Click on connected rooms (orange) to explore the castle.',",
      "error": "Function 'rooms' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/uiManager.js",
      "line": 1700,
      "context": "return hints[Math.floor(Math.random() * hints.length)];",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "random",
      "file": "src/uiManager.js",
      "line": 1700,
      "context": "return hints[Math.floor(Math.random() * hints.length)];",
      "error": "Function 'random' is not defined"
    },
    {
      "type": "function",
      "name": "button",
      "file": "src/uiManager.js",
      "line": 1709,
      "context": "'Use the hint button (H) when you\\'re unsure.',",
      "error": "Function 'button' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/uiManager.js",
      "line": 1717,
      "context": "return hints[Math.floor(Math.random() * hints.length)];",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "random",
      "file": "src/uiManager.js",
      "line": 1717,
      "context": "return hints[Math.floor(Math.random() * hints.length)];",
      "error": "Function 'random' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/uiManager.js",
      "line": 1734,
      "context": "return hints[Math.floor(Math.random() * hints.length)];",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "random",
      "file": "src/uiManager.js",
      "line": 1734,
      "context": "return hints[Math.floor(Math.random() * hints.length)];",
      "error": "Function 'random' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/uiManager.js",
      "line": 1751,
      "context": "return hints[Math.floor(Math.random() * hints.length)];",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "random",
      "file": "src/uiManager.js",
      "line": 1751,
      "context": "return hints[Math.floor(Math.random() * hints.length)];",
      "error": "Function 'random' is not defined"
    },
    {
      "type": "function",
      "name": "stats",
      "file": "src/uiManager.js",
      "line": 1762,
      "context": "'Track your progress with the quick stats (F2).',",
      "error": "Function 'stats' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/uiManager.js",
      "line": 1768,
      "context": "return hints[Math.floor(Math.random() * hints.length)];",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "random",
      "file": "src/uiManager.js",
      "line": 1768,
      "context": "return hints[Math.floor(Math.random() * hints.length)];",
      "error": "Function 'random' is not defined"
    },
    {
      "type": "function",
      "name": "abs",
      "file": "src/uiManager.js",
      "line": 1779,
      "context": "this.showFeedback(`Question skipped. Penalty: ${Math.abs(result.pointsEarned)} points`, 'warning');",
      "error": "Function 'abs' is not defined"
    },
    {
      "type": "function",
      "name": "handleRoomChange",
      "file": "src/uiManager.js",
      "line": 1799,
      "context": "async handleRoomChange(data) {",
      "error": "Function 'handleRoomChange' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/uiManager.js",
      "line": 1800,
      "context": "console.log(`Room changed: ${data.from} -> ${data.to}`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "updateNavigationOptions",
      "file": "src/uiManager.js",
      "line": 1802,
      "context": "await this.updateNavigationOptions();",
      "error": "Function 'updateNavigationOptions' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 1810,
      "context": "const answerButtons = document.querySelectorAll('.answer-btn');",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 1813,
      "context": "answerButtons.forEach((btn, index) => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 1814,
      "context": "btn.classList.remove('answer-correct', 'answer-incorrect');",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/uiManager.js",
      "line": 1817,
      "context": "btn.classList.add('answer-correct');",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/uiManager.js",
      "line": 1819,
      "context": "btn.classList.add('answer-incorrect');",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "points",
      "file": "src/uiManager.js",
      "line": 1825,
      "context": "? `Correct! +${data.pointsEarned} points (${data.timeBonus} time bonus)`",
      "error": "Function 'points' is not defined"
    },
    {
      "type": "function",
      "name": "fromCharCode",
      "file": "src/uiManager.js",
      "line": 1826,
      "context": ": `Incorrect. The correct answer was ${String.fromCharCode(65 + data.correctAnswer)}.`;",
      "error": "Function 'fromCharCode' is not defined"
    },
    {
      "type": "function",
      "name": "updateScoreDisplay",
      "file": "src/uiManager.js",
      "line": 1837,
      "context": "this.updateScoreDisplay();",
      "error": "Function 'updateScoreDisplay' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/uiManager.js",
      "line": 1852,
      "context": "console.log('Question answered in GameState:', data);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "updateScoreDisplay",
      "file": "src/uiManager.js",
      "line": 1855,
      "context": "this.updateScoreDisplay();",
      "error": "Function 'updateScoreDisplay' is not defined"
    },
    {
      "type": "function",
      "name": "updateNavigationOptions",
      "file": "src/uiManager.js",
      "line": 1860,
      "context": "this.updateNavigationOptions();",
      "error": "Function 'updateNavigationOptions' is not defined"
    },
    {
      "type": "function",
      "name": "ceil",
      "file": "src/uiManager.js",
      "line": 1884,
      "context": "const seconds = Math.ceil(data.timeRemaining / 1000);",
      "error": "Function 'ceil' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/uiManager.js",
      "line": 1938,
      "context": "console.log('Game completed:', data);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "updateDisplay",
      "file": "src/uiManager.js",
      "line": 1968,
      "context": "this.updateDisplay();",
      "error": "Function 'updateDisplay' is not defined"
    },
    {
      "type": "function",
      "name": "confirm",
      "file": "src/uiManager.js",
      "line": 1978,
      "context": "if (confirm('Are you sure you want to reset the game? All progress will be lost.')) {",
      "error": "Function 'confirm' is not defined"
    },
    {
      "type": "function",
      "name": "updateDisplay",
      "file": "src/uiManager.js",
      "line": 1981,
      "context": "this.updateDisplay();",
      "error": "Function 'updateDisplay' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 2012,
      "context": "const buttons = document.querySelectorAll('.answer-btn');",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 2013,
      "context": "buttons.forEach(btn => btn.disabled = true);",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 2020,
      "context": "const buttons = document.querySelectorAll('.answer-btn');",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 2021,
      "context": "buttons.forEach(btn => btn.disabled = false);",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "keys",
      "file": "src/uiManager.js",
      "line": 2062,
      "context": "elementsFound: Object.keys(this.elements).filter(key => this.elements[key] !== null)",
      "error": "Function 'keys' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/uiManager.js",
      "line": 2062,
      "context": "elementsFound: Object.keys(this.elements).filter(key => this.elements[key] !== null)",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/uiManager.js",
      "line": 2071,
      "context": "console.error('Victory screen element not found');",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/uiManager.js",
      "line": 2084,
      "context": "this.elements.victoryScreen.classList.add('show');",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/uiManager.js",
      "line": 2086,
      "context": "console.log('Victory screen displayed');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/uiManager.js",
      "line": 2088,
      "context": "console.error('Error showing victory screen:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/uiManager.js",
      "line": 2102,
      "context": "console.log('Updating victory screen with stats:', stats);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "toLocaleString",
      "file": "src/uiManager.js",
      "line": 2106,
      "context": "this.elements.victoryFinalScore.textContent = stats.finalScore.toLocaleString();",
      "error": "Function 'toLocaleString' is not defined"
    },
    {
      "type": "function",
      "name": "toLocaleString",
      "file": "src/uiManager.js",
      "line": 2123,
      "context": "this.elements.victoryBaseScore.textContent = stats.baseScore.toLocaleString();",
      "error": "Function 'toLocaleString' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/uiManager.js",
      "line": 2135,
      "context": "const perfectBonusItem = document.getElementById('victory-perfect-bonus-item');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/uiManager.js",
      "line": 2147,
      "context": "const speedBonusItem = document.getElementById('victory-speed-bonus-item');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "getTotalPoints",
      "file": "src/uiManager.js",
      "line": 2161,
      "context": "const achievementPoints = this.achievementManager ? this.achievementManager.getTotalPoints() : 0;",
      "error": "Function 'getTotalPoints' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/uiManager.js",
      "line": 2172,
      "context": "console.error('Error updating victory screen content:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "slice",
      "file": "src/uiManager.js",
      "line": 2193,
      "context": "unlockedAchievements.slice(0, 6).forEach(achievement => {",
      "error": "Function 'slice' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/uiManager.js",
      "line": 2193,
      "context": "unlockedAchievements.slice(0, 6).forEach(achievement => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 2194,
      "context": "const iconElement = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/uiManager.js",
      "line": 2201,
      "context": "this.elements.victoryAchievementIcons.appendChild(iconElement);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 2205,
      "context": "const moreElement = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/uiManager.js",
      "line": 2209,
      "context": "this.elements.victoryAchievementIcons.appendChild(moreElement);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/uiManager.js",
      "line": 2213,
      "context": "console.error('Error updating achievement icons:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "toLowerCase",
      "file": "src/uiManager.js",
      "line": 2230,
      "context": "this.elements.victoryGrade.className = `completion-grade grade-${grade.toLowerCase()}`;",
      "error": "Function 'toLowerCase' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/uiManager.js",
      "line": 2233,
      "context": "console.error('Error updating performance grade:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "grade",
      "file": "src/uiManager.js",
      "line": 2240,
      "context": "* @returns {string} Performance grade (S, A, B, C, D, F)",
      "error": "Function 'grade' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 2284,
      "context": "this.elements.victoryScreen.classList.remove('show');",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/uiManager.js",
      "line": 2315,
      "context": "console.log('Available achievements:', achievements);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/uiManager.js",
      "line": 2317,
      "context": "console.log('Achievement display not fully implemented yet');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "toLocaleString",
      "file": "src/uiManager.js",
      "line": 2330,
      "context": "`🏆 Final Score: ${stats.finalScore.toLocaleString()}\\n` +",
      "error": "Function 'toLocaleString' is not defined"
    },
    {
      "type": "function",
      "name": "share",
      "file": "src/uiManager.js",
      "line": 2337,
      "context": "navigator.share({",
      "error": "Function 'share' is not defined"
    },
    {
      "type": "function",
      "name": "writeText",
      "file": "src/uiManager.js",
      "line": 2342,
      "context": "navigator.clipboard.writeText(shareText).then(() => {",
      "error": "Function 'writeText' is not defined"
    },
    {
      "type": "function",
      "name": "then",
      "file": "src/uiManager.js",
      "line": 2342,
      "context": "navigator.clipboard.writeText(shareText).then(() => {",
      "error": "Function 'then' is not defined"
    },
    {
      "type": "function",
      "name": "fallbackShare",
      "file": "src/uiManager.js",
      "line": 2345,
      "context": "this.fallbackShare(shareText);",
      "error": "Function 'fallbackShare' is not defined"
    },
    {
      "type": "function",
      "name": "fallbackShare",
      "file": "src/uiManager.js",
      "line": 2348,
      "context": "this.fallbackShare(shareText);",
      "error": "Function 'fallbackShare' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/uiManager.js",
      "line": 2351,
      "context": "console.error('Error sharing results:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 2365,
      "context": "this.elements.victoryScreen.classList.remove('show');",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/uiManager.js",
      "line": 2366,
      "context": "this.elements.victoryScreen.classList.add('hide');",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 2370,
      "context": "this.elements.victoryScreen.classList.remove('hide');",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/uiManager.js",
      "line": 2373,
      "context": "console.log('Victory screen hidden');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/uiManager.js",
      "line": 2375,
      "context": "console.error('Error hiding victory screen:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/uiManager.js",
      "line": 2384,
      "context": "console.log('Play again requested');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/uiManager.js",
      "line": 2396,
      "context": "console.error('Error handling play again:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/uiManager.js",
      "line": 2406,
      "context": "console.log('View achievements requested');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "showAchievementGallery",
      "file": "src/uiManager.js",
      "line": 2409,
      "context": "this.achievementManager.showAchievementGallery();",
      "error": "Function 'showAchievementGallery' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/uiManager.js",
      "line": 2415,
      "context": "console.error('Error viewing achievements:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/uiManager.js",
      "line": 2425,
      "context": "console.log('Share results requested');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "toLocaleString",
      "file": "src/uiManager.js",
      "line": 2431,
      "context": "`🏆 Final Score: ${stats.finalScore.toLocaleString()}\\n` +",
      "error": "Function 'toLocaleString' is not defined"
    },
    {
      "type": "function",
      "name": "share",
      "file": "src/uiManager.js",
      "line": 2440,
      "context": "navigator.share({",
      "error": "Function 'share' is not defined"
    },
    {
      "type": "function",
      "name": "then",
      "file": "src/uiManager.js",
      "line": 2443,
      "context": "}).then(() => {",
      "error": "Function 'then' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/uiManager.js",
      "line": 2446,
      "context": "console.log('Share failed, falling back to clipboard');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/uiManager.js",
      "line": 2455,
      "context": "console.error('Error sharing results:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "writeText",
      "file": "src/uiManager.js",
      "line": 2466,
      "context": "navigator.clipboard.writeText(text).then(() => {",
      "error": "Function 'writeText' is not defined"
    },
    {
      "type": "function",
      "name": "then",
      "file": "src/uiManager.js",
      "line": 2466,
      "context": "navigator.clipboard.writeText(text).then(() => {",
      "error": "Function 'then' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 2482,
      "context": "const textArea = document.createElement('textarea');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/uiManager.js",
      "line": 2487,
      "context": "document.body.appendChild(textArea);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "focus",
      "file": "src/uiManager.js",
      "line": 2488,
      "context": "textArea.focus();",
      "error": "Function 'focus' is not defined"
    },
    {
      "type": "function",
      "name": "select",
      "file": "src/uiManager.js",
      "line": 2489,
      "context": "textArea.select();",
      "error": "Function 'select' is not defined"
    },
    {
      "type": "function",
      "name": "execCommand",
      "file": "src/uiManager.js",
      "line": 2491,
      "context": "const successful = document.execCommand('copy');",
      "error": "Function 'execCommand' is not defined"
    },
    {
      "type": "function",
      "name": "removeChild",
      "file": "src/uiManager.js",
      "line": 2492,
      "context": "document.body.removeChild(textArea);",
      "error": "Function 'removeChild' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/uiManager.js",
      "line": 2500,
      "context": "console.error('Fallback copy failed:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "milliseconds",
      "file": "src/uiManager.js",
      "line": 2508,
      "context": "* @param {number} duration - How long to show the tooltip in milliseconds (default: 2000)",
      "error": "Function 'milliseconds' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/uiManager.js",
      "line": 2512,
      "context": "const existingTooltip = document.getElementById('game-tooltip');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 2514,
      "context": "existingTooltip.remove();",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 2518,
      "context": "const tooltip = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "translate",
      "file": "src/uiManager.js",
      "line": 2525,
      "context": "transform: translate(-50%, -50%);",
      "error": "Function 'translate' is not defined"
    },
    {
      "type": "function",
      "name": "rgba",
      "file": "src/uiManager.js",
      "line": 2526,
      "context": "background: rgba(0, 0, 0, 0.8);",
      "error": "Function 'rgba' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/uiManager.js",
      "line": 2538,
      "context": "if (!document.getElementById('tooltip-styles')) {",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 2540,
      "context": "const style = document.createElement('style');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "translate",
      "file": "src/uiManager.js",
      "line": 2544,
      "context": "0% { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }",
      "error": "Function 'translate' is not defined"
    },
    {
      "type": "function",
      "name": "scale",
      "file": "src/uiManager.js",
      "line": 2544,
      "context": "0% { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }",
      "error": "Function 'scale' is not defined"
    },
    {
      "type": "function",
      "name": "translate",
      "file": "src/uiManager.js",
      "line": 2545,
      "context": "10% { opacity: 1; transform: translate(-50%, -50%) scale(1); }",
      "error": "Function 'translate' is not defined"
    },
    {
      "type": "function",
      "name": "scale",
      "file": "src/uiManager.js",
      "line": 2545,
      "context": "10% { opacity: 1; transform: translate(-50%, -50%) scale(1); }",
      "error": "Function 'scale' is not defined"
    },
    {
      "type": "function",
      "name": "translate",
      "file": "src/uiManager.js",
      "line": 2546,
      "context": "90% { opacity: 1; transform: translate(-50%, -50%) scale(1); }",
      "error": "Function 'translate' is not defined"
    },
    {
      "type": "function",
      "name": "scale",
      "file": "src/uiManager.js",
      "line": 2546,
      "context": "90% { opacity: 1; transform: translate(-50%, -50%) scale(1); }",
      "error": "Function 'scale' is not defined"
    },
    {
      "type": "function",
      "name": "translate",
      "file": "src/uiManager.js",
      "line": 2547,
      "context": "100% { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }",
      "error": "Function 'translate' is not defined"
    },
    {
      "type": "function",
      "name": "scale",
      "file": "src/uiManager.js",
      "line": 2547,
      "context": "100% { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }",
      "error": "Function 'scale' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/uiManager.js",
      "line": 2550,
      "context": "document.head.appendChild(style);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/uiManager.js",
      "line": 2552,
      "context": "console.warn('UIManager: Failed to inject tooltip styles:', error);",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/uiManager.js",
      "line": 2555,
      "context": "document.body.appendChild(tooltip);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 2560,
      "context": "tooltip.remove();",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "skeleton",
      "file": "src/uiManager.js",
      "line": 2568,
      "context": "* @param {string} type - Type of skeleton ('question', 'answers', 'room-info', 'score')",
      "error": "Function 'skeleton' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/uiManager.js",
      "line": 2573,
      "context": "const loadingId = `skeleton-${Date.now()}`;",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/uiManager.js",
      "line": 2574,
      "context": "this.loadingStates.set(container, loadingId);",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 2578,
      "context": "container.setAttribute('data-original-content', originalContent);",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 2629,
      "context": "container.setAttribute('aria-busy', 'true');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/uiManager.js",
      "line": 2639,
      "context": "const loadingId = this.loadingStates.get(container);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "getAttribute",
      "file": "src/uiManager.js",
      "line": 2642,
      "context": "const originalContent = container.getAttribute('data-original-content');",
      "error": "Function 'getAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "removeAttribute",
      "file": "src/uiManager.js",
      "line": 2645,
      "context": "container.removeAttribute('data-original-content');",
      "error": "Function 'removeAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "removeAttribute",
      "file": "src/uiManager.js",
      "line": 2648,
      "context": "container.removeAttribute('aria-busy');",
      "error": "Function 'removeAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "delete",
      "file": "src/uiManager.js",
      "line": 2649,
      "context": "this.loadingStates.delete(container);",
      "error": "Function 'delete' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/uiManager.js",
      "line": 2658,
      "context": "const element = document.getElementById(elementId);",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/uiManager.js",
      "line": 2669,
      "context": "const element = document.getElementById(elementId);",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/uiManager.js",
      "line": 2682,
      "context": "console.log('🎮 Haptic feedback:', this.hapticSupported ? 'supported' : 'not supported');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "feedback",
      "file": "src/uiManager.js",
      "line": 2687,
      "context": "* @param {string} type - Type of feedback ('tap', 'success', 'error', 'warning', 'achievement')",
      "error": "Function 'feedback' is not defined"
    },
    {
      "type": "function",
      "name": "vibrate",
      "file": "src/uiManager.js",
      "line": 2708,
      "context": "navigator.vibrate(pattern);",
      "error": "Function 'vibrate' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/uiManager.js",
      "line": 2710,
      "context": "console.warn('Haptic feedback failed:', error);",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "effect",
      "file": "src/uiManager.js",
      "line": 2717,
      "context": "* @param {string} effectType - Type of effect ('sword', 'shield', 'crown', 'gem', 'sparkle')",
      "error": "Function 'effect' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/uiManager.js",
      "line": 2723,
      "context": "element.classList.add('micro-interaction');",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "effect",
      "file": "src/uiManager.js",
      "line": 2735,
      "context": "effect();",
      "error": "Function 'effect' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/uiManager.js",
      "line": 2745,
      "context": "if (!element.querySelector('.sword-gleam')) {",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 2746,
      "context": "const gleam = document.createElement('span');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "translateY",
      "file": "src/uiManager.js",
      "line": 2753,
      "context": "transform: translateY(-50%);",
      "error": "Function 'translateY' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/uiManager.js",
      "line": 2760,
      "context": "element.appendChild(gleam);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 2762,
      "context": "setTimeout(() => gleam.remove(), 600);",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/uiManager.js",
      "line": 2785,
      "context": "element.classList.add('score-increase');",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 2787,
      "context": "element.classList.remove('score-increase');",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/uiManager.js",
      "line": 2796,
      "context": "if (!element.querySelector('.gem-sparkle')) {",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 2797,
      "context": "const gem = document.createElement('span');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/uiManager.js",
      "line": 2807,
      "context": "element.appendChild(gem);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 2809,
      "context": "setTimeout(() => gem.remove(), 1000);",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/uiManager.js",
      "line": 2818,
      "context": "element.classList.add('achievement-sparkle');",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 2820,
      "context": "element.classList.remove('achievement-sparkle');",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/uiManager.js",
      "line": 2834,
      "context": "button.classList.add('interactive-element');",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "callback",
      "file": "src/uiManager.js",
      "line": 2849,
      "context": "callback(event);",
      "error": "Function 'callback' is not defined"
    },
    {
      "type": "function",
      "name": "contains",
      "file": "src/uiManager.js",
      "line": 2855,
      "context": "if (button.classList.contains('answer-btn')) {",
      "error": "Function 'contains' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/uiManager.js",
      "line": 2901,
      "context": "roomInfoElement.classList.add('room-transition');",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 2903,
      "context": "roomInfoElement.classList.remove('room-transition');",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/uiManager.js",
      "line": 2922,
      "context": "questionElement.classList.add('question-reveal');",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/uiManager.js",
      "line": 2924,
      "context": "questionElement.classList.remove('question-reveal');",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 2955,
      "context": "const buttons = document.querySelectorAll('#answer-buttons button:not([disabled])');",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "not",
      "file": "src/uiManager.js",
      "line": 2955,
      "context": "const buttons = document.querySelectorAll('#answer-buttons button:not([disabled])');",
      "error": "Function 'not' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/uiManager.js",
      "line": 2957,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "click",
      "file": "src/uiManager.js",
      "line": 2958,
      "context": "buttons[answerIndex].click();",
      "error": "Function 'click' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/uiManager.js",
      "line": 2966,
      "context": "console.log('♿ UI accessibility hooks added');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/uiManager.js",
      "line": 2973,
      "context": "const answerContainer = document.getElementById('answer-buttons');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 2976,
      "context": "answerContainer.setAttribute('role', 'radiogroup');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 2977,
      "context": "answerContainer.setAttribute('aria-label', 'Answer options');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 2980,
      "context": "answerContainer.setAttribute('aria-describedby', 'answer-instructions');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/uiManager.js",
      "line": 2982,
      "context": "if (!document.getElementById('answer-instructions')) {",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiManager.js",
      "line": 2983,
      "context": "const instructions = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/uiManager.js",
      "line": 2987,
      "context": "answerContainer.appendChild(instructions);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/uiManager.js",
      "line": 2996,
      "context": "const timerElement = document.getElementById('timer-text');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/uiManager.js",
      "line": 2999,
      "context": "timerElement.setAttribute('aria-live', 'off');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/uiManager.js",
      "line": 3020,
      "context": "const buttons = document.querySelectorAll('#answer-buttons button');",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "Map",
      "file": "src/animationManager.js",
      "line": 17,
      "context": "this.activeAnimations = new Map();",
      "error": "Function 'Map' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/animationManager.js",
      "line": 27,
      "context": "console.log('AnimationManager initialized with reduced motion:', this.reducedMotion);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "matchMedia",
      "file": "src/animationManager.js",
      "line": 36,
      "context": "return window.matchMedia('(prefers-reduced-motion: reduce)').matches;",
      "error": "Function 'matchMedia' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/animationManager.js",
      "line": 38,
      "context": "console.warn('Could not check reduced motion preference:', error);",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/animationManager.js",
      "line": 48,
      "context": "return `anim_${++this.animationCounter}_${Date.now()}`;",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/animationManager.js",
      "line": 61,
      "context": "throw new Error('Score element is required for animation');",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "toString",
      "file": "src/animationManager.js",
      "line": 69,
      "context": "element.textContent = toValue.toString();",
      "error": "Function 'toString' is not defined"
    },
    {
      "type": "function",
      "name": "resolve",
      "file": "src/animationManager.js",
      "line": 70,
      "context": "return Promise.resolve();",
      "error": "Function 'resolve' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/animationManager.js",
      "line": 73,
      "context": "console.log(`Starting score animation from ${fromValue} to ${toValue}`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/animationManager.js",
      "line": 76,
      "context": "const startTime = performance.now();",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "Promise",
      "file": "src/animationManager.js",
      "line": 79,
      "context": "return new Promise((resolve) => {",
      "error": "Function 'Promise' is not defined"
    },
    {
      "type": "function",
      "name": "min",
      "file": "src/animationManager.js",
      "line": 82,
      "context": "const progress = Math.min(elapsed / duration, 1);",
      "error": "Function 'min' is not defined"
    },
    {
      "type": "function",
      "name": "pow",
      "file": "src/animationManager.js",
      "line": 85,
      "context": "const easedProgress = 1 - Math.pow(1 - progress, 3);",
      "error": "Function 'pow' is not defined"
    },
    {
      "type": "function",
      "name": "round",
      "file": "src/animationManager.js",
      "line": 86,
      "context": "const currentValue = Math.round(fromValue + (difference * easedProgress));",
      "error": "Function 'round' is not defined"
    },
    {
      "type": "function",
      "name": "toString",
      "file": "src/animationManager.js",
      "line": 88,
      "context": "element.textContent = currentValue.toString();",
      "error": "Function 'toString' is not defined"
    },
    {
      "type": "function",
      "name": "scale",
      "file": "src/animationManager.js",
      "line": 92,
      "context": "element.style.transform = `scale(${1 + (progress * 0.2)})`;",
      "error": "Function 'scale' is not defined"
    },
    {
      "type": "function",
      "name": "scale",
      "file": "src/animationManager.js",
      "line": 96,
      "context": "element.style.transform = `scale(${1.2 - (fadeProgress * 0.2)})`;",
      "error": "Function 'scale' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/animationManager.js",
      "line": 102,
      "context": "this.activeAnimations.set(animationId, frameId);",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "delete",
      "file": "src/animationManager.js",
      "line": 107,
      "context": "this.activeAnimations.delete(animationId);",
      "error": "Function 'delete' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/animationManager.js",
      "line": 110,
      "context": "console.log(`Score animation completed in ${elapsed.toFixed(2)}ms`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "toFixed",
      "file": "src/animationManager.js",
      "line": 110,
      "context": "console.log(`Score animation completed in ${elapsed.toFixed(2)}ms`);",
      "error": "Function 'toFixed' is not defined"
    },
    {
      "type": "function",
      "name": "resolve",
      "file": "src/animationManager.js",
      "line": 111,
      "context": "resolve();",
      "error": "Function 'resolve' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/animationManager.js",
      "line": 119,
      "context": "console.error('Score animation failed:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "toString",
      "file": "src/animationManager.js",
      "line": 120,
      "context": "element.textContent = toValue.toString();",
      "error": "Function 'toString' is not defined"
    },
    {
      "type": "function",
      "name": "delete",
      "file": "src/animationManager.js",
      "line": 121,
      "context": "this.activeAnimations.delete(animationId);",
      "error": "Function 'delete' is not defined"
    },
    {
      "type": "function",
      "name": "animateAnswerFeedback",
      "file": "src/animationManager.js",
      "line": 133,
      "context": "async animateAnswerFeedback(isCorrect, element, options = {}) {",
      "error": "Function 'animateAnswerFeedback' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/animationManager.js",
      "line": 135,
      "context": "throw new Error('Element is required for answer feedback animation');",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/animationManager.js",
      "line": 146,
      "context": "console.log(`Starting answer feedback animation: ${isCorrect ? 'correct' : 'incorrect'}`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "assign",
      "file": "src/animationManager.js",
      "line": 162,
      "context": "Object.assign(element.style, {",
      "error": "Function 'assign' is not defined"
    },
    {
      "type": "function",
      "name": "resolve",
      "file": "src/animationManager.js",
      "line": 172,
      "context": "return Promise.resolve();",
      "error": "Function 'resolve' is not defined"
    },
    {
      "type": "function",
      "name": "Promise",
      "file": "src/animationManager.js",
      "line": 175,
      "context": "return new Promise((resolve) => {",
      "error": "Function 'Promise' is not defined"
    },
    {
      "type": "function",
      "name": "scale",
      "file": "src/animationManager.js",
      "line": 178,
      "context": "element.style.transform = 'scale(1.05)';",
      "error": "Function 'scale' is not defined"
    },
    {
      "type": "function",
      "name": "scale",
      "file": "src/animationManager.js",
      "line": 186,
      "context": "element.style.transform = 'scale(1)';",
      "error": "Function 'scale' is not defined"
    },
    {
      "type": "function",
      "name": "delete",
      "file": "src/animationManager.js",
      "line": 194,
      "context": "this.activeAnimations.delete(animationId);",
      "error": "Function 'delete' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/animationManager.js",
      "line": 196,
      "context": "console.log('Answer feedback animation completed');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "resolve",
      "file": "src/animationManager.js",
      "line": 197,
      "context": "resolve();",
      "error": "Function 'resolve' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/animationManager.js",
      "line": 205,
      "context": "console.error('Answer feedback animation failed:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "delete",
      "file": "src/animationManager.js",
      "line": 206,
      "context": "this.activeAnimations.delete(animationId);",
      "error": "Function 'delete' is not defined"
    },
    {
      "type": "function",
      "name": "animateRoomTransition",
      "file": "src/animationManager.js",
      "line": 218,
      "context": "async animateRoomTransition(roomElement, transition, options = {}) {",
      "error": "Function 'animateRoomTransition' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/animationManager.js",
      "line": 220,
      "context": "throw new Error('Room element is required for transition animation');",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/animationManager.js",
      "line": 227,
      "context": "console.log(`Starting room transition: ${transition.from} → ${transition.to}`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "resolve",
      "file": "src/animationManager.js",
      "line": 232,
      "context": "return Promise.resolve();",
      "error": "Function 'resolve' is not defined"
    },
    {
      "type": "function",
      "name": "Promise",
      "file": "src/animationManager.js",
      "line": 235,
      "context": "return new Promise((resolve) => {",
      "error": "Function 'Promise' is not defined"
    },
    {
      "type": "function",
      "name": "delete",
      "file": "src/animationManager.js",
      "line": 254,
      "context": "this.activeAnimations.delete(animationId);",
      "error": "Function 'delete' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/animationManager.js",
      "line": 256,
      "context": "console.log('Room transition animation completed');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "resolve",
      "file": "src/animationManager.js",
      "line": 257,
      "context": "resolve();",
      "error": "Function 'resolve' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/animationManager.js",
      "line": 263,
      "context": "console.error('Room transition animation failed:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "delete",
      "file": "src/animationManager.js",
      "line": 264,
      "context": "this.activeAnimations.delete(animationId);",
      "error": "Function 'delete' is not defined"
    },
    {
      "type": "function",
      "name": "animateAchievementUnlock",
      "file": "src/animationManager.js",
      "line": 276,
      "context": "async animateAchievementUnlock(achievement, container, options = {}) {",
      "error": "Function 'animateAchievementUnlock' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/animationManager.js",
      "line": 278,
      "context": "throw new Error('Achievement and container are required for unlock animation');",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/animationManager.js",
      "line": 285,
      "context": "console.log(`Starting achievement unlock animation: ${achievement.name}`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/animationManager.js",
      "line": 290,
      "context": "container.appendChild(notification);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "removeChild",
      "file": "src/animationManager.js",
      "line": 297,
      "context": "notification.parentNode.removeChild(notification);",
      "error": "Function 'removeChild' is not defined"
    },
    {
      "type": "function",
      "name": "resolve",
      "file": "src/animationManager.js",
      "line": 300,
      "context": "return Promise.resolve();",
      "error": "Function 'resolve' is not defined"
    },
    {
      "type": "function",
      "name": "Promise",
      "file": "src/animationManager.js",
      "line": 303,
      "context": "return new Promise((resolve) => {",
      "error": "Function 'Promise' is not defined"
    },
    {
      "type": "function",
      "name": "translateY",
      "file": "src/animationManager.js",
      "line": 306,
      "context": "notification.style.transform = 'translateY(0) scale(1)';",
      "error": "Function 'translateY' is not defined"
    },
    {
      "type": "function",
      "name": "scale",
      "file": "src/animationManager.js",
      "line": 306,
      "context": "notification.style.transform = 'translateY(0) scale(1)';",
      "error": "Function 'scale' is not defined"
    },
    {
      "type": "function",
      "name": "translateY",
      "file": "src/animationManager.js",
      "line": 311,
      "context": "notification.style.transform = 'translateY(0) scale(0.95)';",
      "error": "Function 'translateY' is not defined"
    },
    {
      "type": "function",
      "name": "scale",
      "file": "src/animationManager.js",
      "line": 311,
      "context": "notification.style.transform = 'translateY(0) scale(0.95)';",
      "error": "Function 'scale' is not defined"
    },
    {
      "type": "function",
      "name": "translateY",
      "file": "src/animationManager.js",
      "line": 316,
      "context": "notification.style.transform = 'translateY(-20px) scale(0.8)';",
      "error": "Function 'translateY' is not defined"
    },
    {
      "type": "function",
      "name": "scale",
      "file": "src/animationManager.js",
      "line": 316,
      "context": "notification.style.transform = 'translateY(-20px) scale(0.8)';",
      "error": "Function 'scale' is not defined"
    },
    {
      "type": "function",
      "name": "removeChild",
      "file": "src/animationManager.js",
      "line": 320,
      "context": "notification.parentNode.removeChild(notification);",
      "error": "Function 'removeChild' is not defined"
    },
    {
      "type": "function",
      "name": "delete",
      "file": "src/animationManager.js",
      "line": 322,
      "context": "this.activeAnimations.delete(animationId);",
      "error": "Function 'delete' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/animationManager.js",
      "line": 324,
      "context": "console.log('Achievement unlock animation completed');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "resolve",
      "file": "src/animationManager.js",
      "line": 325,
      "context": "resolve();",
      "error": "Function 'resolve' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/animationManager.js",
      "line": 331,
      "context": "console.error('Achievement unlock animation failed:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "delete",
      "file": "src/animationManager.js",
      "line": 332,
      "context": "this.activeAnimations.delete(animationId);",
      "error": "Function 'delete' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/animationManager.js",
      "line": 343,
      "context": "const notification = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "gradient",
      "file": "src/animationManager.js",
      "line": 349,
      "context": "background: linear-gradient(135deg, #fef5e7, #fed7aa);",
      "error": "Function 'gradient' is not defined"
    },
    {
      "type": "function",
      "name": "rgba",
      "file": "src/animationManager.js",
      "line": 353,
      "context": "box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);",
      "error": "Function 'rgba' is not defined"
    },
    {
      "type": "function",
      "name": "translateY",
      "file": "src/animationManager.js",
      "line": 357,
      "context": "transform: translateY(-20px) scale(0.8);",
      "error": "Function 'translateY' is not defined"
    },
    {
      "type": "function",
      "name": "scale",
      "file": "src/animationManager.js",
      "line": 357,
      "context": "transform: translateY(-20px) scale(0.8);",
      "error": "Function 'scale' is not defined"
    },
    {
      "type": "function",
      "name": "animateLoadingState",
      "file": "src/animationManager.js",
      "line": 388,
      "context": "async animateLoadingState(element, isLoading) {",
      "error": "Function 'animateLoadingState' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/animationManager.js",
      "line": 390,
      "context": "throw new Error('Element is required for loading animation');",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/animationManager.js",
      "line": 395,
      "context": "element.classList.add('loading-state');",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/animationManager.js",
      "line": 401,
      "context": "element.classList.remove('loading-state');",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "resolve",
      "file": "src/animationManager.js",
      "line": 406,
      "context": "return Promise.resolve();",
      "error": "Function 'resolve' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/animationManager.js",
      "line": 409,
      "context": "console.error('Loading state animation failed:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "keys",
      "file": "src/animationManager.js",
      "line": 421,
      "context": "Object.keys(originalStyles).forEach(property => {",
      "error": "Function 'keys' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/animationManager.js",
      "line": 421,
      "context": "Object.keys(originalStyles).forEach(property => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/animationManager.js",
      "line": 425,
      "context": "console.warn('Failed to restore styles:', error);",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/animationManager.js",
      "line": 435,
      "context": "const frameId = this.activeAnimations.get(animationId);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "delete",
      "file": "src/animationManager.js",
      "line": 438,
      "context": "this.activeAnimations.delete(animationId);",
      "error": "Function 'delete' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/animationManager.js",
      "line": 439,
      "context": "console.log(`Animation ${animationId} cancelled`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/animationManager.js",
      "line": 442,
      "context": "console.warn('Failed to cancel animation:', error);",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/animationManager.js",
      "line": 451,
      "context": "this.activeAnimations.forEach((frameId, animationId) => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "clear",
      "file": "src/animationManager.js",
      "line": 454,
      "context": "this.activeAnimations.clear();",
      "error": "Function 'clear' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/animationManager.js",
      "line": 455,
      "context": "console.log('All animations cancelled');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/animationManager.js",
      "line": 457,
      "context": "console.warn('Failed to cancel all animations:', error);",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "round",
      "file": "src/animationManager.js",
      "line": 473,
      "context": "averageDuration: Math.round(avgDuration * 100) / 100,",
      "error": "Function 'round' is not defined"
    },
    {
      "type": "function",
      "name": "testPerformance",
      "file": "src/animationManager.js",
      "line": 483,
      "context": "async testPerformance(iterations = 10) {",
      "error": "Function 'testPerformance' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/animationManager.js",
      "line": 484,
      "context": "console.log(`Starting animation performance test with ${iterations} iterations`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/animationManager.js",
      "line": 486,
      "context": "const testElement = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/animationManager.js",
      "line": 488,
      "context": "document.body.appendChild(testElement);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/animationManager.js",
      "line": 490,
      "context": "const startTime = performance.now();",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/animationManager.js",
      "line": 497,
      "context": "const endTime = performance.now();",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "round",
      "file": "src/animationManager.js",
      "line": 502,
      "context": "totalTime: Math.round(totalTime),",
      "error": "Function 'round' is not defined"
    },
    {
      "type": "function",
      "name": "round",
      "file": "src/animationManager.js",
      "line": 503,
      "context": "averageTime: Math.round(totalTime / iterations),",
      "error": "Function 'round' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/animationManager.js",
      "line": 507,
      "context": "console.log('Animation performance test results:', results);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "removeChild",
      "file": "src/animationManager.js",
      "line": 511,
      "context": "document.body.removeChild(testElement);",
      "error": "Function 'removeChild' is not defined"
    },
    {
      "type": "function",
      "name": "rotate",
      "file": "src/animationManager.js",
      "line": 537,
      "context": "0% { transform: rotate(0deg); }",
      "error": "Function 'rotate' is not defined"
    },
    {
      "type": "function",
      "name": "rotate",
      "file": "src/animationManager.js",
      "line": 538,
      "context": "100% { transform: rotate(360deg); }",
      "error": "Function 'rotate' is not defined"
    },
    {
      "type": "function",
      "name": "media",
      "file": "src/animationManager.js",
      "line": 545,
      "context": "@media (prefers-reduced-motion: reduce) {",
      "error": "Function 'media' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/animationManager.js",
      "line": 555,
      "context": "const styleElement = document.createElement('style');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/animationManager.js",
      "line": 557,
      "context": "document.head.appendChild(styleElement);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "Map",
      "file": "src/achievementManager.js",
      "line": 11,
      "context": "this.achievements = new Map(); // All available achievements",
      "error": "Function 'Map' is not defined"
    },
    {
      "type": "function",
      "name": "Set",
      "file": "src/achievementManager.js",
      "line": 12,
      "context": "this.unlockedAchievements = new Set(); // Achievement IDs that are unlocked",
      "error": "Function 'Set' is not defined"
    },
    {
      "type": "function",
      "name": "Map",
      "file": "src/achievementManager.js",
      "line": 13,
      "context": "this.achievementProgress = new Map(); // Progress tracking for each achievement",
      "error": "Function 'Map' is not defined"
    },
    {
      "type": "function",
      "name": "Set",
      "file": "src/achievementManager.js",
      "line": 24,
      "context": "roomsVisited: new Set(),",
      "error": "Function 'Set' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/achievementManager.js",
      "line": 25,
      "context": "startTime: Date.now(),",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/achievementManager.js",
      "line": 32,
      "context": "console.log('AchievementManager initialized');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "loadAchievements",
      "file": "src/achievementManager.js",
      "line": 41,
      "context": "await this.loadAchievements();",
      "error": "Function 'loadAchievements' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/achievementManager.js",
      "line": 45,
      "context": "console.log(`Loaded ${this.achievements.size} achievements`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/achievementManager.js",
      "line": 47,
      "context": "console.error('Failed to initialize AchievementManager:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "loadAchievements",
      "file": "src/achievementManager.js",
      "line": 54,
      "context": "async loadAchievements() {",
      "error": "Function 'loadAchievements' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/achievementManager.js",
      "line": 59,
      "context": "throw new Error('Achievement data not available. Ensure DataLoader.loadGameData() was called first.');",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "loadGameData",
      "file": "src/achievementManager.js",
      "line": 59,
      "context": "throw new Error('Achievement data not available. Ensure DataLoader.loadGameData() was called first.');",
      "error": "Function 'loadGameData' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/achievementManager.js",
      "line": 63,
      "context": "gameData.achievements.forEach(achievement => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/achievementManager.js",
      "line": 64,
      "context": "this.achievements.set(achievement.id, {",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/achievementManager.js",
      "line": 72,
      "context": "console.log('Achievement definitions loaded:', this.achievements.size);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/achievementManager.js",
      "line": 74,
      "context": "console.error('Failed to load achievements:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "getItem",
      "file": "src/achievementManager.js",
      "line": 118,
      "context": "const saved = localStorage.getItem('lobeLabyrinth_achievements');",
      "error": "Function 'getItem' is not defined"
    },
    {
      "type": "function",
      "name": "parse",
      "file": "src/achievementManager.js",
      "line": 120,
      "context": "const data = JSON.parse(saved);",
      "error": "Function 'parse' is not defined"
    },
    {
      "type": "function",
      "name": "Set",
      "file": "src/achievementManager.js",
      "line": 124,
      "context": "this.unlockedAchievements = new Set(data.unlockedAchievements);",
      "error": "Function 'Set' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/achievementManager.js",
      "line": 127,
      "context": "this.unlockedAchievements.forEach(achievementId => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/achievementManager.js",
      "line": 128,
      "context": "const achievement = this.achievements.get(achievementId);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/achievementManager.js",
      "line": 131,
      "context": "achievement.unlockedAt = data.unlockTimes?.[achievementId] || Date.now();",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "Map",
      "file": "src/achievementManager.js",
      "line": 138,
      "context": "this.achievementProgress = new Map(Object.entries(data.achievementProgress));",
      "error": "Function 'Map' is not defined"
    },
    {
      "type": "function",
      "name": "entries",
      "file": "src/achievementManager.js",
      "line": 138,
      "context": "this.achievementProgress = new Map(Object.entries(data.achievementProgress));",
      "error": "Function 'entries' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/achievementManager.js",
      "line": 144,
      "context": "console.log(`Loaded ${this.unlockedAchievements.size} unlocked achievements`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/achievementManager.js",
      "line": 147,
      "context": "console.error('Failed to load achievement progress:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/achievementManager.js",
      "line": 157,
      "context": "this.achievements.forEach((achievement, id) => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "from",
      "file": "src/achievementManager.js",
      "line": 164,
      "context": "unlockedAchievements: Array.from(this.unlockedAchievements),",
      "error": "Function 'from' is not defined"
    },
    {
      "type": "function",
      "name": "fromEntries",
      "file": "src/achievementManager.js",
      "line": 165,
      "context": "achievementProgress: Object.fromEntries(this.achievementProgress),",
      "error": "Function 'fromEntries' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/achievementManager.js",
      "line": 168,
      "context": "lastSaved: Date.now()",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "setItem",
      "file": "src/achievementManager.js",
      "line": 171,
      "context": "localStorage.setItem('lobeLabyrinth_achievements', JSON.stringify(data));",
      "error": "Function 'setItem' is not defined"
    },
    {
      "type": "function",
      "name": "stringify",
      "file": "src/achievementManager.js",
      "line": 171,
      "context": "localStorage.setItem('lobeLabyrinth_achievements', JSON.stringify(data));",
      "error": "Function 'stringify' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/achievementManager.js",
      "line": 173,
      "context": "console.error('Failed to save achievement progress:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/achievementManager.js",
      "line": 196,
      "context": "console.log('Achievement event listeners set up');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "Set",
      "file": "src/achievementManager.js",
      "line": 205,
      "context": "this.sessionStats.roomsVisited = new Set(gameSnapshot.visitedRooms);",
      "error": "Function 'Set' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/achievementManager.js",
      "line": 211,
      "context": "this.sessionStats.correctAnswers = Math.floor(gameSnapshot.score / 50); // Rough estimate",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "max",
      "file": "src/achievementManager.js",
      "line": 227,
      "context": "this.sessionStats.maxConsecutiveCorrect = Math.max(",
      "error": "Function 'max' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/achievementManager.js",
      "line": 234,
      "context": "this.sessionStats.quickAnswers.push(timeElapsed);",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/achievementManager.js",
      "line": 242,
      "context": "this.sessionStats.lastAnswerTimes.push({",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/achievementManager.js",
      "line": 243,
      "context": "time: Date.now(),",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "shift",
      "file": "src/achievementManager.js",
      "line": 250,
      "context": "this.sessionStats.lastAnswerTimes.shift();",
      "error": "Function 'shift' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/achievementManager.js",
      "line": 263,
      "context": "this.sessionStats.roomsVisited.add(roomId);",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/achievementManager.js",
      "line": 281,
      "context": "this.achievements.forEach((achievement, achievementId) => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/achievementManager.js",
      "line": 312,
      "context": "const quickCount = this.sessionStats.quickAnswers.filter(",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "slice",
      "file": "src/achievementManager.js",
      "line": 323,
      "context": "const recent = this.sessionStats.lastAnswerTimes.slice(-(condition.value + 1));",
      "error": "Function 'slice' is not defined"
    },
    {
      "type": "function",
      "name": "slice",
      "file": "src/achievementManager.js",
      "line": 324,
      "context": "const wrongAnswers = recent.slice(0, -1).every(answer => !answer.correct);",
      "error": "Function 'slice' is not defined"
    },
    {
      "type": "function",
      "name": "every",
      "file": "src/achievementManager.js",
      "line": 324,
      "context": "const wrongAnswers = recent.slice(0, -1).every(answer => !answer.correct);",
      "error": "Function 'every' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/achievementManager.js",
      "line": 339,
      "context": "const playTime = Date.now() - this.sessionStats.startTime;",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/achievementManager.js",
      "line": 349,
      "context": "return this.sessionStats.roomsVisited.has(condition.value);",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/achievementManager.js",
      "line": 358,
      "context": "console.warn('Unknown achievement condition type:', condition.type);",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/achievementManager.js",
      "line": 381,
      "context": "currentProgress = this.sessionStats.quickAnswers.filter(",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/achievementManager.js",
      "line": 395,
      "context": "this.achievementProgress.set(achievementId, Math.min(currentProgress, achievement.maxProgress));",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "min",
      "file": "src/achievementManager.js",
      "line": 395,
      "context": "this.achievementProgress.set(achievementId, Math.min(currentProgress, achievement.maxProgress));",
      "error": "Function 'min' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/achievementManager.js",
      "line": 396,
      "context": "achievement.progress = this.achievementProgress.get(achievementId);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/achievementManager.js",
      "line": 403,
      "context": "const achievement = this.achievements.get(achievementId);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/achievementManager.js",
      "line": 410,
      "context": "achievement.unlockedAt = Date.now();",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/achievementManager.js",
      "line": 411,
      "context": "this.unlockedAchievements.add(achievementId);",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/achievementManager.js",
      "line": 426,
      "context": "console.log(`🏆 Achievement unlocked: ${achievement.name} (+${achievement.points} points)`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "from",
      "file": "src/achievementManager.js",
      "line": 433,
      "context": "return Array.from(this.achievements.values()).map(achievement => ({",
      "error": "Function 'from' is not defined"
    },
    {
      "type": "function",
      "name": "values",
      "file": "src/achievementManager.js",
      "line": 433,
      "context": "return Array.from(this.achievements.values()).map(achievement => ({",
      "error": "Function 'values' is not defined"
    },
    {
      "type": "function",
      "name": "map",
      "file": "src/achievementManager.js",
      "line": 433,
      "context": "return Array.from(this.achievements.values()).map(achievement => ({",
      "error": "Function 'map' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/achievementManager.js",
      "line": 443,
      "context": "return this.getAllAchievements().filter(achievement =>",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/achievementManager.js",
      "line": 452,
      "context": "return this.getAllAchievements().filter(achievement => achievement.unlocked);",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "progress",
      "file": "src/achievementManager.js",
      "line": 456,
      "context": "* Get achievements in progress (not unlocked but with some progress)",
      "error": "Function 'progress' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/achievementManager.js",
      "line": 459,
      "context": "return this.getAllAchievements().filter(achievement =>",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "round",
      "file": "src/achievementManager.js",
      "line": 475,
      "context": "percentage: Math.round(percentage * 10) / 10,",
      "error": "Function 'round' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/achievementManager.js",
      "line": 487,
      "context": "this.achievements.forEach(achievement => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "keys",
      "file": "src/achievementManager.js",
      "line": 500,
      "context": "Object.keys(categories).forEach(category => {",
      "error": "Function 'keys' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/achievementManager.js",
      "line": 500,
      "context": "Object.keys(categories).forEach(category => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "progress",
      "file": "src/achievementManager.js",
      "line": 509,
      "context": "* Reset all achievement progress (for new game)",
      "error": "Function 'progress' is not defined"
    },
    {
      "type": "function",
      "name": "clear",
      "file": "src/achievementManager.js",
      "line": 512,
      "context": "this.unlockedAchievements.clear();",
      "error": "Function 'clear' is not defined"
    },
    {
      "type": "function",
      "name": "clear",
      "file": "src/achievementManager.js",
      "line": 513,
      "context": "this.achievementProgress.clear();",
      "error": "Function 'clear' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/achievementManager.js",
      "line": 517,
      "context": "this.achievements.forEach(achievement => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "Set",
      "file": "src/achievementManager.js",
      "line": 531,
      "context": "roomsVisited: new Set(),",
      "error": "Function 'Set' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/achievementManager.js",
      "line": 532,
      "context": "startTime: Date.now(),",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "removeItem",
      "file": "src/achievementManager.js",
      "line": 537,
      "context": "localStorage.removeItem('lobeLabyrinth_achievements');",
      "error": "Function 'removeItem' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/achievementManager.js",
      "line": 539,
      "context": "console.log('Achievement progress reset');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/achievementManager.js",
      "line": 550,
      "context": "this.eventListeners[eventType].push(callback);",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "indexOf",
      "file": "src/achievementManager.js",
      "line": 555,
      "context": "const index = this.eventListeners[eventType].indexOf(callback);",
      "error": "Function 'indexOf' is not defined"
    },
    {
      "type": "function",
      "name": "splice",
      "file": "src/achievementManager.js",
      "line": 557,
      "context": "this.eventListeners[eventType].splice(index, 1);",
      "error": "Function 'splice' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/achievementManager.js",
      "line": 564,
      "context": "this.eventListeners[eventType].forEach(callback => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "callback",
      "file": "src/achievementManager.js",
      "line": 566,
      "context": "callback({ detail: data });",
      "error": "Function 'callback' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/achievementManager.js",
      "line": 568,
      "context": "console.error(`Error in ${eventType} event listener:`, error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "fromEntries",
      "file": "src/achievementManager.js",
      "line": 582,
      "context": "achievementProgress: Object.fromEntries(this.achievementProgress),",
      "error": "Function 'fromEntries' is not defined"
    },
    {
      "type": "function",
      "name": "getContext",
      "file": "src/mapRenderer.js",
      "line": 15,
      "context": "this.ctx = canvas.getContext('2d');",
      "error": "Function 'getContext' is not defined"
    },
    {
      "type": "function",
      "name": "Map",
      "file": "src/mapRenderer.js",
      "line": 49,
      "context": "this.roomPositions = new Map();",
      "error": "Function 'Map' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/mapRenderer.js",
      "line": 55,
      "context": "console.log('MapRenderer initialized with canvas size:', this.mapWidth, 'x', this.mapHeight);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/mapRenderer.js",
      "line": 75,
      "context": "this.roomPositions.set('entrance_hall', {",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/mapRenderer.js",
      "line": 80,
      "context": "this.roomPositions.set('library', {",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/mapRenderer.js",
      "line": 85,
      "context": "this.roomPositions.set('armory', {",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/mapRenderer.js",
      "line": 90,
      "context": "this.roomPositions.set('observatory', {",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/mapRenderer.js",
      "line": 95,
      "context": "this.roomPositions.set('throne_room', {",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/mapRenderer.js",
      "line": 100,
      "context": "this.roomPositions.set('secret_chamber', {",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/mapRenderer.js",
      "line": 105,
      "context": "console.log('Room positions configured:', this.roomPositions);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/mapRenderer.js",
      "line": 133,
      "context": "this.canvas.setAttribute('tabindex', '0');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/mapRenderer.js",
      "line": 134,
      "context": "this.canvas.setAttribute('role', 'application');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/mapRenderer.js",
      "line": 135,
      "context": "this.canvas.setAttribute('aria-label', 'Castle map - Use arrow keys to navigate between rooms');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "render",
      "file": "src/mapRenderer.js",
      "line": 139,
      "context": "this.render();",
      "error": "Function 'render' is not defined"
    },
    {
      "type": "function",
      "name": "render",
      "file": "src/mapRenderer.js",
      "line": 143,
      "context": "this.render();",
      "error": "Function 'render' is not defined"
    },
    {
      "type": "function",
      "name": "render",
      "file": "src/mapRenderer.js",
      "line": 155,
      "context": "async render() {",
      "error": "Function 'render' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/mapRenderer.js",
      "line": 157,
      "context": "console.log('Rendering map...');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "renderConnections",
      "file": "src/mapRenderer.js",
      "line": 167,
      "context": "await this.renderConnections(rooms);",
      "error": "Function 'renderConnections' is not defined"
    },
    {
      "type": "function",
      "name": "renderRooms",
      "file": "src/mapRenderer.js",
      "line": 170,
      "context": "await this.renderRooms(rooms);",
      "error": "Function 'renderRooms' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/mapRenderer.js",
      "line": 175,
      "context": "console.log('Map rendering complete');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/mapRenderer.js",
      "line": 177,
      "context": "console.error('Error rendering map:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "fillRect",
      "file": "src/mapRenderer.js",
      "line": 187,
      "context": "this.ctx.fillRect(0, 0, this.mapWidth, this.mapHeight);",
      "error": "Function 'fillRect' is not defined"
    },
    {
      "type": "function",
      "name": "renderRooms",
      "file": "src/mapRenderer.js",
      "line": 194,
      "context": "async renderRooms(rooms) {",
      "error": "Function 'renderRooms' is not defined"
    },
    {
      "type": "function",
      "name": "renderRoom",
      "file": "src/mapRenderer.js",
      "line": 196,
      "context": "await this.renderRoom(room);",
      "error": "Function 'renderRoom' is not defined"
    },
    {
      "type": "function",
      "name": "renderRoom",
      "file": "src/mapRenderer.js",
      "line": 204,
      "context": "async renderRoom(room) {",
      "error": "Function 'renderRoom' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/mapRenderer.js",
      "line": 205,
      "context": "const position = this.roomPositions.get(room.id);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/mapRenderer.js",
      "line": 207,
      "context": "console.warn(`No position defined for room: ${room.id}`);",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "shape",
      "file": "src/mapRenderer.js",
      "line": 226,
      "context": "* Draw the basic room shape (rectangle with rounded corners)",
      "error": "Function 'shape' is not defined"
    },
    {
      "type": "function",
      "name": "beginPath",
      "file": "src/mapRenderer.js",
      "line": 242,
      "context": "ctx.beginPath();",
      "error": "Function 'beginPath' is not defined"
    },
    {
      "type": "function",
      "name": "roundRect",
      "file": "src/mapRenderer.js",
      "line": 243,
      "context": "ctx.roundRect(left, top, size, size, radius);",
      "error": "Function 'roundRect' is not defined"
    },
    {
      "type": "function",
      "name": "fill",
      "file": "src/mapRenderer.js",
      "line": 247,
      "context": "ctx.fill();",
      "error": "Function 'fill' is not defined"
    },
    {
      "type": "function",
      "name": "stroke",
      "file": "src/mapRenderer.js",
      "line": 252,
      "context": "ctx.stroke();",
      "error": "Function 'stroke' is not defined"
    },
    {
      "type": "function",
      "name": "fillText",
      "file": "src/mapRenderer.js",
      "line": 268,
      "context": "this.ctx.fillText(icon, x, y - 10);",
      "error": "Function 'fillText' is not defined"
    },
    {
      "type": "function",
      "name": "fillText",
      "file": "src/mapRenderer.js",
      "line": 282,
      "context": "this.ctx.fillText(name, x, y + 25);",
      "error": "Function 'fillText' is not defined"
    },
    {
      "type": "function",
      "name": "renderConnections",
      "file": "src/mapRenderer.js",
      "line": 289,
      "context": "async renderConnections(rooms) {",
      "error": "Function 'renderConnections' is not defined"
    },
    {
      "type": "function",
      "name": "renderRoomConnections",
      "file": "src/mapRenderer.js",
      "line": 291,
      "context": "await this.renderRoomConnections(room);",
      "error": "Function 'renderRoomConnections' is not defined"
    },
    {
      "type": "function",
      "name": "renderRoomConnections",
      "file": "src/mapRenderer.js",
      "line": 299,
      "context": "async renderRoomConnections(room) {",
      "error": "Function 'renderRoomConnections' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/mapRenderer.js",
      "line": 300,
      "context": "const roomPos = this.roomPositions.get(room.id);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/mapRenderer.js",
      "line": 304,
      "context": "const connectionPos = this.roomPositions.get(connectionId);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "beginPath",
      "file": "src/mapRenderer.js",
      "line": 317,
      "context": "this.ctx.beginPath();",
      "error": "Function 'beginPath' is not defined"
    },
    {
      "type": "function",
      "name": "moveTo",
      "file": "src/mapRenderer.js",
      "line": 318,
      "context": "this.ctx.moveTo(fromPos.x, fromPos.y);",
      "error": "Function 'moveTo' is not defined"
    },
    {
      "type": "function",
      "name": "lineTo",
      "file": "src/mapRenderer.js",
      "line": 319,
      "context": "this.ctx.lineTo(toPos.x, toPos.y);",
      "error": "Function 'lineTo' is not defined"
    },
    {
      "type": "function",
      "name": "stroke",
      "file": "src/mapRenderer.js",
      "line": 322,
      "context": "this.ctx.stroke();",
      "error": "Function 'stroke' is not defined"
    },
    {
      "type": "function",
      "name": "state",
      "file": "src/mapRenderer.js",
      "line": 328,
      "context": "* @returns {string} Room state ('current', 'visited', 'accessible', 'locked')",
      "error": "Function 'state' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/mapRenderer.js",
      "line": 333,
      "context": "} else if (this.gameState.visitedRooms.has(roomId)) {",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/mapRenderer.js",
      "line": 335,
      "context": "} else if (this.gameState.unlockedRooms.has(roomId)) {",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "getBoundingClientRect",
      "file": "src/mapRenderer.js",
      "line": 347,
      "context": "const rect = this.canvas.getBoundingClientRect();",
      "error": "Function 'getBoundingClientRect' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/mapRenderer.js",
      "line": 353,
      "context": "console.log('Clicked room:', clickedRoom);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "attemptRoomNavigation",
      "file": "src/mapRenderer.js",
      "line": 354,
      "context": "this.attemptRoomNavigation(clickedRoom);",
      "error": "Function 'attemptRoomNavigation' is not defined"
    },
    {
      "type": "function",
      "name": "getBoundingClientRect",
      "file": "src/mapRenderer.js",
      "line": 363,
      "context": "const rect = this.canvas.getBoundingClientRect();",
      "error": "Function 'getBoundingClientRect' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/mapRenderer.js",
      "line": 369,
      "context": "console.log('Double-clicked room:', clickedRoom);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "getRoomStatus",
      "file": "src/mapRenderer.js",
      "line": 372,
      "context": "const roomStatus = this.getRoomStatus(clickedRoom);",
      "error": "Function 'getRoomStatus' is not defined"
    },
    {
      "type": "function",
      "name": "handleRoomEntry",
      "file": "src/mapRenderer.js",
      "line": 382,
      "context": "window.quizEngine.handleRoomEntry(clickedRoom);",
      "error": "Function 'handleRoomEntry' is not defined"
    },
    {
      "type": "function",
      "name": "getBoundingClientRect",
      "file": "src/mapRenderer.js",
      "line": 396,
      "context": "const rect = this.canvas.getBoundingClientRect();",
      "error": "Function 'getBoundingClientRect' is not defined"
    },
    {
      "type": "function",
      "name": "sqrt",
      "file": "src/mapRenderer.js",
      "line": 416,
      "context": "const distance = Math.sqrt(",
      "error": "Function 'sqrt' is not defined"
    },
    {
      "type": "function",
      "name": "pow",
      "file": "src/mapRenderer.js",
      "line": 417,
      "context": "Math.pow(x - position.x, 2) +",
      "error": "Function 'pow' is not defined"
    },
    {
      "type": "function",
      "name": "pow",
      "file": "src/mapRenderer.js",
      "line": 418,
      "context": "Math.pow(y - position.y, 2)",
      "error": "Function 'pow' is not defined"
    },
    {
      "type": "function",
      "name": "attemptRoomNavigation",
      "file": "src/mapRenderer.js",
      "line": 432,
      "context": "async attemptRoomNavigation(roomId) {",
      "error": "Function 'attemptRoomNavigation' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/mapRenderer.js",
      "line": 435,
      "context": "console.log('Successfully moved to room:', roomId);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/mapRenderer.js",
      "line": 437,
      "context": "console.log('Room navigation failed:', error.message);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/mapRenderer.js",
      "line": 448,
      "context": "console.log('Window resized, map renderer handling resize');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "fillText",
      "file": "src/mapRenderer.js",
      "line": 467,
      "context": "this.ctx.fillText('Castle Map', this.mapWidth / 2, 10);",
      "error": "Function 'fillText' is not defined"
    },
    {
      "type": "function",
      "name": "movement",
      "file": "src/mapRenderer.js",
      "line": 471,
      "context": "* Show visual feedback for fast movement (double-click)",
      "error": "Function 'movement' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/mapRenderer.js",
      "line": 475,
      "context": "const position = this.roomPositions.get(roomId);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "drawRoom",
      "file": "src/mapRenderer.js",
      "line": 483,
      "context": "this.drawRoom(roomId, position.x, position.y, '#FFD700'); // Gold flash",
      "error": "Function 'drawRoom' is not defined"
    },
    {
      "type": "function",
      "name": "render",
      "file": "src/mapRenderer.js",
      "line": 485,
      "context": "this.render(); // Return to normal",
      "error": "Function 'render' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/mapRenderer.js",
      "line": 495,
      "context": "const position = this.roomPositions.get(roomId);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "drawRoom",
      "file": "src/mapRenderer.js",
      "line": 500,
      "context": "this.drawRoom(roomId, position.x, position.y, '#E53E3E'); // Red flash",
      "error": "Function 'drawRoom' is not defined"
    },
    {
      "type": "function",
      "name": "render",
      "file": "src/mapRenderer.js",
      "line": 502,
      "context": "this.render(); // Return to normal",
      "error": "Function 'render' is not defined"
    },
    {
      "type": "function",
      "name": "fillText",
      "file": "src/mapRenderer.js",
      "line": 523,
      "context": "this.ctx.fillText(",
      "error": "Function 'fillText' is not defined"
    },
    {
      "type": "function",
      "name": "fromEntries",
      "file": "src/mapRenderer.js",
      "line": 537,
      "context": "roomPositions: Object.fromEntries(this.roomPositions),",
      "error": "Function 'fromEntries' is not defined"
    },
    {
      "type": "function",
      "name": "from",
      "file": "src/mapRenderer.js",
      "line": 539,
      "context": "visitedRooms: Array.from(this.gameState.visitedRooms),",
      "error": "Function 'from' is not defined"
    },
    {
      "type": "function",
      "name": "from",
      "file": "src/mapRenderer.js",
      "line": 540,
      "context": "unlockedRooms: Array.from(this.gameState.unlockedRooms)",
      "error": "Function 'from' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/mapRenderer.js",
      "line": 558,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/mapRenderer.js",
      "line": 561,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/mapRenderer.js",
      "line": 564,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "blur",
      "file": "src/mapRenderer.js",
      "line": 565,
      "context": "this.canvas.blur();",
      "error": "Function 'blur' is not defined"
    },
    {
      "type": "function",
      "name": "navigate",
      "file": "src/mapRenderer.js",
      "line": 571,
      "context": "* @param {string} direction - Direction to navigate (north, south, east, west)",
      "error": "Function 'navigate' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/mapRenderer.js",
      "line": 578,
      "context": "console.warn('No current room for keyboard navigation');",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "attemptRoomNavigation",
      "file": "src/mapRenderer.js",
      "line": 592,
      "context": "this.attemptRoomNavigation(targetRoomId);",
      "error": "Function 'attemptRoomNavigation' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/mapRenderer.js",
      "line": 610,
      "context": "const currentPos = this.roomPositions.get(fromRoomId);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "entries",
      "file": "src/mapRenderer.js",
      "line": 629,
      "context": "for (const [roomId, position] of this.roomPositions.entries()) {",
      "error": "Function 'entries' is not defined"
    },
    {
      "type": "function",
      "name": "sqrt",
      "file": "src/mapRenderer.js",
      "line": 640,
      "context": "const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);",
      "error": "Function 'sqrt' is not defined"
    },
    {
      "type": "function",
      "name": "room",
      "file": "src/mapRenderer.js",
      "line": 654,
      "context": "* Activate the current room (Enter/Space)",
      "error": "Function 'room' is not defined"
    },
    {
      "type": "function",
      "name": "attemptRoomNavigation",
      "file": "src/mapRenderer.js",
      "line": 660,
      "context": "this.attemptRoomNavigation(currentRoomId);",
      "error": "Function 'attemptRoomNavigation' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/mapRenderer.js",
      "line": 671,
      "context": "console.log(`♿ Map navigation: ${message}`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "CustomEvent",
      "file": "src/mapRenderer.js",
      "line": 674,
      "context": "const event = new CustomEvent('accessibility-map-announce', {",
      "error": "Function 'CustomEvent' is not defined"
    },
    {
      "type": "function",
      "name": "dispatchEvent",
      "file": "src/mapRenderer.js",
      "line": 677,
      "context": "document.dispatchEvent(event);",
      "error": "Function 'dispatchEvent' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/mapRenderer.js",
      "line": 686,
      "context": "console.log(`♿ Map navigation blocked: ${message}`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "CustomEvent",
      "file": "src/mapRenderer.js",
      "line": 688,
      "context": "const event = new CustomEvent('accessibility-map-announce', {",
      "error": "Function 'CustomEvent' is not defined"
    },
    {
      "type": "function",
      "name": "dispatchEvent",
      "file": "src/mapRenderer.js",
      "line": 691,
      "context": "document.dispatchEvent(event);",
      "error": "Function 'dispatchEvent' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/mapRenderer.js",
      "line": 700,
      "context": "console.log(`♿ Map navigation: ${message}`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "CustomEvent",
      "file": "src/mapRenderer.js",
      "line": 702,
      "context": "const event = new CustomEvent('accessibility-map-announce', {",
      "error": "Function 'CustomEvent' is not defined"
    },
    {
      "type": "function",
      "name": "dispatchEvent",
      "file": "src/mapRenderer.js",
      "line": 705,
      "context": "document.dispatchEvent(event);",
      "error": "Function 'dispatchEvent' is not defined"
    },
    {
      "type": "function",
      "name": "from",
      "file": "src/mapRenderer.js",
      "line": 715,
      "context": "const accessibleRooms = Array.from(this.gameState.unlockedRooms)",
      "error": "Function 'from' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/mapRenderer.js",
      "line": 716,
      "context": ".filter(roomId => roomId !== this.gameState.currentRoomId)",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "map",
      "file": "src/mapRenderer.js",
      "line": 717,
      "context": ".map(roomId => this.dataLoader.getRoom(roomId))",
      "error": "Function 'map' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/mapRenderer.js",
      "line": 718,
      "context": ".filter(room => room)",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "map",
      "file": "src/mapRenderer.js",
      "line": 719,
      "context": ".map(room => room.name);",
      "error": "Function 'map' is not defined"
    },
    {
      "type": "function",
      "name": "join",
      "file": "src/mapRenderer.js",
      "line": 722,
      "context": "`Accessible rooms: ${accessibleRooms.length > 0 ? accessibleRooms.join(', ') : 'none'}. ` +",
      "error": "Function 'join' is not defined"
    },
    {
      "type": "function",
      "name": "CustomEvent",
      "file": "src/mapRenderer.js",
      "line": 725,
      "context": "const event = new CustomEvent('accessibility-map-announce', {",
      "error": "Function 'CustomEvent' is not defined"
    },
    {
      "type": "function",
      "name": "dispatchEvent",
      "file": "src/mapRenderer.js",
      "line": 728,
      "context": "document.dispatchEvent(event);",
      "error": "Function 'dispatchEvent' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/errorBoundary.js",
      "line": 17,
      "context": "console.log('🛡️ ErrorBoundary initialized - Enhanced error recovery system active');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "toISOString",
      "file": "src/errorBoundary.js",
      "line": 65,
      "context": "const timestamp = new Date().toISOString();",
      "error": "Function 'toISOString' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/errorBoundary.js",
      "line": 74,
      "context": "this.errorLog.push(logEntry);",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/errorBoundary.js",
      "line": 75,
      "context": "console.error(`🚨 Error #${this.errorCount}:`, errorInfo);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/errorBoundary.js",
      "line": 95,
      "context": "console.log('💾 Auto-saved game state due to error');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/errorBoundary.js",
      "line": 98,
      "context": "console.warn('⚠️ Failed to auto-save game state:', saveError);",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/errorBoundary.js",
      "line": 108,
      "context": "if (document.querySelector('.error-recovery-dialog')) {",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/errorBoundary.js",
      "line": 112,
      "context": "const dialog = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/errorBoundary.js",
      "line": 114,
      "context": "dialog.setAttribute('role', 'dialog');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/errorBoundary.js",
      "line": 115,
      "context": "dialog.setAttribute('aria-labelledby', 'error-title');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/errorBoundary.js",
      "line": 116,
      "context": "dialog.setAttribute('aria-describedby', 'error-description');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/errorBoundary.js",
      "line": 164,
      "context": "document.body.appendChild(dialog);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/errorBoundary.js",
      "line": 168,
      "context": "const primaryButton = dialog.querySelector('.error-btn-primary');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "focus",
      "file": "src/errorBoundary.js",
      "line": 169,
      "context": "if (primaryButton) primaryButton.focus();",
      "error": "Function 'focus' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/errorBoundary.js",
      "line": 178,
      "context": "const refreshBtn = dialog.querySelector('button[onclick*=\"handleRefresh\"]');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/errorBoundary.js",
      "line": 179,
      "context": "const continueBtn = dialog.querySelector('button[onclick*=\"handleContinue\"]');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/errorBoundary.js",
      "line": 180,
      "context": "const saveExitBtn = dialog.querySelector('button[onclick*=\"handleSaveExit\"]');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/errorBoundary.js",
      "line": 181,
      "context": "const detailsBtn = dialog.querySelector('button[onclick*=\"handleToggleDetails\"]');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "reload",
      "file": "src/errorBoundary.js",
      "line": 212,
      "context": "window.location.reload();",
      "error": "Function 'reload' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/errorBoundary.js",
      "line": 214,
      "context": "console.error('Failed to refresh:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "alert",
      "file": "src/errorBoundary.js",
      "line": 215,
      "context": "alert('Unable to refresh. Please manually refresh your browser.');",
      "error": "Function 'alert' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/errorBoundary.js",
      "line": 225,
      "context": "dialog.remove();",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/errorBoundary.js",
      "line": 244,
      "context": "const confirmDialog = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/errorBoundary.js",
      "line": 250,
      "context": "<button class=\"error-btn error-btn-primary\" onclick=\"this.parentElement.parentElement.remove()\">",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/errorBoundary.js",
      "line": 256,
      "context": "document.body.appendChild(confirmDialog);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/errorBoundary.js",
      "line": 261,
      "context": "confirmDialog.remove();",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/errorBoundary.js",
      "line": 266,
      "context": "console.error('Failed to save game:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "alert",
      "file": "src/errorBoundary.js",
      "line": 267,
      "context": "alert('Save failed. Please try again or manually save using Ctrl+S.');",
      "error": "Function 'alert' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/errorBoundary.js",
      "line": 276,
      "context": "const details = dialog.querySelector('.error-details');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/errorBoundary.js",
      "line": 277,
      "context": "const button = dialog.querySelector('button[onclick*=\"handleToggleDetails\"]');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/errorBoundary.js",
      "line": 293,
      "context": "const criticalScreen = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/errorBoundary.js",
      "line": 295,
      "context": "criticalScreen.setAttribute('role', 'dialog');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/errorBoundary.js",
      "line": 296,
      "context": "criticalScreen.setAttribute('aria-labelledby', 'critical-error-title');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "occurred",
      "file": "src/errorBoundary.js",
      "line": 306,
      "context": "<p>Multiple errors have occurred (${this.errorCount}/${this.maxErrors}).",
      "error": "Function 'occurred' is not defined"
    },
    {
      "type": "function",
      "name": "reload",
      "file": "src/errorBoundary.js",
      "line": 319,
      "context": "<button class=\"error-btn error-btn-primary\" onclick=\"window.location.reload()\">",
      "error": "Function 'reload' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/errorBoundary.js",
      "line": 329,
      "context": "document.body.appendChild(criticalScreen);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "open",
      "file": "src/errorBoundary.js",
      "line": 336,
      "context": "const logWindow = window.open('', '_blank', 'width=800,height=600');",
      "error": "Function 'open' is not defined"
    },
    {
      "type": "function",
      "name": "write",
      "file": "src/errorBoundary.js",
      "line": 337,
      "context": "logWindow.document.write(`",
      "error": "Function 'write' is not defined"
    },
    {
      "type": "function",
      "name": "stringify",
      "file": "src/errorBoundary.js",
      "line": 342,
      "context": "<pre>${JSON.stringify(this.errorLog, null, 2)}</pre>",
      "error": "Function 'stringify' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/errorBoundary.js",
      "line": 354,
      "context": "const div = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "rgba",
      "file": "src/errorBoundary.js",
      "line": 370,
      "context": "background: rgba(44, 24, 16, 0.95);",
      "error": "Function 'rgba' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 375,
      "context": "font-family: var(--font-ui, 'Segoe UI', sans-serif);",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "blur",
      "file": "src/errorBoundary.js",
      "line": 376,
      "context": "backdrop-filter: blur(5px);",
      "error": "Function 'blur' is not defined"
    },
    {
      "type": "function",
      "name": "gradient",
      "file": "src/errorBoundary.js",
      "line": 380,
      "context": "background: linear-gradient(135deg, var(--medieval-parchment, #F5E6D3), var(--medieval-parchment-light, #FAF0E6));",
      "error": "Function 'gradient' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 380,
      "context": "background: linear-gradient(135deg, var(--medieval-parchment, #F5E6D3), var(--medieval-parchment-light, #FAF0E6));",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 380,
      "context": "background: linear-gradient(135deg, var(--medieval-parchment, #F5E6D3), var(--medieval-parchment-light, #FAF0E6));",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 381,
      "context": "border: 3px solid var(--medieval-gold, #D4AF37);",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "rgba",
      "file": "src/errorBoundary.js",
      "line": 386,
      "context": "box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);",
      "error": "Function 'rgba' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 402,
      "context": "color: var(--medieval-ink, #2C1810);",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 404,
      "context": "font-family: var(--font-heading, 'Cinzel', serif);",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 410,
      "context": "color: var(--medieval-ink, #2C1810);",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 414,
      "context": "background: var(--medieval-parchment-dark, #E8D5B7);",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 419,
      "context": "border-left: 4px solid var(--medieval-crimson, #8B0000);",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "rgba",
      "file": "src/errorBoundary.js",
      "line": 423,
      "context": "background: rgba(0, 0, 0, 0.1);",
      "error": "Function 'rgba' is not defined"
    },
    {
      "type": "function",
      "name": "gradient",
      "file": "src/errorBoundary.js",
      "line": 449,
      "context": "background: linear-gradient(135deg, var(--medieval-gold, #D4AF37), var(--medieval-gold-dark, #B8941F));",
      "error": "Function 'gradient' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 449,
      "context": "background: linear-gradient(135deg, var(--medieval-gold, #D4AF37), var(--medieval-gold-dark, #B8941F));",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 449,
      "context": "background: linear-gradient(135deg, var(--medieval-gold, #D4AF37), var(--medieval-gold-dark, #B8941F));",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 450,
      "context": "color: var(--medieval-ink, #2C1810);",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 451,
      "context": "border-color: var(--medieval-gold-dark, #B8941F);",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "translateY",
      "file": "src/errorBoundary.js",
      "line": 455,
      "context": "transform: translateY(-2px);",
      "error": "Function 'translateY' is not defined"
    },
    {
      "type": "function",
      "name": "rgba",
      "file": "src/errorBoundary.js",
      "line": 456,
      "context": "box-shadow: 0 5px 15px rgba(212, 175, 55, 0.3);",
      "error": "Function 'rgba' is not defined"
    },
    {
      "type": "function",
      "name": "gradient",
      "file": "src/errorBoundary.js",
      "line": 460,
      "context": "background: linear-gradient(135deg, var(--medieval-blue, #4A6FA5), var(--medieval-blue-dark, #3A5A8A));",
      "error": "Function 'gradient' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 460,
      "context": "background: linear-gradient(135deg, var(--medieval-blue, #4A6FA5), var(--medieval-blue-dark, #3A5A8A));",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 460,
      "context": "background: linear-gradient(135deg, var(--medieval-blue, #4A6FA5), var(--medieval-blue-dark, #3A5A8A));",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 462,
      "context": "border-color: var(--medieval-blue-dark, #3A5A8A);",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "translateY",
      "file": "src/errorBoundary.js",
      "line": 466,
      "context": "transform: translateY(-2px);",
      "error": "Function 'translateY' is not defined"
    },
    {
      "type": "function",
      "name": "rgba",
      "file": "src/errorBoundary.js",
      "line": 467,
      "context": "box-shadow: 0 5px 15px rgba(74, 111, 165, 0.3);",
      "error": "Function 'rgba' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 472,
      "context": "color: var(--medieval-ink, #2C1810);",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 473,
      "context": "border-color: var(--medieval-ink-light, #8B7355);",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 477,
      "context": "background: var(--medieval-parchment-dark, #E8D5B7);",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/errorBoundary.js",
      "line": 482,
      "context": "color: var(--medieval-ink-light, #8B7355);",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "media",
      "file": "src/errorBoundary.js",
      "line": 497,
      "context": "@media (max-width: 768px) {",
      "error": "Function 'media' is not defined"
    },
    {
      "type": "function",
      "name": "media",
      "file": "src/errorBoundary.js",
      "line": 515,
      "context": "@media (prefers-reduced-motion: reduce) {",
      "error": "Function 'media' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/errorBoundary.js",
      "line": 522,
      "context": "const styleSheet = document.createElement('style');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/errorBoundary.js",
      "line": 524,
      "context": "document.head.appendChild(styleSheet);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/errorBoundary.js",
      "line": 549,
      "context": "document.querySelectorAll('.error-recovery-dialog, .critical-error-screen').forEach(dialog => {",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/errorBoundary.js",
      "line": 549,
      "context": "document.querySelectorAll('.error-recovery-dialog, .critical-error-screen').forEach(dialog => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/errorBoundary.js",
      "line": 550,
      "context": "dialog.remove();",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "Map",
      "file": "src/accessibilityManager.js",
      "line": 11,
      "context": "this.liveRegions = new Map();",
      "error": "Function 'Map' is not defined"
    },
    {
      "type": "function",
      "name": "Map",
      "file": "src/accessibilityManager.js",
      "line": 12,
      "context": "this.keyboardShortcuts = new Map();",
      "error": "Function 'Map' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 28,
      "context": "console.log('♿ AccessibilityManager initialized');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 44,
      "context": "console.log('♿ Accessibility features initialized');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "getItem",
      "file": "src/accessibilityManager.js",
      "line": 52,
      "context": "const saved = localStorage.getItem('accessibility-preferences');",
      "error": "Function 'getItem' is not defined"
    },
    {
      "type": "function",
      "name": "parse",
      "file": "src/accessibilityManager.js",
      "line": 54,
      "context": "this.preferences = { ...this.preferences, ...JSON.parse(saved) };",
      "error": "Function 'parse' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 55,
      "context": "console.log('♿ Loaded accessibility preferences');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/accessibilityManager.js",
      "line": 61,
      "context": "console.warn('⚠️ Could not load accessibility preferences:', error);",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "setItem",
      "file": "src/accessibilityManager.js",
      "line": 70,
      "context": "localStorage.setItem('accessibility-preferences', JSON.stringify(this.preferences));",
      "error": "Function 'setItem' is not defined"
    },
    {
      "type": "function",
      "name": "stringify",
      "file": "src/accessibilityManager.js",
      "line": 70,
      "context": "localStorage.setItem('accessibility-preferences', JSON.stringify(this.preferences));",
      "error": "Function 'stringify' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 71,
      "context": "console.log('♿ Saved accessibility preferences');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/accessibilityManager.js",
      "line": 73,
      "context": "console.warn('⚠️ Could not save accessibility preferences:', error);",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "matchMedia",
      "file": "src/accessibilityManager.js",
      "line": 104,
      "context": "const reducedMotionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');",
      "error": "Function 'matchMedia' is not defined"
    },
    {
      "type": "function",
      "name": "matchMedia",
      "file": "src/accessibilityManager.js",
      "line": 117,
      "context": "const highContrastQuery = window.matchMedia('(prefers-contrast: high)');",
      "error": "Function 'matchMedia' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 127,
      "context": "console.log('♿ Accessibility features detected:', this.preferences);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "includes",
      "file": "src/accessibilityManager.js",
      "line": 137,
      "context": "navigator.userAgent.includes('NVDA') ||",
      "error": "Function 'includes' is not defined"
    },
    {
      "type": "function",
      "name": "includes",
      "file": "src/accessibilityManager.js",
      "line": 138,
      "context": "navigator.userAgent.includes('JAWS') ||",
      "error": "Function 'includes' is not defined"
    },
    {
      "type": "function",
      "name": "includes",
      "file": "src/accessibilityManager.js",
      "line": 139,
      "context": "navigator.userAgent.includes('Orca'),",
      "error": "Function 'includes' is not defined"
    },
    {
      "type": "function",
      "name": "matchMedia",
      "file": "src/accessibilityManager.js",
      "line": 145,
      "context": "window.matchMedia && window.matchMedia('(forced-colors: active)').matches",
      "error": "Function 'matchMedia' is not defined"
    },
    {
      "type": "function",
      "name": "some",
      "file": "src/accessibilityManager.js",
      "line": 148,
      "context": "if (indicators.some(indicator => indicator)) {",
      "error": "Function 'some' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 151,
      "context": "console.log('♿ Screen reader detected');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/accessibilityManager.js",
      "line": 165,
      "context": "this.keyboardShortcuts.set('Alt+1', () => this.focusOnSection('map-area'));",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/accessibilityManager.js",
      "line": 166,
      "context": "this.keyboardShortcuts.set('Alt+2', () => this.focusOnSection('room-info'));",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/accessibilityManager.js",
      "line": 167,
      "context": "this.keyboardShortcuts.set('Alt+3', () => this.focusOnSection('question-area'));",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/accessibilityManager.js",
      "line": 168,
      "context": "this.keyboardShortcuts.set('Alt+4', () => this.focusOnSection('answer-buttons'));",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/accessibilityManager.js",
      "line": 169,
      "context": "this.keyboardShortcuts.set('Alt+5', () => this.focusOnSection('game-controls'));",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/accessibilityManager.js",
      "line": 170,
      "context": "this.keyboardShortcuts.set('Alt+h', () => this.toggleHighContrastMode());",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/accessibilityManager.js",
      "line": 171,
      "context": "this.keyboardShortcuts.set('Alt+?', () => this.showKeyboardHelp());",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/accessibilityManager.js",
      "line": 172,
      "context": "this.keyboardShortcuts.set('Alt+s', () => this.skipToMainContent());",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 177,
      "context": "console.log('⌨️ Keyboard navigation setup complete');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/accessibilityManager.js",
      "line": 187,
      "context": "if (this.keyboardShortcuts.has(key)) {",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 188,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/accessibilityManager.js",
      "line": 189,
      "context": "this.keyboardShortcuts.get(key)();",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/accessibilityManager.js",
      "line": 226,
      "context": "if (event.ctrlKey) modifiers.push('Ctrl');",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/accessibilityManager.js",
      "line": 227,
      "context": "if (event.altKey) modifiers.push('Alt');",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/accessibilityManager.js",
      "line": 228,
      "context": "if (event.shiftKey) modifiers.push('Shift');",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/accessibilityManager.js",
      "line": 230,
      "context": "modifiers.push(event.key);",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "join",
      "file": "src/accessibilityManager.js",
      "line": 231,
      "context": "return modifiers.join('+');",
      "error": "Function 'join' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 239,
      "context": "const mapCanvas = document.getElementById('map-canvas');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "includes",
      "file": "src/accessibilityManager.js",
      "line": 242,
      "context": "if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {",
      "error": "Function 'includes' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 243,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 250,
      "context": "const answerContainer = document.getElementById('answer-buttons');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "includes",
      "file": "src/accessibilityManager.js",
      "line": 253,
      "context": "if (['ArrowUp', 'ArrowDown'].includes(event.key)) {",
      "error": "Function 'includes' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 254,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "CustomEvent",
      "file": "src/accessibilityManager.js",
      "line": 277,
      "context": "const event = new CustomEvent('accessibility-map-navigate', {",
      "error": "Function 'CustomEvent' is not defined"
    },
    {
      "type": "function",
      "name": "dispatchEvent",
      "file": "src/accessibilityManager.js",
      "line": 280,
      "context": "document.dispatchEvent(event);",
      "error": "Function 'dispatchEvent' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 287,
      "context": "const buttons = document.querySelectorAll('#answer-buttons button:not([disabled])');",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "not",
      "file": "src/accessibilityManager.js",
      "line": 287,
      "context": "const buttons = document.querySelectorAll('#answer-buttons button:not([disabled])');",
      "error": "Function 'not' is not defined"
    },
    {
      "type": "function",
      "name": "from",
      "file": "src/accessibilityManager.js",
      "line": 291,
      "context": "let currentIndex = Array.from(buttons).indexOf(currentFocus);",
      "error": "Function 'from' is not defined"
    },
    {
      "type": "function",
      "name": "indexOf",
      "file": "src/accessibilityManager.js",
      "line": 291,
      "context": "let currentIndex = Array.from(buttons).indexOf(currentFocus);",
      "error": "Function 'indexOf' is not defined"
    },
    {
      "type": "function",
      "name": "focus",
      "file": "src/accessibilityManager.js",
      "line": 299,
      "context": "buttons[currentIndex].focus();",
      "error": "Function 'focus' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 308,
      "context": "const questionArea = document.getElementById('question-area');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "contains",
      "file": "src/accessibilityManager.js",
      "line": 309,
      "context": "if (!questionArea || !questionArea.contains(document.activeElement)) {",
      "error": "Function 'contains' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 314,
      "context": "const buttons = document.querySelectorAll('#answer-buttons button:not([disabled])');",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "not",
      "file": "src/accessibilityManager.js",
      "line": 314,
      "context": "const buttons = document.querySelectorAll('#answer-buttons button:not([disabled])');",
      "error": "Function 'not' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 317,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "click",
      "file": "src/accessibilityManager.js",
      "line": 318,
      "context": "buttons[answerIndex].click();",
      "error": "Function 'click' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 342,
      "context": "console.log('♿ ARIA enhancements applied');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/accessibilityManager.js",
      "line": 349,
      "context": "const skipLinks = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "insertBefore",
      "file": "src/accessibilityManager.js",
      "line": 358,
      "context": "document.body.insertBefore(skipLinks, document.body.firstChild);",
      "error": "Function 'insertBefore' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 361,
      "context": "const gameMain = document.querySelector('.game-main');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 372,
      "context": "const buttons = document.querySelectorAll('button:not([aria-label])');",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "not",
      "file": "src/accessibilityManager.js",
      "line": 372,
      "context": "const buttons = document.querySelectorAll('button:not([aria-label])');",
      "error": "Function 'not' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/accessibilityManager.js",
      "line": 373,
      "context": "buttons.forEach(button => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 374,
      "context": "if (!button.getAttribute('aria-label') && button.textContent.trim()) {",
      "error": "Function 'getAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "trim",
      "file": "src/accessibilityManager.js",
      "line": 374,
      "context": "if (!button.getAttribute('aria-label') && button.textContent.trim()) {",
      "error": "Function 'trim' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 375,
      "context": "button.setAttribute('aria-label', button.textContent.trim());",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "trim",
      "file": "src/accessibilityManager.js",
      "line": 375,
      "context": "button.setAttribute('aria-label', button.textContent.trim());",
      "error": "Function 'trim' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 380,
      "context": "const interactiveElements = document.querySelectorAll('[onclick]:not([role])');",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "not",
      "file": "src/accessibilityManager.js",
      "line": 380,
      "context": "const interactiveElements = document.querySelectorAll('[onclick]:not([role])');",
      "error": "Function 'not' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/accessibilityManager.js",
      "line": 381,
      "context": "interactiveElements.forEach(element => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 382,
      "context": "if (!element.getAttribute('role')) {",
      "error": "Function 'getAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 383,
      "context": "element.setAttribute('role', 'button');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 384,
      "context": "element.setAttribute('tabindex', '0');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 394,
      "context": "const sections = document.querySelectorAll('.section');",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/accessibilityManager.js",
      "line": 395,
      "context": "sections.forEach((section, index) => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 396,
      "context": "if (!section.getAttribute('role')) {",
      "error": "Function 'getAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 397,
      "context": "section.setAttribute('role', 'region');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 401,
      "context": "const heading = section.querySelector('h1, h2, h3, h4, h5, h6');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 402,
      "context": "if (heading && !section.getAttribute('aria-labelledby')) {",
      "error": "Function 'getAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 406,
      "context": "section.setAttribute('aria-labelledby', heading.id);",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 416,
      "context": "const scoreElement = document.getElementById('current-score');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 418,
      "context": "scoreElement.setAttribute('aria-live', 'polite');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 419,
      "context": "scoreElement.setAttribute('aria-atomic', 'true');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 423,
      "context": "const timerElement = document.querySelector('.timer-container');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 425,
      "context": "timerElement.setAttribute('aria-live', 'off'); // Prevent constant announcements",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 426,
      "context": "timerElement.setAttribute('aria-atomic', 'true');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 430,
      "context": "const roomInfo = document.getElementById('room-info');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 432,
      "context": "roomInfo.setAttribute('aria-live', 'polite');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/accessibilityManager.js",
      "line": 440,
      "context": "const instructions = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/accessibilityManager.js",
      "line": 456,
      "context": "document.body.appendChild(instructions);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/accessibilityManager.js",
      "line": 464,
      "context": "const politeRegion = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 467,
      "context": "politeRegion.setAttribute('aria-live', 'polite');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 468,
      "context": "politeRegion.setAttribute('aria-atomic', 'true');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/accessibilityManager.js",
      "line": 469,
      "context": "document.body.appendChild(politeRegion);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/accessibilityManager.js",
      "line": 470,
      "context": "this.liveRegions.set('polite', politeRegion);",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/accessibilityManager.js",
      "line": 473,
      "context": "const assertiveRegion = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 476,
      "context": "assertiveRegion.setAttribute('aria-live', 'assertive');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 477,
      "context": "assertiveRegion.setAttribute('aria-atomic', 'true');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/accessibilityManager.js",
      "line": 478,
      "context": "document.body.appendChild(assertiveRegion);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/accessibilityManager.js",
      "line": 479,
      "context": "this.liveRegions.set('assertive', assertiveRegion);",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/accessibilityManager.js",
      "line": 482,
      "context": "const statusRegion = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 485,
      "context": "statusRegion.setAttribute('role', 'status');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 486,
      "context": "statusRegion.setAttribute('aria-atomic', 'true');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/accessibilityManager.js",
      "line": 487,
      "context": "document.body.appendChild(statusRegion);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/accessibilityManager.js",
      "line": 488,
      "context": "this.liveRegions.set('status', statusRegion);",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 490,
      "context": "console.log('♿ Live regions created');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/accessibilityManager.js",
      "line": 500,
      "context": "this.announcementHistory.push({",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/accessibilityManager.js",
      "line": 502,
      "context": "timestamp: Date.now(),",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "shift",
      "file": "src/accessibilityManager.js",
      "line": 508,
      "context": "this.announcementHistory.shift();",
      "error": "Function 'shift' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/accessibilityManager.js",
      "line": 512,
      "context": "const region = this.liveRegions.get(priority);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 515,
      "context": "console.log(`♿ Announced (${priority}): ${message}`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "Announced",
      "file": "src/accessibilityManager.js",
      "line": 515,
      "context": "console.log(`♿ Announced (${priority}): ${message}`);",
      "error": "Function 'Announced' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/accessibilityManager.js",
      "line": 543,
      "context": "const highContrastStyles = document.createElement('style');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 560,
      "context": "background-color: var(--bg-color) !important;",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 561,
      "context": "color: var(--text-color) !important;",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 562,
      "context": "border-color: var(--border-color) !important;",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 566,
      "context": "color: var(--accent-color) !important;",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 571,
      "context": "color: var(--visited-color) !important;",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 578,
      "context": "background-color: var(--text-color) !important;",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 579,
      "context": "color: var(--bg-color) !important;",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 580,
      "context": "border: 2px solid var(--border-color) !important;",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 584,
      "context": "outline: 3px solid var(--focus-color) !important;",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 589,
      "context": "color: var(--success-color) !important;",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 593,
      "context": "color: var(--error-color) !important;",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 597,
      "context": "color: var(--warning-color) !important;",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 602,
      "context": "background-color: var(--focus-color) !important;",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 603,
      "context": "color: var(--bg-color) !important;",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 604,
      "context": "box-shadow: 0 0 0 3px var(--accent-color) !important;",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 613,
      "context": "background: var(--bg-color) !important;",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 614,
      "context": "color: var(--text-color) !important;",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "var",
      "file": "src/accessibilityManager.js",
      "line": 615,
      "context": "border: 2px solid var(--accent-color) !important;",
      "error": "Function 'var' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/accessibilityManager.js",
      "line": 623,
      "context": "document.head.appendChild(highContrastStyles);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/accessibilityManager.js",
      "line": 646,
      "context": "document.body.classList.add('high-contrast');",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 649,
      "context": "console.log('♿ High contrast mode enabled');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/accessibilityManager.js",
      "line": 656,
      "context": "document.body.classList.remove('high-contrast');",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 659,
      "context": "console.log('♿ High contrast mode disabled');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/accessibilityManager.js",
      "line": 666,
      "context": "document.body.classList.add('reduced-motion');",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 668,
      "context": "console.log('♿ Reduced motion mode enabled');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/accessibilityManager.js",
      "line": 675,
      "context": "document.body.classList.add('large-text');",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 677,
      "context": "console.log('♿ Large text mode enabled');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/accessibilityManager.js",
      "line": 684,
      "context": "document.body.classList.add('screen-reader-mode');",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 689,
      "context": "console.log('♿ Screen reader mode enabled');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 697,
      "context": "const elements = document.querySelectorAll('button, input, select, textarea');",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/accessibilityManager.js",
      "line": 698,
      "context": "elements.forEach(element => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 699,
      "context": "if (!element.getAttribute('aria-label') && !element.getAttribute('aria-labelledby')) {",
      "error": "Function 'getAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 699,
      "context": "if (!element.getAttribute('aria-label') && !element.getAttribute('aria-labelledby')) {",
      "error": "Function 'getAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 702,
      "context": "element.setAttribute('aria-label', label);",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 708,
      "context": "const tables = document.querySelectorAll('table');",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/accessibilityManager.js",
      "line": 709,
      "context": "tables.forEach(table => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 710,
      "context": "const headers = table.querySelectorAll('th');",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/accessibilityManager.js",
      "line": 711,
      "context": "headers.forEach((header, index) => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 726,
      "context": "const label = document.querySelector(`label[for=\"${id}\"]`);",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "trim",
      "file": "src/accessibilityManager.js",
      "line": 727,
      "context": "if (label) return label.textContent.trim();",
      "error": "Function 'trim' is not defined"
    },
    {
      "type": "function",
      "name": "substring",
      "file": "src/accessibilityManager.js",
      "line": 735,
      "context": "return textNodes[0].substring(0, 50);",
      "error": "Function 'substring' is not defined"
    },
    {
      "type": "function",
      "name": "trim",
      "file": "src/accessibilityManager.js",
      "line": 742,
      "context": "if (element.textContent && element.textContent.trim()) {",
      "error": "Function 'trim' is not defined"
    },
    {
      "type": "function",
      "name": "trim",
      "file": "src/accessibilityManager.js",
      "line": 743,
      "context": "return element.textContent.trim();",
      "error": "Function 'trim' is not defined"
    },
    {
      "type": "function",
      "name": "createTreeWalker",
      "file": "src/accessibilityManager.js",
      "line": 754,
      "context": "const walker = document.createTreeWalker(",
      "error": "Function 'createTreeWalker' is not defined"
    },
    {
      "type": "function",
      "name": "nextNode",
      "file": "src/accessibilityManager.js",
      "line": 762,
      "context": "while (node = walker.nextNode()) {",
      "error": "Function 'nextNode' is not defined"
    },
    {
      "type": "function",
      "name": "trim",
      "file": "src/accessibilityManager.js",
      "line": 763,
      "context": "const text = node.textContent.trim();",
      "error": "Function 'trim' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/accessibilityManager.js",
      "line": 765,
      "context": "texts.push(text);",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "matches",
      "file": "src/accessibilityManager.js",
      "line": 796,
      "context": "if (element.matches('button, input, select, textarea, [role=\"button\"]')) {",
      "error": "Function 'matches' is not defined"
    },
    {
      "type": "function",
      "name": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 809,
      "context": "if (element.getAttribute('aria-label')) {",
      "error": "Function 'getAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 810,
      "context": "return element.getAttribute('aria-label');",
      "error": "Function 'getAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 813,
      "context": "if (element.getAttribute('aria-labelledby')) {",
      "error": "Function 'getAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "getAttribute",
      "file": "src/accessibilityManager.js",
      "line": 814,
      "context": "const labelId = element.getAttribute('aria-labelledby');",
      "error": "Function 'getAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 815,
      "context": "const labelElement = document.getElementById(labelId);",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "trim",
      "file": "src/accessibilityManager.js",
      "line": 817,
      "context": "return labelElement.textContent.trim();",
      "error": "Function 'trim' is not defined"
    },
    {
      "type": "function",
      "name": "trim",
      "file": "src/accessibilityManager.js",
      "line": 821,
      "context": "if (element.textContent && element.textContent.trim()) {",
      "error": "Function 'trim' is not defined"
    },
    {
      "type": "function",
      "name": "trim",
      "file": "src/accessibilityManager.js",
      "line": 822,
      "context": "return element.textContent.trim();",
      "error": "Function 'trim' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 836,
      "context": "const section = document.getElementById(sectionId);",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 839,
      "context": "const focusableElement = section.querySelector(",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "not",
      "file": "src/accessibilityManager.js",
      "line": 840,
      "context": "'button, input, select, textarea, a[href], [tabindex]:not([tabindex=\"-1\"])'",
      "error": "Function 'not' is not defined"
    },
    {
      "type": "function",
      "name": "focus",
      "file": "src/accessibilityManager.js",
      "line": 843,
      "context": "focusableElement.focus();",
      "error": "Function 'focus' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 845,
      "context": "const sectionName = section.querySelector('h1, h2, h3, h4, h5, h6')?.textContent || sectionId;",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 854,
      "context": "const mainContent = document.getElementById('main-content') ||",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 855,
      "context": "document.querySelector('main') ||",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 856,
      "context": "document.querySelector('[role=\"main\"]');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "focus",
      "file": "src/accessibilityManager.js",
      "line": 859,
      "context": "mainContent.focus();",
      "error": "Function 'focus' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 868,
      "context": "const existingHelp = document.getElementById('keyboard-help-modal');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/accessibilityManager.js",
      "line": 870,
      "context": "existingHelp.remove();",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/accessibilityManager.js",
      "line": 873,
      "context": "const helpModal = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 876,
      "context": "helpModal.setAttribute('role', 'dialog');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 877,
      "context": "helpModal.setAttribute('aria-labelledby', 'help-title');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/accessibilityManager.js",
      "line": 878,
      "context": "helpModal.setAttribute('aria-modal', 'true');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/accessibilityManager.js",
      "line": 918,
      "context": "document.body.appendChild(helpModal);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 921,
      "context": "const closeButtons = helpModal.querySelectorAll('.modal-close, .modal-close-btn');",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/accessibilityManager.js",
      "line": 922,
      "context": "closeButtons.forEach(button => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/accessibilityManager.js",
      "line": 924,
      "context": "helpModal.remove();",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 930,
      "context": "const firstButton = helpModal.querySelector('button');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "focus",
      "file": "src/accessibilityManager.js",
      "line": 932,
      "context": "firstButton.focus();",
      "error": "Function 'focus' is not defined"
    },
    {
      "type": "function",
      "name": "slice",
      "file": "src/accessibilityManager.js",
      "line": 979,
      "context": "announcementHistory: this.announcementHistory.slice(-5)",
      "error": "Function 'slice' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/accessibilityManager.js",
      "line": 991,
      "context": "this.liveRegions.forEach(region => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "removeChild",
      "file": "src/accessibilityManager.js",
      "line": 993,
      "context": "region.parentNode.removeChild(region);",
      "error": "Function 'removeChild' is not defined"
    },
    {
      "type": "function",
      "name": "clear",
      "file": "src/accessibilityManager.js",
      "line": 996,
      "context": "this.liveRegions.clear();",
      "error": "Function 'clear' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/accessibilityManager.js",
      "line": 999,
      "context": "const modal = document.getElementById('keyboard-help-modal');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/accessibilityManager.js",
      "line": 1001,
      "context": "modal.remove();",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/accessibilityManager.js",
      "line": 1004,
      "context": "console.log('♿ AccessibilityManager cleanup completed');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 1013,
      "context": "const modal = document.querySelector('[aria-modal=\"true\"]');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 1016,
      "context": "const focusableElements = modal.querySelectorAll(",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "not",
      "file": "src/accessibilityManager.js",
      "line": 1017,
      "context": "'button, input, select, textarea, a[href], [tabindex]:not([tabindex=\"-1\"])'",
      "error": "Function 'not' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 1026,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "focus",
      "file": "src/accessibilityManager.js",
      "line": 1027,
      "context": "lastElement.focus();",
      "error": "Function 'focus' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 1029,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "focus",
      "file": "src/accessibilityManager.js",
      "line": 1030,
      "context": "firstElement.focus();",
      "error": "Function 'focus' is not defined"
    },
    {
      "type": "function",
      "name": "activation",
      "file": "src/accessibilityManager.js",
      "line": 1043,
      "context": "* Handle activation (Enter/Space) events",
      "error": "Function 'activation' is not defined"
    },
    {
      "type": "function",
      "name": "hasAttribute",
      "file": "src/accessibilityManager.js",
      "line": 1049,
      "context": "if (element.hasAttribute('onclick') && !element.matches('button, input, select, textarea, a')) {",
      "error": "Function 'hasAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "matches",
      "file": "src/accessibilityManager.js",
      "line": 1049,
      "context": "if (element.hasAttribute('onclick') && !element.matches('button, input, select, textarea, a')) {",
      "error": "Function 'matches' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 1050,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "click",
      "file": "src/accessibilityManager.js",
      "line": 1051,
      "context": "element.click();",
      "error": "Function 'click' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 1060,
      "context": "const modal = document.querySelector('[aria-modal=\"true\"]');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 1062,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/accessibilityManager.js",
      "line": 1063,
      "context": "const closeButton = modal.querySelector('.modal-close, .modal-close-btn');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "click",
      "file": "src/accessibilityManager.js",
      "line": 1065,
      "context": "closeButton.click();",
      "error": "Function 'click' is not defined"
    },
    {
      "type": "function",
      "name": "matches",
      "file": "src/accessibilityManager.js",
      "line": 1078,
      "context": "if (element.matches('#map-canvas')) {",
      "error": "Function 'matches' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 1079,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "matches",
      "file": "src/accessibilityManager.js",
      "line": 1085,
      "context": "if (element.matches('.answer-btn')) {",
      "error": "Function 'matches' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 1086,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "matches",
      "file": "src/accessibilityManager.js",
      "line": 1092,
      "context": "if (element.matches('[role=\"menu\"], [role=\"listbox\"], .menu-item, .list-item')) {",
      "error": "Function 'matches' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/accessibilityManager.js",
      "line": 1093,
      "context": "event.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "CustomEvent",
      "file": "src/accessibilityManager.js",
      "line": 1106,
      "context": "const mapNavigationEvent = new CustomEvent('accessibility-map-navigate', {",
      "error": "Function 'CustomEvent' is not defined"
    },
    {
      "type": "function",
      "name": "replace",
      "file": "src/accessibilityManager.js",
      "line": 1107,
      "context": "detail: { direction: direction.replace('Arrow', '').toLowerCase() }",
      "error": "Function 'replace' is not defined"
    },
    {
      "type": "function",
      "name": "toLowerCase",
      "file": "src/accessibilityManager.js",
      "line": 1107,
      "context": "detail: { direction: direction.replace('Arrow', '').toLowerCase() }",
      "error": "Function 'toLowerCase' is not defined"
    },
    {
      "type": "function",
      "name": "dispatchEvent",
      "file": "src/accessibilityManager.js",
      "line": 1109,
      "context": "document.dispatchEvent(mapNavigationEvent);",
      "error": "Function 'dispatchEvent' is not defined"
    },
    {
      "type": "function",
      "name": "replace",
      "file": "src/accessibilityManager.js",
      "line": 1112,
      "context": "this.announce(`Navigating ${direction.replace('Arrow', '').toLowerCase()}`, 'polite');",
      "error": "Function 'replace' is not defined"
    },
    {
      "type": "function",
      "name": "toLowerCase",
      "file": "src/accessibilityManager.js",
      "line": 1112,
      "context": "this.announce(`Navigating ${direction.replace('Arrow', '').toLowerCase()}`, 'polite');",
      "error": "Function 'toLowerCase' is not defined"
    },
    {
      "type": "function",
      "name": "from",
      "file": "src/accessibilityManager.js",
      "line": 1119,
      "context": "const buttons = Array.from(document.querySelectorAll('.answer-btn:not([disabled])'));",
      "error": "Function 'from' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 1119,
      "context": "const buttons = Array.from(document.querySelectorAll('.answer-btn:not([disabled])'));",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "not",
      "file": "src/accessibilityManager.js",
      "line": 1119,
      "context": "const buttons = Array.from(document.querySelectorAll('.answer-btn:not([disabled])'));",
      "error": "Function 'not' is not defined"
    },
    {
      "type": "function",
      "name": "findIndex",
      "file": "src/accessibilityManager.js",
      "line": 1120,
      "context": "const currentIndex = buttons.findIndex(btn => btn === document.activeElement);",
      "error": "Function 'findIndex' is not defined"
    },
    {
      "type": "function",
      "name": "focus",
      "file": "src/accessibilityManager.js",
      "line": 1130,
      "context": "buttons[nextIndex].focus();",
      "error": "Function 'focus' is not defined"
    },
    {
      "type": "function",
      "name": "fromCharCode",
      "file": "src/accessibilityManager.js",
      "line": 1131,
      "context": "this.announce(`Answer option ${String.fromCharCode(65 + nextIndex)}`, 'polite');",
      "error": "Function 'fromCharCode' is not defined"
    },
    {
      "type": "function",
      "name": "from",
      "file": "src/accessibilityManager.js",
      "line": 1139,
      "context": "const menuItems = Array.from(document.querySelectorAll('.menu-item:not([disabled]), .list-item:not([disabled])'));",
      "error": "Function 'from' is not defined"
    },
    {
      "type": "function",
      "name": "querySelectorAll",
      "file": "src/accessibilityManager.js",
      "line": 1139,
      "context": "const menuItems = Array.from(document.querySelectorAll('.menu-item:not([disabled]), .list-item:not([disabled])'));",
      "error": "Function 'querySelectorAll' is not defined"
    },
    {
      "type": "function",
      "name": "not",
      "file": "src/accessibilityManager.js",
      "line": 1139,
      "context": "const menuItems = Array.from(document.querySelectorAll('.menu-item:not([disabled]), .list-item:not([disabled])'));",
      "error": "Function 'not' is not defined"
    },
    {
      "type": "function",
      "name": "not",
      "file": "src/accessibilityManager.js",
      "line": 1139,
      "context": "const menuItems = Array.from(document.querySelectorAll('.menu-item:not([disabled]), .list-item:not([disabled])'));",
      "error": "Function 'not' is not defined"
    },
    {
      "type": "function",
      "name": "findIndex",
      "file": "src/accessibilityManager.js",
      "line": 1140,
      "context": "const currentIndex = menuItems.findIndex(item => item === document.activeElement);",
      "error": "Function 'findIndex' is not defined"
    },
    {
      "type": "function",
      "name": "focus",
      "file": "src/accessibilityManager.js",
      "line": 1152,
      "context": "menuItems[nextIndex].focus();",
      "error": "Function 'focus' is not defined"
    },
    {
      "type": "function",
      "name": "Map",
      "file": "src/enhancedDataLoader.js",
      "line": 9,
      "context": "this.categoryCache = new Map();",
      "error": "Function 'Map' is not defined"
    },
    {
      "type": "function",
      "name": "Map",
      "file": "src/enhancedDataLoader.js",
      "line": 10,
      "context": "this.loadingStates = new Map();",
      "error": "Function 'Map' is not defined"
    },
    {
      "type": "function",
      "name": "Map",
      "file": "src/enhancedDataLoader.js",
      "line": 14,
      "context": "categoryRequests: new Map(),",
      "error": "Function 'Map' is not defined"
    },
    {
      "type": "function",
      "name": "Map",
      "file": "src/enhancedDataLoader.js",
      "line": 15,
      "context": "difficultyRequests: new Map(),",
      "error": "Function 'Map' is not defined"
    },
    {
      "type": "function",
      "name": "Map",
      "file": "src/enhancedDataLoader.js",
      "line": 16,
      "context": "lastAccessed: new Map()",
      "error": "Function 'Map' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 19,
      "context": "console.log('🚀 Enhanced DataLoader initialized with performance optimizations');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/enhancedDataLoader.js",
      "line": 33,
      "context": "if (!forceReload && this.categoryCache.has(category)) {",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 34,
      "context": "console.log(`📚 Retrieved ${this.categoryCache.get(category).length} questions from cache: ${category}`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/enhancedDataLoader.js",
      "line": 34,
      "context": "console.log(`📚 Retrieved ${this.categoryCache.get(category).length} questions from cache: ${category}`);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/enhancedDataLoader.js",
      "line": 35,
      "context": "return this.categoryCache.get(category);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/enhancedDataLoader.js",
      "line": 39,
      "context": "if (this.loadingStates.has(category)) {",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/enhancedDataLoader.js",
      "line": 40,
      "context": "return this.loadingStates.get(category);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "loadCategoryQuestions",
      "file": "src/enhancedDataLoader.js",
      "line": 44,
      "context": "const loadingPromise = this.loadCategoryQuestions(category);",
      "error": "Function 'loadCategoryQuestions' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/enhancedDataLoader.js",
      "line": 45,
      "context": "this.loadingStates.set(category, loadingPromise);",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "delete",
      "file": "src/enhancedDataLoader.js",
      "line": 49,
      "context": "this.loadingStates.delete(category);",
      "error": "Function 'delete' is not defined"
    },
    {
      "type": "function",
      "name": "delete",
      "file": "src/enhancedDataLoader.js",
      "line": 52,
      "context": "this.loadingStates.delete(category);",
      "error": "Function 'delete' is not defined"
    },
    {
      "type": "function",
      "name": "loadCategoryQuestions",
      "file": "src/enhancedDataLoader.js",
      "line": 62,
      "context": "async loadCategoryQuestions(category) {",
      "error": "Function 'loadCategoryQuestions' is not defined"
    },
    {
      "type": "function",
      "name": "Promise",
      "file": "src/enhancedDataLoader.js",
      "line": 63,
      "context": "return new Promise((resolve) => {",
      "error": "Function 'Promise' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/enhancedDataLoader.js",
      "line": 66,
      "context": "const startTime = performance.now();",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/enhancedDataLoader.js",
      "line": 73,
      "context": "const filteredQuestions = allQuestions.filter(q => {",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "sort",
      "file": "src/enhancedDataLoader.js",
      "line": 78,
      "context": "filteredQuestions.sort((a, b) => {",
      "error": "Function 'sort' is not defined"
    },
    {
      "type": "function",
      "name": "localeCompare",
      "file": "src/enhancedDataLoader.js",
      "line": 83,
      "context": "return a.id.localeCompare(b.id);",
      "error": "Function 'localeCompare' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/enhancedDataLoader.js",
      "line": 87,
      "context": "this.categoryCache.set(category, filteredQuestions);",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/enhancedDataLoader.js",
      "line": 88,
      "context": "this.usageStats.lastAccessed.set(category, Date.now());",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/enhancedDataLoader.js",
      "line": 88,
      "context": "this.usageStats.lastAccessed.set(category, Date.now());",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/enhancedDataLoader.js",
      "line": 90,
      "context": "const processingTime = performance.now() - startTime;",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 91,
      "context": "console.log(`📚 Loaded ${filteredQuestions.length} questions for category '${category}' in ${processingTime.toFixed(2)}ms`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "toFixed",
      "file": "src/enhancedDataLoader.js",
      "line": 91,
      "context": "console.log(`📚 Loaded ${filteredQuestions.length} questions for category '${category}' in ${processingTime.toFixed(2)}ms`);",
      "error": "Function 'toFixed' is not defined"
    },
    {
      "type": "function",
      "name": "resolve",
      "file": "src/enhancedDataLoader.js",
      "line": 93,
      "context": "resolve(filteredQuestions);",
      "error": "Function 'resolve' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/enhancedDataLoader.js",
      "line": 95,
      "context": "console.error(`❌ Error loading questions for category ${category}:`, error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "resolve",
      "file": "src/enhancedDataLoader.js",
      "line": 96,
      "context": "resolve([]); // Return empty array on error",
      "error": "Function 'resolve' is not defined"
    },
    {
      "type": "function",
      "name": "requestIdleCallback",
      "file": "src/enhancedDataLoader.js",
      "line": 102,
      "context": "requestIdleCallback(processQuestions);",
      "error": "Function 'requestIdleCallback' is not defined"
    },
    {
      "type": "function",
      "name": "processQuestions",
      "file": "src/enhancedDataLoader.js",
      "line": 104,
      "context": "setTimeout(() => processQuestions({}), 0);",
      "error": "Function 'processQuestions' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/enhancedDataLoader.js",
      "line": 119,
      "context": "if (this.categoryCache.has(cacheKey)) {",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/enhancedDataLoader.js",
      "line": 120,
      "context": "return this.categoryCache.get(cacheKey);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/enhancedDataLoader.js",
      "line": 124,
      "context": "const filteredQuestions = allQuestions.filter(q => q.difficulty === difficulty);",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/enhancedDataLoader.js",
      "line": 126,
      "context": "this.categoryCache.set(cacheKey, filteredQuestions);",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/enhancedDataLoader.js",
      "line": 127,
      "context": "this.usageStats.lastAccessed.set(cacheKey, Date.now());",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/enhancedDataLoader.js",
      "line": 127,
      "context": "this.usageStats.lastAccessed.set(cacheKey, Date.now());",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 129,
      "context": "console.log(`🎯 Loaded ${filteredQuestions.length} questions for difficulty: ${difficulty}`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/enhancedDataLoader.js",
      "line": 137,
      "context": "const now = Date.now();",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "entries",
      "file": "src/enhancedDataLoader.js",
      "line": 142,
      "context": "for (const [key, lastAccessed] of this.usageStats.lastAccessed.entries()) {",
      "error": "Function 'entries' is not defined"
    },
    {
      "type": "function",
      "name": "delete",
      "file": "src/enhancedDataLoader.js",
      "line": 144,
      "context": "this.categoryCache.delete(key);",
      "error": "Function 'delete' is not defined"
    },
    {
      "type": "function",
      "name": "delete",
      "file": "src/enhancedDataLoader.js",
      "line": 145,
      "context": "this.usageStats.lastAccessed.delete(key);",
      "error": "Function 'delete' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 146,
      "context": "console.log(`🗑️ Removed expired cache entry: ${key}`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "from",
      "file": "src/enhancedDataLoader.js",
      "line": 152,
      "context": "const sortedEntries = Array.from(this.usageStats.lastAccessed.entries())",
      "error": "Function 'from' is not defined"
    },
    {
      "type": "function",
      "name": "entries",
      "file": "src/enhancedDataLoader.js",
      "line": 152,
      "context": "const sortedEntries = Array.from(this.usageStats.lastAccessed.entries())",
      "error": "Function 'entries' is not defined"
    },
    {
      "type": "function",
      "name": "sort",
      "file": "src/enhancedDataLoader.js",
      "line": 153,
      "context": ".sort((a, b) => a[1] - b[1]); // Sort by last accessed time",
      "error": "Function 'sort' is not defined"
    },
    {
      "type": "function",
      "name": "slice",
      "file": "src/enhancedDataLoader.js",
      "line": 155,
      "context": "const entriesToRemove = sortedEntries.slice(0, this.categoryCache.size - maxCacheSize);",
      "error": "Function 'slice' is not defined"
    },
    {
      "type": "function",
      "name": "delete",
      "file": "src/enhancedDataLoader.js",
      "line": 158,
      "context": "this.categoryCache.delete(key);",
      "error": "Function 'delete' is not defined"
    },
    {
      "type": "function",
      "name": "delete",
      "file": "src/enhancedDataLoader.js",
      "line": 159,
      "context": "this.usageStats.lastAccessed.delete(key);",
      "error": "Function 'delete' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 160,
      "context": "console.log(`🗑️ Removed LRU cache entry: ${key}`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "preloadPopularCategories",
      "file": "src/enhancedDataLoader.js",
      "line": 168,
      "context": "async preloadPopularCategories() {",
      "error": "Function 'preloadPopularCategories' is not defined"
    },
    {
      "type": "function",
      "name": "from",
      "file": "src/enhancedDataLoader.js",
      "line": 170,
      "context": "const popularCategories = Array.from(this.usageStats.categoryRequests.entries())",
      "error": "Function 'from' is not defined"
    },
    {
      "type": "function",
      "name": "entries",
      "file": "src/enhancedDataLoader.js",
      "line": 170,
      "context": "const popularCategories = Array.from(this.usageStats.categoryRequests.entries())",
      "error": "Function 'entries' is not defined"
    },
    {
      "type": "function",
      "name": "sort",
      "file": "src/enhancedDataLoader.js",
      "line": 171,
      "context": ".sort((a, b) => b[1] - a[1])",
      "error": "Function 'sort' is not defined"
    },
    {
      "type": "function",
      "name": "slice",
      "file": "src/enhancedDataLoader.js",
      "line": 172,
      "context": ".slice(0, 3)",
      "error": "Function 'slice' is not defined"
    },
    {
      "type": "function",
      "name": "map",
      "file": "src/enhancedDataLoader.js",
      "line": 173,
      "context": ".map(([category]) => category);",
      "error": "Function 'map' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 175,
      "context": "console.log('🔄 Preloading popular categories:', popularCategories);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "map",
      "file": "src/enhancedDataLoader.js",
      "line": 178,
      "context": "const preloadPromises = popularCategories.map(category =>",
      "error": "Function 'map' is not defined"
    },
    {
      "type": "function",
      "name": "all",
      "file": "src/enhancedDataLoader.js",
      "line": 183,
      "context": "await Promise.all(preloadPromises);",
      "error": "Function 'all' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 184,
      "context": "console.log('✅ Popular categories preloaded successfully');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/enhancedDataLoader.js",
      "line": 186,
      "context": "console.warn('⚠️ Error preloading categories:', error);",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/enhancedDataLoader.js",
      "line": 195,
      "context": "const currentCount = this.usageStats.categoryRequests.get(category) || 0;",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/enhancedDataLoader.js",
      "line": 196,
      "context": "this.usageStats.categoryRequests.set(category, currentCount + 1);",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/enhancedDataLoader.js",
      "line": 204,
      "context": "const currentCount = this.usageStats.difficultyRequests.get(difficulty) || 0;",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/enhancedDataLoader.js",
      "line": 205,
      "context": "this.usageStats.difficultyRequests.set(difficulty, currentCount + 1);",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "fromEntries",
      "file": "src/enhancedDataLoader.js",
      "line": 216,
      "context": "categoryUsage: Object.fromEntries(this.usageStats.categoryRequests),",
      "error": "Function 'fromEntries' is not defined"
    },
    {
      "type": "function",
      "name": "fromEntries",
      "file": "src/enhancedDataLoader.js",
      "line": 217,
      "context": "difficultyUsage: Object.fromEntries(this.usageStats.difficultyRequests),",
      "error": "Function 'fromEntries' is not defined"
    },
    {
      "type": "function",
      "name": "fromEntries",
      "file": "src/enhancedDataLoader.js",
      "line": 218,
      "context": "lastAccessTimes: Object.fromEntries(this.usageStats.lastAccessed),",
      "error": "Function 'fromEntries' is not defined"
    },
    {
      "type": "function",
      "name": "values",
      "file": "src/enhancedDataLoader.js",
      "line": 230,
      "context": "for (const questions of this.categoryCache.values()) {",
      "error": "Function 'values' is not defined"
    },
    {
      "type": "function",
      "name": "loadGameData",
      "file": "src/enhancedDataLoader.js",
      "line": 241,
      "context": "async loadGameData() {",
      "error": "Function 'loadGameData' is not defined"
    },
    {
      "type": "function",
      "name": "loadGameData",
      "file": "src/enhancedDataLoader.js",
      "line": 242,
      "context": "const result = await this.originalLoader.loadGameData();",
      "error": "Function 'loadGameData' is not defined"
    },
    {
      "type": "function",
      "name": "preloadPopularCategories",
      "file": "src/enhancedDataLoader.js",
      "line": 246,
      "context": "this.preloadPopularCategories();",
      "error": "Function 'preloadPopularCategories' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/enhancedDataLoader.js",
      "line": 283,
      "context": "if (this.categoryCache.has(category)) {",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/enhancedDataLoader.js",
      "line": 284,
      "context": "const categoryQuestions = this.categoryCache.get(category);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/enhancedDataLoader.js",
      "line": 285,
      "context": "const availableQuestions = categoryQuestions.filter(q => !excludeIds.includes(q.id));",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "includes",
      "file": "src/enhancedDataLoader.js",
      "line": 285,
      "context": "const availableQuestions = categoryQuestions.filter(q => !excludeIds.includes(q.id));",
      "error": "Function 'includes' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/enhancedDataLoader.js",
      "line": 288,
      "context": "const randomIndex = Math.floor(Math.random() * availableQuestions.length);",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "random",
      "file": "src/enhancedDataLoader.js",
      "line": 288,
      "context": "const randomIndex = Math.floor(Math.random() * availableQuestions.length);",
      "error": "Function 'random' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/enhancedDataLoader.js",
      "line": 296,
      "context": "let filteredQuestions = allQuestions.filter(q => !excludeIds.includes(q.id));",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "includes",
      "file": "src/enhancedDataLoader.js",
      "line": 296,
      "context": "let filteredQuestions = allQuestions.filter(q => !excludeIds.includes(q.id));",
      "error": "Function 'includes' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/enhancedDataLoader.js",
      "line": 299,
      "context": "filteredQuestions = filteredQuestions.filter(q => q.category === category);",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/enhancedDataLoader.js",
      "line": 303,
      "context": "const randomIndex = Math.floor(Math.random() * filteredQuestions.length);",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "random",
      "file": "src/enhancedDataLoader.js",
      "line": 303,
      "context": "const randomIndex = Math.floor(Math.random() * filteredQuestions.length);",
      "error": "Function 'random' is not defined"
    },
    {
      "type": "function",
      "name": "clear",
      "file": "src/enhancedDataLoader.js",
      "line": 314,
      "context": "this.categoryCache.clear();",
      "error": "Function 'clear' is not defined"
    },
    {
      "type": "function",
      "name": "clear",
      "file": "src/enhancedDataLoader.js",
      "line": 315,
      "context": "this.loadingStates.clear();",
      "error": "Function 'clear' is not defined"
    },
    {
      "type": "function",
      "name": "clear",
      "file": "src/enhancedDataLoader.js",
      "line": 316,
      "context": "this.usageStats.categoryRequests.clear();",
      "error": "Function 'clear' is not defined"
    },
    {
      "type": "function",
      "name": "clear",
      "file": "src/enhancedDataLoader.js",
      "line": 317,
      "context": "this.usageStats.difficultyRequests.clear();",
      "error": "Function 'clear' is not defined"
    },
    {
      "type": "function",
      "name": "clear",
      "file": "src/enhancedDataLoader.js",
      "line": 318,
      "context": "this.usageStats.lastAccessed.clear();",
      "error": "Function 'clear' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 320,
      "context": "console.log('🧹 Enhanced DataLoader cache cleared');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "clear",
      "file": "src/enhancedDataLoader.js",
      "line": 330,
      "context": "this.loadingStates.clear();",
      "error": "Function 'clear' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/enhancedDataLoader.js",
      "line": 332,
      "context": "console.log('🧹 Enhanced DataLoader cleanup completed');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "Map",
      "file": "src/enhancedUIManager.js",
      "line": 9,
      "context": "this.updateQueue = new Map();",
      "error": "Function 'Map' is not defined"
    },
    {
      "type": "function",
      "name": "Map",
      "file": "src/enhancedUIManager.js",
      "line": 16,
      "context": "this.optimizedUpdates = new Map();",
      "error": "Function 'Map' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/enhancedUIManager.js",
      "line": 19,
      "context": "console.log('🚀 Enhanced UIManager initialized with performance optimizations');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/enhancedUIManager.js",
      "line": 33,
      "context": "console.log('📦 UI element pools initialized');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/enhancedUIManager.js",
      "line": 41,
      "context": "this.optimizedUpdates.set('score', this.createScoreUpdater());",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/enhancedUIManager.js",
      "line": 44,
      "context": "this.optimizedUpdates.set('roomInfo', this.createRoomInfoUpdater());",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/enhancedUIManager.js",
      "line": 47,
      "context": "this.optimizedUpdates.set('question', this.createQuestionUpdater());",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/enhancedUIManager.js",
      "line": 50,
      "context": "this.optimizedUpdates.set('progress', this.createProgressUpdater());",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/enhancedUIManager.js",
      "line": 53,
      "context": "this.optimizedUpdates.set('timer', this.createTimerUpdater());",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "return",
      "file": "src/enhancedUIManager.js",
      "line": 63,
      "context": "return (newScore) => {",
      "error": "Function 'return' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 65,
      "context": "scoreElement = document.getElementById('current-score');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "updateText",
      "file": "src/enhancedUIManager.js",
      "line": 70,
      "context": "DOMUpdateTemplates.updateText(scoreElement, newScore.toString()),",
      "error": "Function 'updateText' is not defined"
    },
    {
      "type": "function",
      "name": "toString",
      "file": "src/enhancedUIManager.js",
      "line": 70,
      "context": "DOMUpdateTemplates.updateText(scoreElement, newScore.toString()),",
      "error": "Function 'toString' is not defined"
    },
    {
      "type": "function",
      "name": "return",
      "file": "src/enhancedUIManager.js",
      "line": 85,
      "context": "return (roomData) => {",
      "error": "Function 'return' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 89,
      "context": "elements.name = document.getElementById('room-name');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 90,
      "context": "elements.description = document.getElementById('room-description');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 91,
      "context": "elements.connections = document.getElementById('room-connections');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/enhancedUIManager.js",
      "line": 97,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.name, roomData.name));",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "updateText",
      "file": "src/enhancedUIManager.js",
      "line": 97,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.name, roomData.name));",
      "error": "Function 'updateText' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/enhancedUIManager.js",
      "line": 101,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.description, roomData.description));",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "updateText",
      "file": "src/enhancedUIManager.js",
      "line": 101,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.description, roomData.description));",
      "error": "Function 'updateText' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/enhancedUIManager.js",
      "line": 105,
      "context": "updates.push(() => this.updateRoomConnections(elements.connections, roomData.connections));",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/enhancedUIManager.js",
      "line": 109,
      "context": "updates.forEach(update => this.performanceManager.batchDOMUpdate(update, 2));",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "return",
      "file": "src/enhancedUIManager.js",
      "line": 122,
      "context": "return (questionData) => {",
      "error": "Function 'return' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 126,
      "context": "elements.text = document.getElementById('question-text');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 127,
      "context": "elements.category = document.getElementById('question-category');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 128,
      "context": "elements.difficulty = document.getElementById('question-difficulty');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 129,
      "context": "elements.points = document.getElementById('question-points');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 130,
      "context": "elements.answers = document.getElementById('answer-buttons');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/enhancedUIManager.js",
      "line": 136,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.text, questionData.question));",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "updateText",
      "file": "src/enhancedUIManager.js",
      "line": 136,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.text, questionData.question));",
      "error": "Function 'updateText' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/enhancedUIManager.js",
      "line": 140,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.category, questionData.category));",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "updateText",
      "file": "src/enhancedUIManager.js",
      "line": 140,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.category, questionData.category));",
      "error": "Function 'updateText' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/enhancedUIManager.js",
      "line": 144,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.difficulty, questionData.difficulty));",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "updateText",
      "file": "src/enhancedUIManager.js",
      "line": 144,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.difficulty, questionData.difficulty));",
      "error": "Function 'updateText' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/enhancedUIManager.js",
      "line": 148,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.points, `${questionData.points} points`));",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "updateText",
      "file": "src/enhancedUIManager.js",
      "line": 148,
      "context": "updates.push(DOMUpdateTemplates.updateText(elements.points, `${questionData.points} points`));",
      "error": "Function 'updateText' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/enhancedUIManager.js",
      "line": 152,
      "context": "updates.push(() => this.updateAnswerButtons(elements.answers, questionData.answers));",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/enhancedUIManager.js",
      "line": 156,
      "context": "updates.forEach(update => this.performanceManager.batchDOMUpdate(update, 1));",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "return",
      "file": "src/enhancedUIManager.js",
      "line": 169,
      "context": "return (progressData) => {",
      "error": "Function 'return' is not defined"
    },
    {
      "type": "function",
      "name": "stringify",
      "file": "src/enhancedUIManager.js",
      "line": 170,
      "context": "const progressKey = JSON.stringify(progressData);",
      "error": "Function 'stringify' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 175,
      "context": "percent: document.getElementById('overall-progress-percent'),",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 176,
      "context": "fill: document.getElementById('overall-progress-fill')",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 179,
      "context": "percent: document.getElementById('rooms-progress-percent'),",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 180,
      "context": "fill: document.getElementById('rooms-progress-fill')",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 183,
      "context": "percent: document.getElementById('accuracy-progress-percent'),",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 184,
      "context": "fill: document.getElementById('accuracy-progress-fill')",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/enhancedUIManager.js",
      "line": 189,
      "context": "console.warn('Enhanced UI: Overall progress elements not found');",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/enhancedUIManager.js",
      "line": 192,
      "context": "console.warn('Enhanced UI: Rooms progress elements not found');",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/enhancedUIManager.js",
      "line": 195,
      "context": "console.warn('Enhanced UI: Accuracy progress elements not found');",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/enhancedUIManager.js",
      "line": 202,
      "context": "updates.push(() => {",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "round",
      "file": "src/enhancedUIManager.js",
      "line": 203,
      "context": "elements.overall.percent.textContent = `${Math.round(progressData.overall)}%`;",
      "error": "Function 'round' is not defined"
    },
    {
      "type": "function",
      "name": "max",
      "file": "src/enhancedUIManager.js",
      "line": 204,
      "context": "elements.overall.fill.style.width = `${Math.max(0, progressData.overall)}%`;",
      "error": "Function 'max' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/enhancedUIManager.js",
      "line": 205,
      "context": "elements.overall.fill.setAttribute('aria-valuenow', progressData.overall);",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/enhancedUIManager.js",
      "line": 210,
      "context": "updates.push(() => {",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "round",
      "file": "src/enhancedUIManager.js",
      "line": 211,
      "context": "elements.rooms.percent.textContent = `${Math.round(progressData.rooms)}%`;",
      "error": "Function 'round' is not defined"
    },
    {
      "type": "function",
      "name": "max",
      "file": "src/enhancedUIManager.js",
      "line": 212,
      "context": "elements.rooms.fill.style.width = `${Math.max(0, progressData.rooms)}%`;",
      "error": "Function 'max' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/enhancedUIManager.js",
      "line": 213,
      "context": "elements.rooms.fill.setAttribute('aria-valuenow', progressData.rooms);",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/enhancedUIManager.js",
      "line": 218,
      "context": "updates.push(() => {",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "round",
      "file": "src/enhancedUIManager.js",
      "line": 219,
      "context": "elements.accuracy.percent.textContent = `${Math.round(progressData.accuracy)}%`;",
      "error": "Function 'round' is not defined"
    },
    {
      "type": "function",
      "name": "max",
      "file": "src/enhancedUIManager.js",
      "line": 220,
      "context": "elements.accuracy.fill.style.width = `${Math.max(0, progressData.accuracy)}%`;",
      "error": "Function 'max' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/enhancedUIManager.js",
      "line": 221,
      "context": "elements.accuracy.fill.setAttribute('aria-valuenow', progressData.accuracy);",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/enhancedUIManager.js",
      "line": 226,
      "context": "updates.forEach(update => this.performanceManager.batchDOMUpdate(update, 2));",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "return",
      "file": "src/enhancedUIManager.js",
      "line": 239,
      "context": "return (timeRemaining, totalTime) => {",
      "error": "Function 'return' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/enhancedUIManager.js",
      "line": 243,
      "context": "timerElement = document.getElementById('timer-text');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/enhancedUIManager.js",
      "line": 245,
      "context": "console.warn('Enhanced UI: Timer element (timer-text) not found');",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "element",
      "file": "src/enhancedUIManager.js",
      "line": 245,
      "context": "console.warn('Enhanced UI: Timer element (timer-text) not found');",
      "error": "Function 'element' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/enhancedUIManager.js",
      "line": 267,
      "context": "connections.forEach(connection => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/enhancedUIManager.js",
      "line": 269,
      "context": "const link = connectionElement.querySelector('.connection-link');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/enhancedUIManager.js",
      "line": 272,
      "context": "link.setAttribute('data-room-id', connection.id);",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/enhancedUIManager.js",
      "line": 273,
      "context": "link.setAttribute('aria-label', `Navigate to ${connection.name}`);",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/enhancedUIManager.js",
      "line": 276,
      "context": "connectionElement.classList.add('locked');",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/enhancedUIManager.js",
      "line": 279,
      "context": "connectionElement.classList.remove('locked');",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/enhancedUIManager.js",
      "line": 284,
      "context": "container.appendChild(connectionElement);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/enhancedUIManager.js",
      "line": 295,
      "context": "answers.forEach((answer, index) => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/enhancedUIManager.js",
      "line": 299,
      "context": "button.setAttribute('data-answer-index', index);",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/enhancedUIManager.js",
      "line": 300,
      "context": "button.setAttribute('aria-label', `Answer option ${index + 1}: ${answer}`);",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/enhancedUIManager.js",
      "line": 303,
      "context": "container.appendChild(button);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/enhancedUIManager.js",
      "line": 312,
      "context": "const icon = notification.querySelector('.toast-icon');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/enhancedUIManager.js",
      "line": 313,
      "context": "const titleElement = notification.querySelector('.toast-title');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/enhancedUIManager.js",
      "line": 314,
      "context": "const messageElement = notification.querySelector('.toast-message');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/enhancedUIManager.js",
      "line": 318,
      "context": "notification.setAttribute('data-type', type);",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/enhancedUIManager.js",
      "line": 333,
      "context": "document.body.appendChild(notification);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "translateX",
      "file": "src/enhancedUIManager.js",
      "line": 337,
      "context": "notification.style.transform = 'translateX(0)';",
      "error": "Function 'translateX' is not defined"
    },
    {
      "type": "function",
      "name": "translateX",
      "file": "src/enhancedUIManager.js",
      "line": 343,
      "context": "notification.style.transform = 'translateX(100%)';",
      "error": "Function 'translateX' is not defined"
    },
    {
      "type": "function",
      "name": "removeChild",
      "file": "src/enhancedUIManager.js",
      "line": 348,
      "context": "notification.parentNode.removeChild(notification);",
      "error": "Function 'removeChild' is not defined"
    },
    {
      "type": "function",
      "name": "entries",
      "file": "src/enhancedUIManager.js",
      "line": 359,
      "context": "for (const [type, data] of Object.entries(updates)) {",
      "error": "Function 'entries' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/enhancedUIManager.js",
      "line": 360,
      "context": "const updater = this.optimizedUpdates.get(type);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "updater",
      "file": "src/enhancedUIManager.js",
      "line": 362,
      "context": "updater(data);",
      "error": "Function 'updater' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/enhancedUIManager.js",
      "line": 371,
      "context": "const updater = this.optimizedUpdates.get('score');",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "updater",
      "file": "src/enhancedUIManager.js",
      "line": 373,
      "context": "updater(score);",
      "error": "Function 'updater' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/enhancedUIManager.js",
      "line": 380,
      "context": "const updater = this.optimizedUpdates.get('roomInfo');",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "updater",
      "file": "src/enhancedUIManager.js",
      "line": 382,
      "context": "updater(roomData);",
      "error": "Function 'updater' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/enhancedUIManager.js",
      "line": 389,
      "context": "const updater = this.optimizedUpdates.get('question');",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "updater",
      "file": "src/enhancedUIManager.js",
      "line": 391,
      "context": "updater(questionData);",
      "error": "Function 'updater' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/enhancedUIManager.js",
      "line": 398,
      "context": "const updater = this.optimizedUpdates.get('progress');",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "updater",
      "file": "src/enhancedUIManager.js",
      "line": 400,
      "context": "updater(progressData);",
      "error": "Function 'updater' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/enhancedUIManager.js",
      "line": 407,
      "context": "const updater = this.optimizedUpdates.get('timer');",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "updater",
      "file": "src/enhancedUIManager.js",
      "line": 409,
      "context": "updater(timeRemaining, totalTime);",
      "error": "Function 'updater' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/enhancedUIManager.js",
      "line": 427,
      "context": "['answerButtons', 'notifications', 'roomConnections', 'progressBars', 'timers'].forEach(poolName => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/enhancedUIManager.js",
      "line": 428,
      "context": "const pool = this.performanceManager.objectPools.get(poolName);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "clear",
      "file": "src/enhancedUIManager.js",
      "line": 431,
      "context": "pool.inUse.clear();",
      "error": "Function 'clear' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/enhancedUIManager.js",
      "line": 434,
      "context": "pool.available.forEach(item => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "clear",
      "file": "src/enhancedUIManager.js",
      "line": 443,
      "context": "this.updateQueue.clear();",
      "error": "Function 'clear' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/enhancedUIManager.js",
      "line": 446,
      "context": "console.log('🧹 Enhanced UIManager cleanup completed');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "map",
      "file": "src/enhancedUIManager.js",
      "line": 455,
      "context": ".map(name => this.performanceManager.getPoolStats(name)),",
      "error": "Function 'map' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 11,
      "context": "startTime: Date.now(),",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "Map",
      "file": "src/learningAnalytics.js",
      "line": 13,
      "context": "questionPatterns: new Map(),",
      "error": "Function 'Map' is not defined"
    },
    {
      "type": "function",
      "name": "Map",
      "file": "src/learningAnalytics.js",
      "line": 18,
      "context": "categoryPerformance: new Map(),",
      "error": "Function 'Map' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/learningAnalytics.js",
      "line": 41,
      "context": "console.log('📊 LearningAnalytics initialized - Advanced educational tracking active');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 49,
      "context": "return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "random",
      "file": "src/learningAnalytics.js",
      "line": 49,
      "context": "return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;",
      "error": "Function 'random' is not defined"
    },
    {
      "type": "function",
      "name": "toString",
      "file": "src/learningAnalytics.js",
      "line": 49,
      "context": "return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;",
      "error": "Function 'toString' is not defined"
    },
    {
      "type": "function",
      "name": "substr",
      "file": "src/learningAnalytics.js",
      "line": 49,
      "context": "return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;",
      "error": "Function 'substr' is not defined"
    },
    {
      "type": "function",
      "name": "getItem",
      "file": "src/learningAnalytics.js",
      "line": 57,
      "context": "const saved = localStorage.getItem('lobeLabyrinth_analytics');",
      "error": "Function 'getItem' is not defined"
    },
    {
      "type": "function",
      "name": "parse",
      "file": "src/learningAnalytics.js",
      "line": 59,
      "context": "const data = JSON.parse(saved);",
      "error": "Function 'parse' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/learningAnalytics.js",
      "line": 69,
      "context": "console.warn('Failed to load learning analytics data:', error);",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 89,
      "context": "createdAt: Date.now()",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/learningAnalytics.js",
      "line": 98,
      "context": "console.warn('PerformanceObserver not supported');",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "PerformanceObserver",
      "file": "src/learningAnalytics.js",
      "line": 103,
      "context": "const observer = new PerformanceObserver((list) => {",
      "error": "Function 'PerformanceObserver' is not defined"
    },
    {
      "type": "function",
      "name": "getEntries",
      "file": "src/learningAnalytics.js",
      "line": 104,
      "context": "for (const entry of list.getEntries()) {",
      "error": "Function 'getEntries' is not defined"
    },
    {
      "type": "function",
      "name": "includes",
      "file": "src/learningAnalytics.js",
      "line": 105,
      "context": "if (entry.name.includes('question') || entry.name.includes('answer')) {",
      "error": "Function 'includes' is not defined"
    },
    {
      "type": "function",
      "name": "includes",
      "file": "src/learningAnalytics.js",
      "line": 105,
      "context": "if (entry.name.includes('question') || entry.name.includes('answer')) {",
      "error": "Function 'includes' is not defined"
    },
    {
      "type": "function",
      "name": "observe",
      "file": "src/learningAnalytics.js",
      "line": 111,
      "context": "observer.observe({ entryTypes: ['measure', 'navigation'] });",
      "error": "Function 'observe' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/learningAnalytics.js",
      "line": 113,
      "context": "console.warn('Performance observer setup failed:', error);",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 122,
      "context": "this.sessionData.timePatterns.push({",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 123,
      "context": "timestamp: Date.now(),",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 156,
      "context": "timestamp: Date.now()",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/learningAnalytics.js",
      "line": 159,
      "context": "this.sessionData.questionPatterns.set(questionId, pattern);",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 160,
      "context": "this.sessionData.difficultyProgression.push(difficulty);",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 163,
      "context": "this.sessionData.hintUsage.push({",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 167,
      "context": "timestamp: Date.now()",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 173,
      "context": "this.sessionData.errorPatterns.push({",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 179,
      "context": "timestamp: Date.now()",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/learningAnalytics.js",
      "line": 184,
      "context": "if (!this.sessionData.categoryPerformance.has(category)) {",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/learningAnalytics.js",
      "line": 185,
      "context": "this.sessionData.categoryPerformance.set(category, {",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/learningAnalytics.js",
      "line": 193,
      "context": "const categoryStats = this.sessionData.categoryPerformance.get(category);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/learningAnalytics.js",
      "line": 208,
      "context": "console.log(`📈 Tracked response: ${category} (${difficulty}) - ${isCorrect ? 'Correct' : 'Incorrect'}`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "max",
      "file": "src/learningAnalytics.js",
      "line": 226,
      "context": "this.learnerProfile.longestStreak = Math.max(",
      "error": "Function 'max' is not defined"
    },
    {
      "type": "function",
      "name": "from",
      "file": "src/learningAnalytics.js",
      "line": 249,
      "context": "const totalCorrect = Array.from(this.sessionData.questionPatterns.values())",
      "error": "Function 'from' is not defined"
    },
    {
      "type": "function",
      "name": "values",
      "file": "src/learningAnalytics.js",
      "line": 249,
      "context": "const totalCorrect = Array.from(this.sessionData.questionPatterns.values())",
      "error": "Function 'values' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/learningAnalytics.js",
      "line": 250,
      "context": ".filter(p => p.isCorrect).length;",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/learningAnalytics.js",
      "line": 265,
      "context": "const categoryStats = this.sessionData.categoryPerformance.get(pattern.category);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "includes",
      "file": "src/learningAnalytics.js",
      "line": 269,
      "context": "if (!this.learnerProfile.strongCategories.includes(pattern.category)) {",
      "error": "Function 'includes' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 270,
      "context": "this.learnerProfile.strongCategories.push(pattern.category);",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/learningAnalytics.js",
      "line": 274,
      "context": ".filter(cat => cat !== pattern.category);",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "includes",
      "file": "src/learningAnalytics.js",
      "line": 276,
      "context": "if (!this.learnerProfile.improvementAreas.includes(pattern.category)) {",
      "error": "Function 'includes' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 277,
      "context": "this.learnerProfile.improvementAreas.push(pattern.category);",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/learningAnalytics.js",
      "line": 281,
      "context": ".filter(cat => cat !== pattern.category);",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "from",
      "file": "src/learningAnalytics.js",
      "line": 290,
      "context": "const recentPatterns = Array.from(this.sessionData.questionPatterns.values())",
      "error": "Function 'from' is not defined"
    },
    {
      "type": "function",
      "name": "values",
      "file": "src/learningAnalytics.js",
      "line": 290,
      "context": "const recentPatterns = Array.from(this.sessionData.questionPatterns.values())",
      "error": "Function 'values' is not defined"
    },
    {
      "type": "function",
      "name": "slice",
      "file": "src/learningAnalytics.js",
      "line": 291,
      "context": ".slice(-this.learningMetrics.velocityWindow);",
      "error": "Function 'slice' is not defined"
    },
    {
      "type": "function",
      "name": "reduce",
      "file": "src/learningAnalytics.js",
      "line": 294,
      "context": "const averageTime = recentPatterns.reduce((sum, p) => sum + p.timeSpent, 0) / recentPatterns.length;",
      "error": "Function 'reduce' is not defined"
    },
    {
      "type": "function",
      "name": "from",
      "file": "src/learningAnalytics.js",
      "line": 311,
      "context": "const patterns = Array.from(this.sessionData.questionPatterns.values());",
      "error": "Function 'from' is not defined"
    },
    {
      "type": "function",
      "name": "values",
      "file": "src/learningAnalytics.js",
      "line": 311,
      "context": "const patterns = Array.from(this.sessionData.questionPatterns.values());",
      "error": "Function 'values' is not defined"
    },
    {
      "type": "function",
      "name": "slice",
      "file": "src/learningAnalytics.js",
      "line": 316,
      "context": "const recentPatterns = patterns.slice(-this.learningMetrics.velocityWindow);",
      "error": "Function 'slice' is not defined"
    },
    {
      "type": "function",
      "name": "slice",
      "file": "src/learningAnalytics.js",
      "line": 317,
      "context": "const firstHalf = recentPatterns.slice(0, Math.floor(recentPatterns.length / 2));",
      "error": "Function 'slice' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/learningAnalytics.js",
      "line": 317,
      "context": "const firstHalf = recentPatterns.slice(0, Math.floor(recentPatterns.length / 2));",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "slice",
      "file": "src/learningAnalytics.js",
      "line": 318,
      "context": "const secondHalf = recentPatterns.slice(Math.floor(recentPatterns.length / 2));",
      "error": "Function 'slice' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/learningAnalytics.js",
      "line": 318,
      "context": "const secondHalf = recentPatterns.slice(Math.floor(recentPatterns.length / 2));",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/learningAnalytics.js",
      "line": 320,
      "context": "const firstHalfAccuracy = firstHalf.filter(p => p.isCorrect).length / firstHalf.length;",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/learningAnalytics.js",
      "line": 321,
      "context": "const secondHalfAccuracy = secondHalf.filter(p => p.isCorrect).length / secondHalf.length;",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "min",
      "file": "src/learningAnalytics.js",
      "line": 335,
      "context": "confidence: Math.min(recentPatterns.length / this.learningMetrics.velocityWindow, 1),",
      "error": "Function 'min' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 353,
      "context": "timestamp: Date.now(),",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "from",
      "file": "src/learningAnalytics.js",
      "line": 372,
      "context": "const patterns = Array.from(this.sessionData.questionPatterns.values());",
      "error": "Function 'from' is not defined"
    },
    {
      "type": "function",
      "name": "values",
      "file": "src/learningAnalytics.js",
      "line": 372,
      "context": "const patterns = Array.from(this.sessionData.questionPatterns.values());",
      "error": "Function 'values' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/learningAnalytics.js",
      "line": 374,
      "context": "const correctAnswers = patterns.filter(p => p.isCorrect).length;",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "reduce",
      "file": "src/learningAnalytics.js",
      "line": 377,
      "context": "const totalTime = patterns.reduce((sum, p) => sum + p.timeSpent, 0);",
      "error": "Function 'reduce' is not defined"
    },
    {
      "type": "function",
      "name": "from",
      "file": "src/learningAnalytics.js",
      "line": 380,
      "context": "const categories = Array.from(this.sessionData.categoryPerformance.entries());",
      "error": "Function 'from' is not defined"
    },
    {
      "type": "function",
      "name": "entries",
      "file": "src/learningAnalytics.js",
      "line": 380,
      "context": "const categories = Array.from(this.sessionData.categoryPerformance.entries());",
      "error": "Function 'entries' is not defined"
    },
    {
      "type": "function",
      "name": "reduce",
      "file": "src/learningAnalytics.js",
      "line": 381,
      "context": "const hintsUsed = this.sessionData.hintUsage.reduce((sum, h) => sum + h.hintsUsed, 0);",
      "error": "Function 'reduce' is not defined"
    },
    {
      "type": "function",
      "name": "round",
      "file": "src/learningAnalytics.js",
      "line": 386,
      "context": "accuracy: Math.round(accuracy * 100),",
      "error": "Function 'round' is not defined"
    },
    {
      "type": "function",
      "name": "round",
      "file": "src/learningAnalytics.js",
      "line": 387,
      "context": "averageTimePerQuestion: Math.round(averageTimePerQuestion / 1000), // Convert to seconds",
      "error": "Function 'round' is not defined"
    },
    {
      "type": "function",
      "name": "round",
      "file": "src/learningAnalytics.js",
      "line": 392,
      "context": "sessionDuration: Math.round((Date.now() - this.sessionData.startTime) / 1000 / 60) // minutes",
      "error": "Function 'round' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 392,
      "context": "sessionDuration: Math.round((Date.now() - this.sessionData.startTime) / 1000 / 60) // minutes",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "from",
      "file": "src/learningAnalytics.js",
      "line": 401,
      "context": "const categoryPerformance = Array.from(this.sessionData.categoryPerformance.entries())",
      "error": "Function 'from' is not defined"
    },
    {
      "type": "function",
      "name": "entries",
      "file": "src/learningAnalytics.js",
      "line": 401,
      "context": "const categoryPerformance = Array.from(this.sessionData.categoryPerformance.entries())",
      "error": "Function 'entries' is not defined"
    },
    {
      "type": "function",
      "name": "map",
      "file": "src/learningAnalytics.js",
      "line": 402,
      "context": ".map(([category, stats]) => ({",
      "error": "Function 'map' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/learningAnalytics.js",
      "line": 408,
      "context": ".filter(cat => cat.questionsAnswered >= 2); // Only consider categories with at least 2 questions",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/learningAnalytics.js",
      "line": 411,
      "context": ".filter(cat => cat.accuracy >= this.learningMetrics.masteryThreshold)",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "sort",
      "file": "src/learningAnalytics.js",
      "line": 412,
      "context": ".sort((a, b) => b.accuracy - a.accuracy);",
      "error": "Function 'sort' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/learningAnalytics.js",
      "line": 415,
      "context": ".filter(cat => cat.accuracy < 0.6)",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "sort",
      "file": "src/learningAnalytics.js",
      "line": 416,
      "context": ".sort((a, b) => a.accuracy - b.accuracy);",
      "error": "Function 'sort' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 433,
      "context": "recommendations.push({",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 444,
      "context": "recommendations.push({",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 455,
      "context": "recommendations.push({",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 467,
      "context": "recommendations.push({",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 478,
      "context": "recommendations.push({",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 486,
      "context": "recommendations.push({",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "slice",
      "file": "src/learningAnalytics.js",
      "line": 495,
      "context": "return recommendations.slice(0, 3); // Limit to top 3 recommendations",
      "error": "Function 'slice' is not defined"
    },
    {
      "type": "function",
      "name": "floor",
      "file": "src/learningAnalytics.js",
      "line": 539,
      "context": "return categoryMessages[Math.floor(Math.random() * categoryMessages.length)];",
      "error": "Function 'floor' is not defined"
    },
    {
      "type": "function",
      "name": "random",
      "file": "src/learningAnalytics.js",
      "line": 539,
      "context": "return categoryMessages[Math.floor(Math.random() * categoryMessages.length)];",
      "error": "Function 'random' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 551,
      "context": "lastUpdated: Date.now()",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "setItem",
      "file": "src/learningAnalytics.js",
      "line": 554,
      "context": "localStorage.setItem('lobeLabyrinth_analytics', JSON.stringify(dataToSave));",
      "error": "Function 'setItem' is not defined"
    },
    {
      "type": "function",
      "name": "stringify",
      "file": "src/learningAnalytics.js",
      "line": 554,
      "context": "localStorage.setItem('lobeLabyrinth_analytics', JSON.stringify(dataToSave));",
      "error": "Function 'stringify' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/learningAnalytics.js",
      "line": 555,
      "context": "console.log('📊 Learning analytics data saved');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/learningAnalytics.js",
      "line": 557,
      "context": "console.error('Failed to save learning analytics data:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 568,
      "context": "endTime: Date.now(),",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 569,
      "context": "duration: Date.now() - this.sessionData.startTime,",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/learningAnalytics.js",
      "line": 575,
      "context": "this.historicalData.push(sessionSummary);",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/learningAnalytics.js",
      "line": 578,
      "context": "console.log('📋 Session ended and archived:', this.sessionData.sessionId);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/learningAnalytics.js",
      "line": 594,
      "context": "sessionDuration: Date.now() - this.sessionData.startTime",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "Map",
      "file": "src/performanceManager.js",
      "line": 8,
      "context": "this.objectPools = new Map();",
      "error": "Function 'Map' is not defined"
    },
    {
      "type": "function",
      "name": "Map",
      "file": "src/performanceManager.js",
      "line": 20,
      "context": "this.questionCache = new Map();",
      "error": "Function 'Map' is not defined"
    },
    {
      "type": "function",
      "name": "Map",
      "file": "src/performanceManager.js",
      "line": 21,
      "context": "this.loadingPromises = new Map();",
      "error": "Function 'Map' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/performanceManager.js",
      "line": 25,
      "context": "this.lastFrameTime = performance.now();",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/performanceManager.js",
      "line": 28,
      "context": "console.log('🚀 PerformanceManager initialized');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/performanceManager.js",
      "line": 45,
      "context": "if (this.objectPools.has(poolName)) {",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/performanceManager.js",
      "line": 46,
      "context": "return this.objectPools.get(poolName);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "Set",
      "file": "src/performanceManager.js",
      "line": 51,
      "context": "inUse: new Set(),",
      "error": "Function 'Set' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/performanceManager.js",
      "line": 60,
      "context": "pool.available.push(factory());",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "factory",
      "file": "src/performanceManager.js",
      "line": 60,
      "context": "pool.available.push(factory());",
      "error": "Function 'factory' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/performanceManager.js",
      "line": 64,
      "context": "this.objectPools.set(poolName, pool);",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/performanceManager.js",
      "line": 65,
      "context": "console.log(`📦 Created object pool '${poolName}' with ${initialSize} objects`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/performanceManager.js",
      "line": 75,
      "context": "const pool = this.objectPools.get(poolName);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "Error",
      "file": "src/performanceManager.js",
      "line": 77,
      "context": "throw new Error(`Pool '${poolName}' does not exist`);",
      "error": "Function 'Error' is not defined"
    },
    {
      "type": "function",
      "name": "pop",
      "file": "src/performanceManager.js",
      "line": 82,
      "context": "obj = pool.available.pop();",
      "error": "Function 'pop' is not defined"
    },
    {
      "type": "function",
      "name": "factory",
      "file": "src/performanceManager.js",
      "line": 86,
      "context": "obj = pool.factory();",
      "error": "Function 'factory' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/performanceManager.js",
      "line": 92,
      "context": "pool.inUse.add(obj);",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/performanceManager.js",
      "line": 102,
      "context": "const pool = this.objectPools.get(poolName);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/performanceManager.js",
      "line": 103,
      "context": "if (!pool || !pool.inUse.has(obj)) {",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "delete",
      "file": "src/performanceManager.js",
      "line": 107,
      "context": "pool.inUse.delete(obj);",
      "error": "Function 'delete' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/performanceManager.js",
      "line": 114,
      "context": "pool.available.push(obj);",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/performanceManager.js",
      "line": 124,
      "context": "const pool = this.objectPools.get(poolName);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "lazyLoadQuestions",
      "file": "src/performanceManager.js",
      "line": 149,
      "context": "async lazyLoadQuestions(category, allQuestions) {",
      "error": "Function 'lazyLoadQuestions' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/performanceManager.js",
      "line": 151,
      "context": "if (this.questionCache.has(category)) {",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/performanceManager.js",
      "line": 152,
      "context": "return this.questionCache.get(category);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/performanceManager.js",
      "line": 156,
      "context": "if (this.loadingPromises.has(category)) {",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/performanceManager.js",
      "line": 157,
      "context": "return this.loadingPromises.get(category);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "Promise",
      "file": "src/performanceManager.js",
      "line": 161,
      "context": "const loadPromise = new Promise((resolve) => {",
      "error": "Function 'Promise' is not defined"
    },
    {
      "type": "function",
      "name": "requestIdleCallback",
      "file": "src/performanceManager.js",
      "line": 163,
      "context": "requestIdleCallback(() => {",
      "error": "Function 'requestIdleCallback' is not defined"
    },
    {
      "type": "function",
      "name": "filter",
      "file": "src/performanceManager.js",
      "line": 164,
      "context": "const filteredQuestions = allQuestions.filter(q =>",
      "error": "Function 'filter' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/performanceManager.js",
      "line": 168,
      "context": "this.questionCache.set(category, filteredQuestions);",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "delete",
      "file": "src/performanceManager.js",
      "line": 169,
      "context": "this.loadingPromises.delete(category);",
      "error": "Function 'delete' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/performanceManager.js",
      "line": 171,
      "context": "console.log(`📚 Lazy loaded ${filteredQuestions.length} questions for category: ${category}`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "resolve",
      "file": "src/performanceManager.js",
      "line": 172,
      "context": "resolve(filteredQuestions);",
      "error": "Function 'resolve' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/performanceManager.js",
      "line": 176,
      "context": "this.loadingPromises.set(category, loadPromise);",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "clear",
      "file": "src/performanceManager.js",
      "line": 182,
      "context": "* @param {string} category - Category to clear (optional)",
      "error": "Function 'clear' is not defined"
    },
    {
      "type": "function",
      "name": "delete",
      "file": "src/performanceManager.js",
      "line": 186,
      "context": "this.questionCache.delete(category);",
      "error": "Function 'delete' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/performanceManager.js",
      "line": 187,
      "context": "console.log(`🗑️ Cleared question cache for category: ${category}`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "clear",
      "file": "src/performanceManager.js",
      "line": 189,
      "context": "this.questionCache.clear();",
      "error": "Function 'clear' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/performanceManager.js",
      "line": 190,
      "context": "console.log('🗑️ Cleared all question caches');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "level",
      "file": "src/performanceManager.js",
      "line": 202,
      "context": "* @param {number} priority - Priority level (1-3, 1 = highest)",
      "error": "Function 'level' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/performanceManager.js",
      "line": 205,
      "context": "this.domBatchQueue.push({",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/performanceManager.js",
      "line": 208,
      "context": "timestamp: performance.now()",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "sort",
      "file": "src/performanceManager.js",
      "line": 238,
      "context": "this.domBatchQueue.sort((a, b) => a.priority - b.priority);",
      "error": "Function 'sort' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/performanceManager.js",
      "line": 240,
      "context": "const batchStartTime = performance.now();",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "shift",
      "file": "src/performanceManager.js",
      "line": 245,
      "context": "const { update } = this.domBatchQueue.shift();",
      "error": "Function 'shift' is not defined"
    },
    {
      "type": "function",
      "name": "update",
      "file": "src/performanceManager.js",
      "line": 248,
      "context": "update();",
      "error": "Function 'update' is not defined"
    },
    {
      "type": "function",
      "name": "error",
      "file": "src/performanceManager.js",
      "line": 251,
      "context": "console.error('🚨 Error in batched DOM update:', error);",
      "error": "Function 'error' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/performanceManager.js",
      "line": 255,
      "context": "if (performance.now() - batchStartTime > 8) { // 8ms budget",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/performanceManager.js",
      "line": 268,
      "context": "console.log(`⚡ Executed ${updatesExecuted} DOM updates in ${Math.round(performance.now() - batchStartTime)}ms`);",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "round",
      "file": "src/performanceManager.js",
      "line": 268,
      "context": "console.log(`⚡ Executed ${updatesExecuted} DOM updates in ${Math.round(performance.now() - batchStartTime)}ms`);",
      "error": "Function 'round' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/performanceManager.js",
      "line": 268,
      "context": "console.log(`⚡ Executed ${updatesExecuted} DOM updates in ${Math.round(performance.now() - batchStartTime)}ms`);",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "return",
      "file": "src/performanceManager.js",
      "line": 278,
      "context": "return () => {",
      "error": "Function 'return' is not defined"
    },
    {
      "type": "function",
      "name": "entries",
      "file": "src/performanceManager.js",
      "line": 279,
      "context": "for (const [prop, value] of Object.entries(properties)) {",
      "error": "Function 'entries' is not defined"
    },
    {
      "type": "function",
      "name": "startsWith",
      "file": "src/performanceManager.js",
      "line": 286,
      "context": "} else if (prop.startsWith('data-')) {",
      "error": "Function 'startsWith' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/performanceManager.js",
      "line": 287,
      "context": "element.setAttribute(prop, value);",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "assign",
      "file": "src/performanceManager.js",
      "line": 289,
      "context": "Object.assign(element.style, value);",
      "error": "Function 'assign' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/performanceManager.js",
      "line": 312,
      "context": "console.log('📊 Performance monitoring started');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/performanceManager.js",
      "line": 320,
      "context": "console.log('📊 Performance monitoring stopped');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/performanceManager.js",
      "line": 334,
      "context": "this.frameRateHistory.push(fps);",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "shift",
      "file": "src/performanceManager.js",
      "line": 338,
      "context": "this.frameRateHistory.shift();",
      "error": "Function 'shift' is not defined"
    },
    {
      "type": "function",
      "name": "reduce",
      "file": "src/performanceManager.js",
      "line": 342,
      "context": "this.metrics.frameRate = this.frameRateHistory.reduce((a, b) => a + b, 0) / this.frameRateHistory.length;",
      "error": "Function 'reduce' is not defined"
    },
    {
      "type": "function",
      "name": "usage",
      "file": "src/performanceManager.js",
      "line": 355,
      "context": "* Monitor memory usage (if available)",
      "error": "Function 'usage' is not defined"
    },
    {
      "type": "function",
      "name": "updateMemory",
      "file": "src/performanceManager.js",
      "line": 371,
      "context": "updateMemory();",
      "error": "Function 'updateMemory' is not defined"
    },
    {
      "type": "function",
      "name": "round",
      "file": "src/performanceManager.js",
      "line": 381,
      "context": "frameRate: Math.round(this.metrics.frameRate * 100) / 100,",
      "error": "Function 'round' is not defined"
    },
    {
      "type": "function",
      "name": "round",
      "file": "src/performanceManager.js",
      "line": 382,
      "context": "memoryUsage: Math.round(this.metrics.memoryUsage * 100) / 100,",
      "error": "Function 'round' is not defined"
    },
    {
      "type": "function",
      "name": "from",
      "file": "src/performanceManager.js",
      "line": 383,
      "context": "poolStats: Array.from(this.objectPools.keys()).map(name => this.getPoolStats(name)),",
      "error": "Function 'from' is not defined"
    },
    {
      "type": "function",
      "name": "keys",
      "file": "src/performanceManager.js",
      "line": 383,
      "context": "poolStats: Array.from(this.objectPools.keys()).map(name => this.getPoolStats(name)),",
      "error": "Function 'keys' is not defined"
    },
    {
      "type": "function",
      "name": "map",
      "file": "src/performanceManager.js",
      "line": 383,
      "context": "poolStats: Array.from(this.objectPools.keys()).map(name => this.getPoolStats(name)),",
      "error": "Function 'map' is not defined"
    },
    {
      "type": "function",
      "name": "executedFunction",
      "file": "src/performanceManager.js",
      "line": 401,
      "context": "return function executedFunction(...args) {",
      "error": "Function 'executedFunction' is not defined"
    },
    {
      "type": "function",
      "name": "clearTimeout",
      "file": "src/performanceManager.js",
      "line": 403,
      "context": "clearTimeout(timeout);",
      "error": "Function 'clearTimeout' is not defined"
    },
    {
      "type": "function",
      "name": "func",
      "file": "src/performanceManager.js",
      "line": 404,
      "context": "func(...args);",
      "error": "Function 'func' is not defined"
    },
    {
      "type": "function",
      "name": "clearTimeout",
      "file": "src/performanceManager.js",
      "line": 406,
      "context": "clearTimeout(timeout);",
      "error": "Function 'clearTimeout' is not defined"
    },
    {
      "type": "function",
      "name": "executedFunction",
      "file": "src/performanceManager.js",
      "line": 419,
      "context": "return function executedFunction(...args) {",
      "error": "Function 'executedFunction' is not defined"
    },
    {
      "type": "function",
      "name": "apply",
      "file": "src/performanceManager.js",
      "line": 421,
      "context": "func.apply(this, args);",
      "error": "Function 'apply' is not defined"
    },
    {
      "type": "function",
      "name": "matchMedia",
      "file": "src/performanceManager.js",
      "line": 433,
      "context": "return window.matchMedia('(prefers-reduced-motion: reduce)').matches;",
      "error": "Function 'matchMedia' is not defined"
    },
    {
      "type": "function",
      "name": "clear",
      "file": "src/performanceManager.js",
      "line": 448,
      "context": "this.objectPools.clear();",
      "error": "Function 'clear' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/performanceManager.js",
      "line": 454,
      "context": "console.log('🧹 PerformanceManager cleanup completed');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/performanceManager.js",
      "line": 466,
      "context": "recommendations.push('Frame rate is low. Consider reducing visual effects or DOM updates.');",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/performanceManager.js",
      "line": 470,
      "context": "recommendations.push('Memory usage is high. Consider clearing caches or reducing object creation.');",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/performanceManager.js",
      "line": 474,
      "context": "recommendations.push('Object pool miss rate is high. Consider increasing pool sizes.');",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/performanceManager.js",
      "line": 478,
      "context": "recommendations.push('DOM update queue is large. Consider batching updates more aggressively.');",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/performanceManager.js",
      "line": 482,
      "context": "recommendations.push('Performance metrics look good! 🎉');",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 24,
      "context": "console.log('📊 Performance Monitoring Dashboard initialized');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 31,
      "context": "this.dashboardElement = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 97,
      "context": "document.body.appendChild(this.dashboardElement);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 104,
      "context": "if (document.getElementById('performance-dashboard-styles')) return;",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 106,
      "context": "const styles = document.createElement('style');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "rgba",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 115,
      "context": "background: rgba(0, 0, 0, 0.95);",
      "error": "Function 'rgba' is not defined"
    },
    {
      "type": "function",
      "name": "rgba",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 121,
      "context": "box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);",
      "error": "Function 'rgba' is not defined"
    },
    {
      "type": "function",
      "name": "translateX",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 127,
      "context": "transform: translateX(100%);",
      "error": "Function 'translateX' is not defined"
    },
    {
      "type": "function",
      "name": "rgba",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 138,
      "context": "background: rgba(255, 255, 255, 0.1);",
      "error": "Function 'rgba' is not defined"
    },
    {
      "type": "function",
      "name": "rgba",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 162,
      "context": "background: rgba(255, 255, 255, 0.2);",
      "error": "Function 'rgba' is not defined"
    },
    {
      "type": "function",
      "name": "rgba",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 177,
      "context": "background: rgba(255, 255, 255, 0.1);",
      "error": "Function 'rgba' is not defined"
    },
    {
      "type": "function",
      "name": "rgba",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 204,
      "context": "background: rgba(255, 255, 255, 0.1);",
      "error": "Function 'rgba' is not defined"
    },
    {
      "type": "function",
      "name": "gradient",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 214,
      "context": "background: linear-gradient(to top, #4CAF50, #81C784);",
      "error": "Function 'gradient' is not defined"
    },
    {
      "type": "function",
      "name": "rgba",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 232,
      "context": "border-bottom: 1px solid rgba(255, 255, 255, 0.1);",
      "error": "Function 'rgba' is not defined"
    },
    {
      "type": "function",
      "name": "rgba",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 250,
      "context": "border: 1px solid rgba(255, 255, 255, 0.3);",
      "error": "Function 'rgba' is not defined"
    },
    {
      "type": "function",
      "name": "rgba",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 251,
      "context": "background: rgba(255, 255, 255, 0.1);",
      "error": "Function 'rgba' is not defined"
    },
    {
      "type": "function",
      "name": "rgba",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 259,
      "context": "background: rgba(255, 255, 255, 0.2);",
      "error": "Function 'rgba' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 275,
      "context": "document.head.appendChild(styles);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 282,
      "context": "const closeBtn = this.dashboardElement.querySelector('.dashboard-close');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 285,
      "context": "const clearBtn = this.dashboardElement.querySelector('#clear-metrics');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 288,
      "context": "const exportBtn = this.dashboardElement.querySelector('#export-metrics');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 291,
      "context": "const autoOptimizeCheckbox = this.dashboardElement.querySelector('#auto-optimize');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "preventDefault",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 304,
      "context": "e.preventDefault();",
      "error": "Function 'preventDefault' is not defined"
    },
    {
      "type": "function",
      "name": "remove",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 315,
      "context": "this.dashboardElement.classList.remove('hidden');",
      "error": "Function 'remove' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 317,
      "context": "console.log('📊 Performance dashboard shown');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "add",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 325,
      "context": "this.dashboardElement.classList.add('hidden');",
      "error": "Function 'add' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 327,
      "context": "console.log('📊 Performance dashboard hidden');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "clearInterval",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 357,
      "context": "clearInterval(this.updateInterval);",
      "error": "Function 'clearInterval' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 393,
      "context": "this.metricsHistory[metric].push(value);",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "shift",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 396,
      "context": "this.metricsHistory[metric].shift();",
      "error": "Function 'shift' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 404,
      "context": "const valueElement = this.dashboardElement.querySelector('#fps-value');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 405,
      "context": "const chartElement = this.dashboardElement.querySelector('#fps-chart');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "toFixed",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 407,
      "context": "valueElement.textContent = fps.toFixed(1);",
      "error": "Function 'toFixed' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 425,
      "context": "const valueElement = this.dashboardElement.querySelector('#memory-value');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "toFixed",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 427,
      "context": "valueElement.textContent = memory.toFixed(1);",
      "error": "Function 'toFixed' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 443,
      "context": "const valueElement = this.dashboardElement.querySelector('#dom-value');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 451,
      "context": "const valueElement = this.dashboardElement.querySelector('#pool-value');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "toFixed",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 455,
      "context": "valueElement.textContent = hitRate.toFixed(1);",
      "error": "Function 'toFixed' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 470,
      "context": "const container = this.dashboardElement.querySelector('#pool-stats-content');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "map",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 477,
      "context": "container.innerHTML = poolStats.map(pool => `",
      "error": "Function 'map' is not defined"
    },
    {
      "type": "function",
      "name": "toFixed",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 480,
      "context": "<span>${pool.hitRate.toFixed(1)}% (${pool.hits}/${pool.hits + pool.misses})</span>",
      "error": "Function 'toFixed' is not defined"
    },
    {
      "type": "function",
      "name": "join",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 482,
      "context": "`).join('');",
      "error": "Function 'join' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 489,
      "context": "const container = this.dashboardElement.querySelector('#recommendations-content');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "map",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 492,
      "context": "container.innerHTML = recommendations.map(rec => `",
      "error": "Function 'map' is not defined"
    },
    {
      "type": "function",
      "name": "join",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 494,
      "context": "`).join('');",
      "error": "Function 'join' is not defined"
    },
    {
      "type": "function",
      "name": "max",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 506,
      "context": "const barWidth = Math.max(1, width / this.maxHistoryLength);",
      "error": "Function 'max' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 508,
      "context": "data.forEach((value, index) => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 509,
      "context": "const bar = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 515,
      "context": "chartElement.appendChild(bar);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 526,
      "context": "console.log('🧹 Auto-optimization: Cleared question cache due to high memory usage');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 535,
      "context": "console.log('⚡ Auto-optimization: Low pool hit rate detected');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "keys",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 543,
      "context": "for (const key of Object.keys(this.metricsHistory)) {",
      "error": "Function 'keys' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 556,
      "context": "console.log('🧹 Metrics cleared');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "toISOString",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 564,
      "context": "timestamp: new Date().toISOString(),",
      "error": "Function 'toISOString' is not defined"
    },
    {
      "type": "function",
      "name": "stringify",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 570,
      "context": "const dataStr = JSON.stringify(exportData, null, 2);",
      "error": "Function 'stringify' is not defined"
    },
    {
      "type": "function",
      "name": "Blob",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 571,
      "context": "const dataBlob = new Blob([dataStr], { type: 'application/json' });",
      "error": "Function 'Blob' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 573,
      "context": "const link = document.createElement('a');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "createObjectURL",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 574,
      "context": "link.href = URL.createObjectURL(dataBlob);",
      "error": "Function 'createObjectURL' is not defined"
    },
    {
      "type": "function",
      "name": "now",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 575,
      "context": "link.download = `performance-metrics-${Date.now()}.json`;",
      "error": "Function 'now' is not defined"
    },
    {
      "type": "function",
      "name": "click",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 576,
      "context": "link.click();",
      "error": "Function 'click' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 578,
      "context": "console.log('📊 Metrics exported');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "removeChild",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 588,
      "context": "this.dashboardElement.parentNode.removeChild(this.dashboardElement);",
      "error": "Function 'removeChild' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 591,
      "context": "const styles = document.getElementById('performance-dashboard-styles');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "removeChild",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 593,
      "context": "styles.parentNode.removeChild(styles);",
      "error": "Function 'removeChild' is not defined"
    },
    {
      "type": "function",
      "name": "log",
      "file": "src/performanceMonitoringDashboard.js",
      "line": 596,
      "context": "console.log('🧹 Performance dashboard cleanup completed');",
      "error": "Function 'log' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 14,
      "context": "const button = document.createElement('button');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/uiOptimizations.js",
      "line": 17,
      "context": "button.setAttribute('tabindex', '0');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/uiOptimizations.js",
      "line": 18,
      "context": "button.setAttribute('role', 'button');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "removeAttribute",
      "file": "src/uiOptimizations.js",
      "line": 26,
      "context": "this.removeAttribute('data-answer-index');",
      "error": "Function 'removeAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "removeAttribute",
      "file": "src/uiOptimizations.js",
      "line": 27,
      "context": "this.removeAttribute('aria-label');",
      "error": "Function 'removeAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 37,
      "context": "const toast = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/uiOptimizations.js",
      "line": 39,
      "context": "toast.setAttribute('role', 'alert');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/uiOptimizations.js",
      "line": 40,
      "context": "toast.setAttribute('aria-live', 'polite');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 43,
      "context": "const icon = document.createElement('span');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 46,
      "context": "const content = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 49,
      "context": "const title = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 52,
      "context": "const message = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 55,
      "context": "content.appendChild(title);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 56,
      "context": "content.appendChild(message);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 57,
      "context": "toast.appendChild(icon);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 58,
      "context": "toast.appendChild(content);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "removeAttribute",
      "file": "src/uiOptimizations.js",
      "line": 67,
      "context": "this.removeAttribute('data-type');",
      "error": "Function 'removeAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 77,
      "context": "const connection = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 80,
      "context": "const link = document.createElement('button');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/uiOptimizations.js",
      "line": 83,
      "context": "link.setAttribute('tabindex', '0');",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 85,
      "context": "connection.appendChild(link);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "removeAttribute",
      "file": "src/uiOptimizations.js",
      "line": 93,
      "context": "link.removeAttribute('data-room-id');",
      "error": "Function 'removeAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "removeAttribute",
      "file": "src/uiOptimizations.js",
      "line": 94,
      "context": "link.removeAttribute('aria-label');",
      "error": "Function 'removeAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 104,
      "context": "const container = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 107,
      "context": "const bar = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 110,
      "context": "const fill = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 113,
      "context": "const label = document.createElement('span');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 116,
      "context": "bar.appendChild(fill);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 117,
      "context": "container.appendChild(bar);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 118,
      "context": "container.appendChild(label);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "removeAttribute",
      "file": "src/uiOptimizations.js",
      "line": 125,
      "context": "this.removeAttribute('data-progress');",
      "error": "Function 'removeAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 135,
      "context": "const timer = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 138,
      "context": "const bar = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 141,
      "context": "const fill = document.createElement('div');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "createElement",
      "file": "src/uiOptimizations.js",
      "line": 144,
      "context": "const text = document.createElement('span');",
      "error": "Function 'createElement' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 147,
      "context": "bar.appendChild(fill);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 148,
      "context": "timer.appendChild(bar);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "appendChild",
      "file": "src/uiOptimizations.js",
      "line": 149,
      "context": "timer.appendChild(text);",
      "error": "Function 'appendChild' is not defined"
    },
    {
      "type": "function",
      "name": "return",
      "file": "src/uiOptimizations.js",
      "line": 172,
      "context": "return () => {",
      "error": "Function 'return' is not defined"
    },
    {
      "type": "function",
      "name": "return",
      "file": "src/uiOptimizations.js",
      "line": 183,
      "context": "return () => {",
      "error": "Function 'return' is not defined"
    },
    {
      "type": "function",
      "name": "return",
      "file": "src/uiOptimizations.js",
      "line": 194,
      "context": "return () => {",
      "error": "Function 'return' is not defined"
    },
    {
      "type": "function",
      "name": "entries",
      "file": "src/uiOptimizations.js",
      "line": 195,
      "context": "for (const [property, value] of Object.entries(styles)) {",
      "error": "Function 'entries' is not defined"
    },
    {
      "type": "function",
      "name": "return",
      "file": "src/uiOptimizations.js",
      "line": 207,
      "context": "return () => {",
      "error": "Function 'return' is not defined"
    },
    {
      "type": "function",
      "name": "entries",
      "file": "src/uiOptimizations.js",
      "line": 208,
      "context": "for (const [attr, value] of Object.entries(attributes)) {",
      "error": "Function 'entries' is not defined"
    },
    {
      "type": "function",
      "name": "getAttribute",
      "file": "src/uiOptimizations.js",
      "line": 209,
      "context": "if (element.getAttribute(attr) !== value) {",
      "error": "Function 'getAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/uiOptimizations.js",
      "line": 210,
      "context": "element.setAttribute(attr, value);",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "return",
      "file": "src/uiOptimizations.js",
      "line": 220,
      "context": "return () => {",
      "error": "Function 'return' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/uiOptimizations.js",
      "line": 222,
      "context": "const fill = progressElement.querySelector('.progress-fill') ||",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "contains",
      "file": "src/uiOptimizations.js",
      "line": 223,
      "context": "progressElement.classList.contains('progress-fill') ? progressElement : null;",
      "error": "Function 'contains' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/uiOptimizations.js",
      "line": 224,
      "context": "const labelElement = progressElement.querySelector('.progress-percent') ||",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/uiOptimizations.js",
      "line": 225,
      "context": "progressElement.querySelector('.progress-label') ||",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "querySelector",
      "file": "src/uiOptimizations.js",
      "line": 226,
      "context": "progressElement.parentElement?.querySelector('.progress-percent');",
      "error": "Function 'querySelector' is not defined"
    },
    {
      "type": "function",
      "name": "max",
      "file": "src/uiOptimizations.js",
      "line": 229,
      "context": "fill.style.width = `${Math.max(0, Math.min(100, percentage))}%`;",
      "error": "Function 'max' is not defined"
    },
    {
      "type": "function",
      "name": "min",
      "file": "src/uiOptimizations.js",
      "line": 229,
      "context": "fill.style.width = `${Math.max(0, Math.min(100, percentage))}%`;",
      "error": "Function 'min' is not defined"
    },
    {
      "type": "function",
      "name": "setAttribute",
      "file": "src/uiOptimizations.js",
      "line": 234,
      "context": "progressElement.setAttribute('data-progress', percentage);",
      "error": "Function 'setAttribute' is not defined"
    },
    {
      "type": "function",
      "name": "return",
      "file": "src/uiOptimizations.js",
      "line": 242,
      "context": "return () => {",
      "error": "Function 'return' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/uiOptimizations.js",
      "line": 243,
      "context": "const fill = document.getElementById('timer-bar');",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "getElementById",
      "file": "src/uiOptimizations.js",
      "line": 244,
      "context": "const text = document.getElementById('timer-text') || timerElement;",
      "error": "Function 'getElementById' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/uiOptimizations.js",
      "line": 247,
      "context": "console.warn('UI Optimizations: Timer bar element not found');",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "warn",
      "file": "src/uiOptimizations.js",
      "line": 250,
      "context": "console.warn('UI Optimizations: Timer text element not found');",
      "error": "Function 'warn' is not defined"
    },
    {
      "type": "function",
      "name": "max",
      "file": "src/uiOptimizations.js",
      "line": 256,
      "context": "fill.style.width = `${Math.max(0, percentage)}%`;",
      "error": "Function 'max' is not defined"
    },
    {
      "type": "function",
      "name": "ceil",
      "file": "src/uiOptimizations.js",
      "line": 269,
      "context": "text.textContent = `${Math.ceil(timeRemaining)}s`;",
      "error": "Function 'ceil' is not defined"
    },
    {
      "type": "function",
      "name": "IntersectionObserver",
      "file": "src/uiOptimizations.js",
      "line": 289,
      "context": "return new IntersectionObserver(callback, { ...defaultOptions, ...options });",
      "error": "Function 'IntersectionObserver' is not defined"
    },
    {
      "type": "function",
      "name": "closest",
      "file": "src/uiOptimizations.js",
      "line": 297,
      "context": "const target = event.target.closest(selector);",
      "error": "Function 'closest' is not defined"
    },
    {
      "type": "function",
      "name": "handler",
      "file": "src/uiOptimizations.js",
      "line": 299,
      "context": "handler(event, target);",
      "error": "Function 'handler' is not defined"
    },
    {
      "type": "function",
      "name": "ResizeObserver",
      "file": "src/uiOptimizations.js",
      "line": 309,
      "context": "return new ResizeObserver(callback);",
      "error": "Function 'ResizeObserver' is not defined"
    },
    {
      "type": "function",
      "name": "clearTimeout",
      "file": "src/uiOptimizations.js",
      "line": 315,
      "context": "clearTimeout(resizeTimeout);",
      "error": "Function 'clearTimeout' is not defined"
    },
    {
      "type": "function",
      "name": "updateFunction",
      "file": "src/uiOptimizations.js",
      "line": 337,
      "context": "updateFunction(currentTime - lastTime);",
      "error": "Function 'updateFunction' is not defined"
    },
    {
      "type": "function",
      "name": "Map",
      "file": "src/uiOptimizations.js",
      "line": 362,
      "context": "const listeners = new Map();",
      "error": "Function 'Map' is not defined"
    },
    {
      "type": "function",
      "name": "has",
      "file": "src/uiOptimizations.js",
      "line": 367,
      "context": "if (!listeners.has(key)) {",
      "error": "Function 'has' is not defined"
    },
    {
      "type": "function",
      "name": "set",
      "file": "src/uiOptimizations.js",
      "line": 368,
      "context": "listeners.set(key, []);",
      "error": "Function 'set' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/uiOptimizations.js",
      "line": 370,
      "context": "listeners.get(key).push({ handler, options });",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "push",
      "file": "src/uiOptimizations.js",
      "line": 370,
      "context": "listeners.get(key).push({ handler, options });",
      "error": "Function 'push' is not defined"
    },
    {
      "type": "function",
      "name": "get",
      "file": "src/uiOptimizations.js",
      "line": 376,
      "context": "const elementListeners = listeners.get(key);",
      "error": "Function 'get' is not defined"
    },
    {
      "type": "function",
      "name": "findIndex",
      "file": "src/uiOptimizations.js",
      "line": 378,
      "context": "const index = elementListeners.findIndex(l => l.handler === handler);",
      "error": "Function 'findIndex' is not defined"
    },
    {
      "type": "function",
      "name": "splice",
      "file": "src/uiOptimizations.js",
      "line": 380,
      "context": "elementListeners.splice(index, 1);",
      "error": "Function 'splice' is not defined"
    },
    {
      "type": "function",
      "name": "entries",
      "file": "src/uiOptimizations.js",
      "line": 387,
      "context": "for (const [key, elementListeners] of listeners.entries()) {",
      "error": "Function 'entries' is not defined"
    },
    {
      "type": "function",
      "name": "startsWith",
      "file": "src/uiOptimizations.js",
      "line": 388,
      "context": "if (key.startsWith(element.toString())) {",
      "error": "Function 'startsWith' is not defined"
    },
    {
      "type": "function",
      "name": "toString",
      "file": "src/uiOptimizations.js",
      "line": 388,
      "context": "if (key.startsWith(element.toString())) {",
      "error": "Function 'toString' is not defined"
    },
    {
      "type": "function",
      "name": "forEach",
      "file": "src/uiOptimizations.js",
      "line": 389,
      "context": "elementListeners.forEach(({ handler }) => {",
      "error": "Function 'forEach' is not defined"
    },
    {
      "type": "function",
      "name": "split",
      "file": "src/uiOptimizations.js",
      "line": 390,
      "context": "const eventType = key.split(':')[1];",
      "error": "Function 'split' is not defined"
    },
    {
      "type": "function",
      "name": "delete",
      "file": "src/uiOptimizations.js",
      "line": 393,
      "context": "listeners.delete(key);",
      "error": "Function 'delete' is not defined"
    },
    {
      "type": "function",
      "name": "clear",
      "file": "src/uiOptimizations.js",
      "line": 399,
      "context": "listeners.clear();",
      "error": "Function 'clear' is not defined"
    }
  ],
  "summary": {
    "totalFunctionDefs": 423,
    "totalFunctionCalls": 2894,
    "totalMethodCalls": 2040,
    "undefinedCount": 1800,
    "status": "FAIL"
  }
}